import { getAllFilesInRepository } from "/gh/gh-comms";
import { RemoteFiles } from "/general/remote-file";
function sanitize(str) {
    return str.replace(/[^a-zA-Z0-9\s\/.]/g, '').replace(/[\s]+/g, '-');
}
export async function main(ns) {
    const repo = ns.args[0].replace("https://github.com/", "");
    const owner = repo.split('/')[0];
    const repository = repo.split('/')[1];
    const subdir = ns.args[1];
    const branch = ns.args[2];
    const remote = new RemoteFiles(ns);
    let auth;
    if (ns.fileExists("git-config/auth.txt", "home")) {
        auth = (await remote.read("git-config/auth.txt", "home")).trim();
    }
    const files = await getAllFilesInRepository(owner, repository, branch, subdir, auth);
    for (const file of files) {
        await handleFile(ns, file, repository, subdir);
    }
}
async function handleFile(ns, file, repo_name, subdir = '') {
    ns.tprint(`cloning file ${sanitize(file.name)} to ${repo_name}/${sanitize(file.path.replace(subdir, ''))}`);
    const data = await (await fetch(file.url)).text();
    ns.write(`${repo_name}/${sanitize(file.path.replace(subdir, ''))}`, data);
    ns.tprint(`cloned file ${sanitize(file.name)} to ${repo_name}/${sanitize(file.path.replace(subdir, ''))}`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2gtY2xvbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2doL2doLWNsb25lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRW5ELFNBQVMsUUFBUSxDQUFDLEdBQVc7SUFDekIsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDeEUsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQVM7SUFDaEMsTUFBTSxJQUFJLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkUsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDcEMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUNwQyxNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxJQUFJLElBQUksQ0FBQztJQUNULElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUM5QyxJQUFJLEdBQUcsQ0FBQyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNwRTtJQUNELE1BQU0sS0FBSyxHQUFHLE1BQU0sdUJBQXVCLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JGLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3RCLE1BQU0sVUFBVSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ2xEO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxVQUFVLENBQUMsRUFBUyxFQUFFLElBQStDLEVBQUUsU0FBaUIsRUFBRSxNQUFNLEdBQUcsRUFBRTtJQUNoSCxFQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFnQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLFNBQVMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVHLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsRCxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsU0FBUyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsZUFBZSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLFNBQVMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9HLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbnMgZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgZ2V0QWxsRmlsZXNJblJlcG9zaXRvcnkgfSBmcm9tIFwiL2doL2doLWNvbW1zXCI7XG5pbXBvcnQgeyBSZW1vdGVGaWxlcyB9IGZyb20gXCIvZ2VuZXJhbC9yZW1vdGUtZmlsZVwiO1xuXG5mdW5jdGlvbiBzYW5pdGl6ZShzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvW15hLXpBLVowLTlcXHNcXC8uXS9nLCAnJykucmVwbGFjZSgvW1xcc10rL2csICctJyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBucy5OUykge1xuICAgIGNvbnN0IHJlcG8gPSAobnMuYXJnc1swXSBhcyBzdHJpbmcpLnJlcGxhY2UoXCJodHRwczovL2dpdGh1Yi5jb20vXCIsIFwiXCIpO1xuICAgIGNvbnN0IG93bmVyID0gcmVwby5zcGxpdCgnLycpWzBdO1xuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSByZXBvLnNwbGl0KCcvJylbMV07XG4gICAgY29uc3Qgc3ViZGlyID0gbnMuYXJnc1sxXSBhcyBzdHJpbmc7XG4gICAgY29uc3QgYnJhbmNoID0gbnMuYXJnc1syXSBhcyBzdHJpbmc7XG4gICAgY29uc3QgcmVtb3RlID0gbmV3IFJlbW90ZUZpbGVzKG5zKTtcbiAgICBsZXQgYXV0aDtcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhcImdpdC1jb25maWcvYXV0aC50eHRcIiwgXCJob21lXCIpKSB7XG4gICAgICAgIGF1dGggPSAoYXdhaXQgcmVtb3RlLnJlYWQoXCJnaXQtY29uZmlnL2F1dGgudHh0XCIsIFwiaG9tZVwiKSkudHJpbSgpO1xuICAgIH1cbiAgICBjb25zdCBmaWxlcyA9IGF3YWl0IGdldEFsbEZpbGVzSW5SZXBvc2l0b3J5KG93bmVyLCByZXBvc2l0b3J5LCBicmFuY2gsIHN1YmRpciwgYXV0aCk7XG4gICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgIGF3YWl0IGhhbmRsZUZpbGUobnMsIGZpbGUsIHJlcG9zaXRvcnksIHN1YmRpcik7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVGaWxlKG5zOiBucy5OUywgZmlsZToge25hbWU6IHN0cmluZzsgcGF0aDogc3RyaW5nOyB1cmw6IHN0cmluZ30sIHJlcG9fbmFtZTogc3RyaW5nLCBzdWJkaXIgPSAnJykge1xuICAgIG5zLnRwcmludChgY2xvbmluZyBmaWxlICR7c2FuaXRpemUoZmlsZS5uYW1lKX0gdG8gJHtyZXBvX25hbWV9LyR7c2FuaXRpemUoZmlsZS5wYXRoLnJlcGxhY2Uoc3ViZGlyLCAnJykpfWApO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCAoYXdhaXQgZmV0Y2goZmlsZS51cmwpKS50ZXh0KCk7XG4gICAgbnMud3JpdGUoYCR7cmVwb19uYW1lfS8ke3Nhbml0aXplKGZpbGUucGF0aC5yZXBsYWNlKHN1YmRpciwgJycpKX1gLCBkYXRhKTtcbiAgICBucy50cHJpbnQoYGNsb25lZCBmaWxlICR7c2FuaXRpemUoZmlsZS5uYW1lKX0gdG8gJHtyZXBvX25hbWV9LyR7c2FuaXRpemUoZmlsZS5wYXRoLnJlcGxhY2Uoc3ViZGlyLCAnJykpfWApO1xufSJdfQ==