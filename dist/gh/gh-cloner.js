import { getAllFilesInRepository } from "/gh/gh-comms";
import { RemoteFiles } from "/general/remote-file";
function sanitize(str) {
    return str.replace(/[^a-zA-Z0-9\s\/-.]/g, '').replace(/[\s]+/g, '-');
}
export async function main(ns) {
    const repo = ns.args[0].replace("https://github.com/", "");
    const owner = repo.split('/')[0];
    const repository = repo.split('/')[1];
    const subdir = ns.args[1];
    const branch = ns.args[2];
    const remote = new RemoteFiles(ns);
    let auth;
    if (ns.fileExists("git-config/auth.txt", "home")) {
        auth = (await remote.read("git-config/auth.txt", "home")).trim();
    }
    const files = await getAllFilesInRepository(owner, repository, branch, subdir, auth);
    for (const file of files) {
        await handleFile(ns, file, repository, subdir);
    }
}
async function handleFile(ns, file, repo_name, subdir = '') {
    ns.tprint(`cloning file ${sanitize(file.name)} to ${repo_name}/${sanitize(file.path.replace(subdir, ''))}`);
    const data = await (await fetch(file.url)).text();
    ns.write(`${repo_name}/${sanitize(file.path.replace(subdir, ''))}`, data);
    ns.tprint(`cloned file ${sanitize(file.name)} to ${repo_name}/${sanitize(file.path.replace(subdir, ''))}`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2gtY2xvbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2doL2doLWNsb25lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRW5ELFNBQVMsUUFBUSxDQUFDLEdBQVc7SUFDekIsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDekUsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQVM7SUFDaEMsTUFBTSxJQUFJLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkUsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDcEMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUNwQyxNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxJQUFJLElBQUksQ0FBQztJQUNULElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUM5QyxJQUFJLEdBQUcsQ0FBQyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNwRTtJQUNELE1BQU0sS0FBSyxHQUFHLE1BQU0sdUJBQXVCLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JGLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3RCLE1BQU0sVUFBVSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ2xEO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxVQUFVLENBQUMsRUFBUyxFQUFFLElBQStDLEVBQUUsU0FBaUIsRUFBRSxNQUFNLEdBQUcsRUFBRTtJQUNoSCxFQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFnQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLFNBQVMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVHLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsRCxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsU0FBUyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsZUFBZSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLFNBQVMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9HLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbnMgZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgZ2V0QWxsRmlsZXNJblJlcG9zaXRvcnkgfSBmcm9tIFwiL2doL2doLWNvbW1zXCI7XG5pbXBvcnQgeyBSZW1vdGVGaWxlcyB9IGZyb20gXCIvZ2VuZXJhbC9yZW1vdGUtZmlsZVwiO1xuXG5mdW5jdGlvbiBzYW5pdGl6ZShzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvW15hLXpBLVowLTlcXHNcXC8tLl0vZywgJycpLnJlcGxhY2UoL1tcXHNdKy9nLCAnLScpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogbnMuTlMpIHtcbiAgICBjb25zdCByZXBvID0gKG5zLmFyZ3NbMF0gYXMgc3RyaW5nKS5yZXBsYWNlKFwiaHR0cHM6Ly9naXRodWIuY29tL1wiLCBcIlwiKTtcbiAgICBjb25zdCBvd25lciA9IHJlcG8uc3BsaXQoJy8nKVswXTtcbiAgICBjb25zdCByZXBvc2l0b3J5ID0gcmVwby5zcGxpdCgnLycpWzFdO1xuICAgIGNvbnN0IHN1YmRpciA9IG5zLmFyZ3NbMV0gYXMgc3RyaW5nO1xuICAgIGNvbnN0IGJyYW5jaCA9IG5zLmFyZ3NbMl0gYXMgc3RyaW5nO1xuICAgIGNvbnN0IHJlbW90ZSA9IG5ldyBSZW1vdGVGaWxlcyhucyk7XG4gICAgbGV0IGF1dGg7XG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJnaXQtY29uZmlnL2F1dGgudHh0XCIsIFwiaG9tZVwiKSkge1xuICAgICAgICBhdXRoID0gKGF3YWl0IHJlbW90ZS5yZWFkKFwiZ2l0LWNvbmZpZy9hdXRoLnR4dFwiLCBcImhvbWVcIikpLnRyaW0oKTtcbiAgICB9XG4gICAgY29uc3QgZmlsZXMgPSBhd2FpdCBnZXRBbGxGaWxlc0luUmVwb3NpdG9yeShvd25lciwgcmVwb3NpdG9yeSwgYnJhbmNoLCBzdWJkaXIsIGF1dGgpO1xuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICBhd2FpdCBoYW5kbGVGaWxlKG5zLCBmaWxlLCByZXBvc2l0b3J5LCBzdWJkaXIpO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmlsZShuczogbnMuTlMsIGZpbGU6IHtuYW1lOiBzdHJpbmc7IHBhdGg6IHN0cmluZzsgdXJsOiBzdHJpbmd9LCByZXBvX25hbWU6IHN0cmluZywgc3ViZGlyID0gJycpIHtcbiAgICBucy50cHJpbnQoYGNsb25pbmcgZmlsZSAke3Nhbml0aXplKGZpbGUubmFtZSl9IHRvICR7cmVwb19uYW1lfS8ke3Nhbml0aXplKGZpbGUucGF0aC5yZXBsYWNlKHN1YmRpciwgJycpKX1gKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgKGF3YWl0IGZldGNoKGZpbGUudXJsKSkudGV4dCgpO1xuICAgIG5zLndyaXRlKGAke3JlcG9fbmFtZX0vJHtzYW5pdGl6ZShmaWxlLnBhdGgucmVwbGFjZShzdWJkaXIsICcnKSl9YCwgZGF0YSk7XG4gICAgbnMudHByaW50KGBjbG9uZWQgZmlsZSAke3Nhbml0aXplKGZpbGUubmFtZSl9IHRvICR7cmVwb19uYW1lfS8ke3Nhbml0aXplKGZpbGUucGF0aC5yZXBsYWNlKHN1YmRpciwgJycpKX1gKTtcbn0iXX0=