export async function getAllFilesInRepository(owner, repo, branch = 'main', path = '', token) {
    const apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents/${path}?ref=${branch}`;
    const headers = token ? { 'Authorization': `Bearer ${token}` } : undefined;
    const response = await fetch(apiUrl, { headers });
    const data = await response.json();
    const files = [];
    for (const item of data) {
        if (item.type === 'file') {
            const fileName = item.name;
            const fileUrl = item.download_url;
            let filePath = path ? `${path}/${fileName}` : fileName;
            if (fileName.endsWith('.js')) {
                files.push({ name: fileName, path: filePath, url: fileUrl });
            }
            else if (fileName.endsWith('.md')) {
                files.push({ name: fileName.replace(/\.md$/, '.txt'), path: filePath.replace(/\.md$/, '.txt'), url: fileUrl });
            }
        }
        else if (item.type === 'dir') {
            const subFiles = await getAllFilesInRepository(owner, repo, branch, item.path, token);
            files.push(...subFiles);
        }
    }
    return files;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2gtY29tbXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2gvZ2gtY29tbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSx1QkFBdUIsQ0FBQyxLQUFhLEVBQUUsSUFBWSxFQUFFLE1BQU0sR0FBRyxNQUFNLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRSxLQUFjO0lBQ2pILE1BQU0sTUFBTSxHQUFHLGdDQUFnQyxLQUFLLElBQUksSUFBSSxhQUFhLElBQUksUUFBUSxNQUFNLEVBQUUsQ0FBQztJQUM5RixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsZUFBZSxFQUFFLFVBQVUsS0FBSyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQzFFLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFbEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFbkMsTUFBTSxLQUFLLEdBQWdELEVBQUUsQ0FBQztJQUU5RCxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksRUFBRTtRQUNyQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFO1lBQ3RCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDM0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNsQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFFdkQsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUMxQixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO2FBQ2hFO2lCQUFNLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDakMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7YUFDbEg7U0FDSjthQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUU7WUFDNUIsTUFBTSxRQUFRLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RGLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztTQUMzQjtLQUNKO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsRmlsZXNJblJlcG9zaXRvcnkob3duZXI6IHN0cmluZywgcmVwbzogc3RyaW5nLCBicmFuY2ggPSAnbWFpbicsIHBhdGggPSAnJywgdG9rZW4/OiBzdHJpbmcpIHtcbiAgICBjb25zdCBhcGlVcmwgPSBgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8ke293bmVyfS8ke3JlcG99L2NvbnRlbnRzLyR7cGF0aH0/cmVmPSR7YnJhbmNofWA7XG4gICAgY29uc3QgaGVhZGVycyA9IHRva2VuID8geyAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0b2tlbn1gfSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCwgeyBoZWFkZXJzIH0pO1xuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgIGNvbnN0IGZpbGVzOiB7bmFtZTogc3RyaW5nLCBwYXRoOiBzdHJpbmcsIHVybDogc3RyaW5nfVtdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YSkge1xuICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnZmlsZScpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gaXRlbS5uYW1lO1xuICAgICAgICAgICAgY29uc3QgZmlsZVVybCA9IGl0ZW0uZG93bmxvYWRfdXJsO1xuICAgICAgICAgICAgbGV0IGZpbGVQYXRoID0gcGF0aCA/IGAke3BhdGh9LyR7ZmlsZU5hbWV9YCA6IGZpbGVOYW1lO1xuXG4gICAgICAgICAgICBpZiAoZmlsZU5hbWUuZW5kc1dpdGgoJy5qcycpKSB7XG4gICAgICAgICAgICAgICAgZmlsZXMucHVzaCh7IG5hbWU6IGZpbGVOYW1lLCBwYXRoOiBmaWxlUGF0aCwgdXJsOiBmaWxlVXJsIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlTmFtZS5lbmRzV2l0aCgnLm1kJykpIHtcbiAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKHsgbmFtZTogZmlsZU5hbWUucmVwbGFjZSgvXFwubWQkLywgJy50eHQnKSwgcGF0aDogZmlsZVBhdGgucmVwbGFjZSgvXFwubWQkLywgJy50eHQnKSwgdXJsOiBmaWxlVXJsIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2RpcicpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YkZpbGVzID0gYXdhaXQgZ2V0QWxsRmlsZXNJblJlcG9zaXRvcnkob3duZXIsIHJlcG8sIGJyYW5jaCwgaXRlbS5wYXRoLCB0b2tlbik7XG4gICAgICAgICAgICBmaWxlcy5wdXNoKC4uLnN1YkZpbGVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWxlcztcbn0iXX0=