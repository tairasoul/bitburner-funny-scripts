export async function getAllFilesInRepository(owner, repo, branch = 'main', path = '', token) {
    const apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents/${path}?ref=${branch}`;
    const headers = token ? { 'Authorization': `Bearer ${token}` } : undefined;
    const response = await fetch(apiUrl, { headers });
    const data = await response.json();
    const files = [];
    for (const item of data) {
        if (item.type === 'file') {
            const fileName = item.name;
            const fileUrl = item.download_url;
            let filePath = path ? `${path}/${fileName}` : fileName;
            if (fileName.endsWith('.js')) {
                files.push({ name: fileName, path: filePath, url: fileUrl });
            }
            else if (fileName.endsWith('.md')) {
                files.push({ name: fileName.replace(/\.md$/, '.txt'), path: filePath.replace(/\.md$/, '.txt'), url: fileUrl });
            }
        }
        else if (item.type === 'dir') {
            const subFiles = await getAllFilesInRepository(owner, repo, branch, item.path, token);
            files.push(...subFiles);
        }
    }
    return files;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2gtY29tbXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2gvZ2gtY29tbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLEtBQUssVUFBVSx1QkFBdUIsQ0FBQyxLQUFhLEVBQUUsSUFBWSxFQUFFLE1BQU0sR0FBRyxNQUFNLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRSxLQUFjO0lBQ2pILE1BQU0sTUFBTSxHQUFHLGdDQUFnQyxLQUFLLElBQUksSUFBSSxhQUFhLElBQUksUUFBUSxNQUFNLEVBQUUsQ0FBQztJQUM5RixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsZUFBZSxFQUFFLFVBQVUsS0FBSyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQzFFLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFbEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFbkMsTUFBTSxLQUFLLEdBQWdELEVBQUUsQ0FBQztJQUU5RCxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksRUFBRTtRQUNyQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFO1lBQ3RCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDM0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNsQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFFdkQsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUMxQixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO2FBQ2hFO2lCQUFNLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDakMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7YUFDbEg7U0FDSjthQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUU7WUFDNUIsTUFBTSxRQUFRLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RGLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztTQUMzQjtLQUNKO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxGaWxlc0luUmVwb3NpdG9yeShvd25lcjogc3RyaW5nLCByZXBvOiBzdHJpbmcsIGJyYW5jaCA9ICdtYWluJywgcGF0aCA9ICcnLCB0b2tlbj86IHN0cmluZykge1xuICAgIGNvbnN0IGFwaVVybCA9IGBodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyR7b3duZXJ9LyR7cmVwb30vY29udGVudHMvJHtwYXRofT9yZWY9JHticmFuY2h9YDtcbiAgICBjb25zdCBoZWFkZXJzID0gdG9rZW4gPyB7ICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3Rva2VufWB9IDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpVXJsLCB7IGhlYWRlcnMgfSk7XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgY29uc3QgZmlsZXM6IHtuYW1lOiBzdHJpbmcsIHBhdGg6IHN0cmluZywgdXJsOiBzdHJpbmd9W10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBkYXRhKSB7XG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdmaWxlJykge1xuICAgICAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBpdGVtLm5hbWU7XG4gICAgICAgICAgICBjb25zdCBmaWxlVXJsID0gaXRlbS5kb3dubG9hZF91cmw7XG4gICAgICAgICAgICBsZXQgZmlsZVBhdGggPSBwYXRoID8gYCR7cGF0aH0vJHtmaWxlTmFtZX1gIDogZmlsZU5hbWU7XG5cbiAgICAgICAgICAgIGlmIChmaWxlTmFtZS5lbmRzV2l0aCgnLmpzJykpIHtcbiAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKHsgbmFtZTogZmlsZU5hbWUsIHBhdGg6IGZpbGVQYXRoLCB1cmw6IGZpbGVVcmwgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpbGVOYW1lLmVuZHNXaXRoKCcubWQnKSkge1xuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goeyBuYW1lOiBmaWxlTmFtZS5yZXBsYWNlKC9cXC5tZCQvLCAnLnR4dCcpLCBwYXRoOiBmaWxlUGF0aC5yZXBsYWNlKC9cXC5tZCQvLCAnLnR4dCcpLCB1cmw6IGZpbGVVcmwgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnZGlyJykge1xuICAgICAgICAgICAgY29uc3Qgc3ViRmlsZXMgPSBhd2FpdCBnZXRBbGxGaWxlc0luUmVwb3NpdG9yeShvd25lciwgcmVwbywgYnJhbmNoLCBpdGVtLnBhdGgsIHRva2VuKTtcbiAgICAgICAgICAgIGZpbGVzLnB1c2goLi4uc3ViRmlsZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGVzO1xufSJdfQ==