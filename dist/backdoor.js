import { getReactKey } from "/react-handlers/get_react_key";
import { gainAccess, list_servers } from "./general/utils";
function recursiveScan(ns, parent, server, target, route) {
    const children = ns.scan(server);
    for (let child of children) {
        if (parent == child) {
            continue;
        }
        if (child == target) {
            route.unshift(child);
            route.unshift(server);
            return true;
        }
        if (recursiveScan(ns, server, child, target, route)) {
            route.unshift(server);
            return true;
        }
    }
    return false;
}
export async function main(ns) {
    //await connectServer(ns, server);
    //await backdoor(ns);
    const servers = list_servers(ns);
    ns.disableLog("sleep");
    ns.tail();
    for (const server of servers) {
        if (ns.getPlayer().skills.hacking >= ns.getServerRequiredHackingLevel(server))
            if (ns.hasRootAccess(server)) {
                await connectServer(ns, server);
                await backdoor(ns);
            }
            else {
                await gainAccess(ns, server);
                if (ns.hasRootAccess(server)) {
                    await connectServer(ns, server);
                    await backdoor(ns);
                }
            }
    }
}
async function connectServer(ns, server) {
    const doc = eval("document");
    const terminal = doc.querySelector("#terminal-input");
    const route = [];
    recursiveScan(ns, '', 'home', server, route);
    const props = getReactKey(terminal, "Props$");
    // @ts-ignore
    const onChange = terminal[props].onChange;
    let str = "";
    for (const path of route) {
        str += `connect ${path};`;
    }
    onChange({ target: { value: str } });
    await ns.sleep(20);
    const event = {
        preventDefault: () => { },
        key: "Enter",
        isTrusted: true
    };
    // @ts-ignore
    const keyDown = terminal[props].onKeyDown;
    await keyDown(event);
}
async function backdoor(ns) {
    const doc = eval("document");
    const terminal = doc.querySelector("#terminal-input");
    const props = getReactKey(terminal, "Props$");
    // @ts-ignore
    const onChange = terminal[props].onChange;
    onChange({ target: { value: "backdoor" } });
    await ns.sleep(20);
    const event = {
        preventDefault: () => { },
        key: "Enter",
        isTrusted: true
    };
    // @ts-ignore
    const keyDown = terminal[props].onKeyDown;
    await keyDown(event);
    while (terminal.disabled) {
        await ns.sleep(1);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2Rvb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmFja2Rvb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBQzNELE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0QsU0FBUyxhQUFhLENBQUMsRUFBUyxFQUFFLE1BQWMsRUFBRSxNQUFjLEVBQUUsTUFBYyxFQUFFLEtBQWU7SUFDN0YsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxLQUFLLElBQUksS0FBSyxJQUFJLFFBQVEsRUFBRTtRQUN4QixJQUFJLE1BQU0sSUFBSSxLQUFLLEVBQUU7WUFDakIsU0FBUztTQUNaO1FBQ0QsSUFBSSxLQUFLLElBQUksTUFBTSxFQUFFO1lBQ2pCLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QixPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsSUFBSSxhQUFhLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQ2pELEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUM7U0FDZjtLQUNKO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQVM7SUFDaEMsa0NBQWtDO0lBQ2xDLHFCQUFxQjtJQUNyQixNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2QixFQUFFLENBQUMsSUFBSSxFQUFF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UUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUMxQyxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixPQUFPLFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDdEIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3JCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBucyBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBnZXRSZWFjdEtleSB9IGZyb20gXCIvcmVhY3QtaGFuZGxlcnMvZ2V0X3JlYWN0X2tleVwiXG5pbXBvcnQgeyBnYWluQWNjZXNzLCBsaXN0X3NlcnZlcnMgfSBmcm9tIFwiLi9nZW5lcmFsL3V0aWxzXCI7XG5cbmZ1bmN0aW9uIHJlY3Vyc2l2ZVNjYW4obnM6IG5zLk5TLCBwYXJlbnQ6IHN0cmluZywgc2VydmVyOiBzdHJpbmcsIHRhcmdldDogc3RyaW5nLCByb3V0ZTogc3RyaW5nW10pIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IG5zLnNjYW4oc2VydmVyKTtcbiAgICBmb3IgKGxldCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgICBpZiAocGFyZW50ID09IGNoaWxkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGQgPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICByb3V0ZS51bnNoaWZ0KGNoaWxkKTtcbiAgICAgICAgICAgIHJvdXRlLnVuc2hpZnQoc2VydmVyKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlY3Vyc2l2ZVNjYW4obnMsIHNlcnZlciwgY2hpbGQsIHRhcmdldCwgcm91dGUpKSB7XG4gICAgICAgICAgICByb3V0ZS51bnNoaWZ0KHNlcnZlcik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBucy5OUykge1xuICAgIC8vYXdhaXQgY29ubmVjdFNlcnZlcihucywgc2VydmVyKTtcbiAgICAvL2F3YWl0IGJhY2tkb29yKG5zKTtcbiAgICBjb25zdCBzZXJ2ZXJzID0gbGlzdF9zZXJ2ZXJzKG5zKTtcbiAgICBucy5kaXNhYmxlTG9nKFwic2xlZXBcIik7XG4gICAgbnMudGFpbCgpO1xuICAgIGZvciAoY29uc3Qgc2VydmVyIG9mIHNlcnZlcnMpIHtcbiAgICAgICAgaWYgKG5zLmdldFBsYXllcigpLnNraWxscy5oYWNraW5nID49IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlcikpXG4gICAgICAgICAgICBpZiAobnMuaGFzUm9vdEFjY2VzcyhzZXJ2ZXIpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY29ubmVjdFNlcnZlcihucywgc2VydmVyKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBiYWNrZG9vcihucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBnYWluQWNjZXNzKG5zLCBzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29ubmVjdFNlcnZlcihucywgc2VydmVyKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYmFja2Rvb3IobnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbm5lY3RTZXJ2ZXIobnM6IG5zLk5TLCBzZXJ2ZXI6IHN0cmluZykge1xuICAgIGNvbnN0IGRvYyA9IGV2YWwoXCJkb2N1bWVudFwiKVxuICAgIGNvbnN0IHRlcm1pbmFsID0gZG9jLnF1ZXJ5U2VsZWN0b3IoXCIjdGVybWluYWwtaW5wdXRcIikgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCByb3V0ZTogc3RyaW5nW10gPSBbXTtcbiAgICByZWN1cnNpdmVTY2FuKG5zLCAnJywgJ2hvbWUnLCBzZXJ2ZXIsIHJvdXRlKTtcbiAgICBjb25zdCBwcm9wcyA9IGdldFJlYWN0S2V5KHRlcm1pbmFsLCBcIlByb3BzJFwiKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qgb25DaGFuZ2UgPSB0ZXJtaW5hbFtwcm9wc10ub25DaGFuZ2U7XG4gICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgZm9yIChjb25zdCBwYXRoIG9mIHJvdXRlKSB7XG4gICAgICAgIHN0ciArPSBgY29ubmVjdCAke3BhdGh9O2BcbiAgICB9XG4gICAgb25DaGFuZ2Uoe3RhcmdldDoge3ZhbHVlOiBzdHJ9fSlcbiAgICBhd2FpdCBucy5zbGVlcCgyMCk7XG4gICAgY29uc3QgZXZlbnQgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiAoKSA9PiB7fSxcbiAgICAgICAga2V5OiBcIkVudGVyXCIsXG4gICAgICAgIGlzVHJ1c3RlZDogdHJ1ZVxuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qga2V5RG93biA9IHRlcm1pbmFsW3Byb3BzXS5vbktleURvd247XG4gICAgYXdhaXQga2V5RG93bihldmVudCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGJhY2tkb29yKG5zOiBucy5OUykge1xuICAgIGNvbnN0IGRvYyA9IGV2YWwoXCJkb2N1bWVudFwiKVxuICAgIGNvbnN0IHRlcm1pbmFsID0gZG9jLnF1ZXJ5U2VsZWN0b3IoXCIjdGVybWluYWwtaW5wdXRcIikgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCBwcm9wcyA9IGdldFJlYWN0S2V5KHRlcm1pbmFsLCBcIlByb3BzJFwiKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qgb25DaGFuZ2UgPSB0ZXJtaW5hbFtwcm9wc10ub25DaGFuZ2U7XG4gICAgb25DaGFuZ2Uoe3RhcmdldDoge3ZhbHVlOiBcImJhY2tkb29yXCJ9fSk7XG4gICAgYXdhaXQgbnMuc2xlZXAoMjApO1xuICAgIGNvbnN0IGV2ZW50ID0ge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdDogKCkgPT4ge30sXG4gICAgICAgIGtleTogXCJFbnRlclwiLFxuICAgICAgICBpc1RydXN0ZWQ6IHRydWVcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGtleURvd24gPSB0ZXJtaW5hbFtwcm9wc10ub25LZXlEb3duO1xuICAgIGF3YWl0IGtleURvd24oZXZlbnQpO1xuICAgIHdoaWxlICh0ZXJtaW5hbC5kaXNhYmxlZCkge1xuICAgICAgICBhd2FpdCBucy5zbGVlcCgxKTtcbiAgICB9XG59Il19