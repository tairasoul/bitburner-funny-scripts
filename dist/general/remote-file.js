import Communicator from "/port-registry/classes/communicator";
const perform_path = "/general/remote-file/perform-operation.js";
export class RemoteFiles {
    #ns;
    #comms;
    constructor(ns) {
        this.#ns = ns;
        this.#comms = new Communicator(ns);
    }
    exists(path, host) {
        return this.#ns.fileExists(path, host);
    }
    async read(path, host) {
        const port = (await this.#comms.assignFirstAvailable(1)).assignedPorts[0];
        const data = {
            op: "read",
            path
        };
        const handle = this.#ns.getPortHandle(port);
        handle.write(JSON.stringify(data));
        this.#ns.scp(perform_path, host, "home");
        this.#ns.exec(perform_path, host, undefined, port);
        await handle.nextWrite();
        const ret_data = handle.read();
        this.#comms.unassignPorts([port]);
        return ret_data;
    }
    async write(path, fileData, host, mode) {
        const port = (await this.#comms.assignFirstAvailable(1)).assignedPorts[0];
        const data = {
            op: "write",
            path,
            data: fileData,
            mode
        };
        const handle = this.#ns.getPortHandle(port);
        handle.write(JSON.stringify(data));
        this.#ns.scp(perform_path, host, "home");
        this.#ns.exec(perform_path, host, undefined, port);
        await handle.nextWrite();
        handle.clear();
        this.#comms.unassignPorts([port]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLWZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2VuZXJhbC9yZW1vdGUtZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLFlBQVksTUFBTSxxQ0FBcUMsQ0FBQztBQUUvRCxNQUFNLFlBQVksR0FBRywyQ0FBMkMsQ0FBQztBQUVqRSxNQUFNLE9BQU8sV0FBVztJQUNwQixHQUFHLENBQVE7SUFDWCxNQUFNLENBQWU7SUFDckIsWUFBWSxFQUFTO1FBQ2pCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVksRUFBRSxJQUFZO1FBQzdCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQVksRUFBRSxJQUFZO1FBQ2pDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFFLE1BQU0sSUFBSSxHQUFrQjtZQUN4QixFQUFFLEVBQUUsTUFBTTtZQUNWLElBQUk7U0FDUCxDQUFBO1FBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuRCxNQUFNLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN6QixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFZLENBQUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLElBQVksRUFBRSxRQUFnQixFQUFFLElBQVksRUFBRSxJQUFnQjtRQUN0RSxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRSxNQUFNLElBQUksR0FBa0I7WUFDeEIsRUFBRSxFQUFFLE9BQU87WUFDWCxJQUFJO1lBQ0osSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJO1NBQ1AsQ0FBQTtRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkQsTUFBTSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDekIsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBucyBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBPcGVyYXRpb25EYXRhIH0gZnJvbSBcIi9nZW5lcmFsL3JlbW90ZS1maWxlL3BlcmZvcm0tb3BlcmF0aW9uXCI7XG5pbXBvcnQgQ29tbXVuaWNhdG9yIGZyb20gXCIvcG9ydC1yZWdpc3RyeS9jbGFzc2VzL2NvbW11bmljYXRvclwiO1xuXG5jb25zdCBwZXJmb3JtX3BhdGggPSBcIi9nZW5lcmFsL3JlbW90ZS1maWxlL3BlcmZvcm0tb3BlcmF0aW9uLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBSZW1vdGVGaWxlcyB7XG4gICAgI25zOiBucy5OUztcbiAgICAjY29tbXM6IENvbW11bmljYXRvcjtcbiAgICBjb25zdHJ1Y3RvcihuczogbnMuTlMpIHtcbiAgICAgICAgdGhpcy4jbnMgPSBucztcbiAgICAgICAgdGhpcy4jY29tbXMgPSBuZXcgQ29tbXVuaWNhdG9yKG5zKTtcbiAgICB9XG5cbiAgICBleGlzdHMocGF0aDogc3RyaW5nLCBob3N0OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI25zLmZpbGVFeGlzdHMocGF0aCwgaG9zdCk7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVhZChwYXRoOiBzdHJpbmcsIGhvc3Q6IHN0cmluZykge1xuICAgICAgICBjb25zdCBwb3J0ID0gKGF3YWl0IHRoaXMuI2NvbW1zLmFzc2lnbkZpcnN0QXZhaWxhYmxlKDEpKS5hc3NpZ25lZFBvcnRzWzBdO1xuICAgICAgICBjb25zdCBkYXRhOiBPcGVyYXRpb25EYXRhID0ge1xuICAgICAgICAgICAgb3A6IFwicmVhZFwiLFxuICAgICAgICAgICAgcGF0aFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbmRsZSA9IHRoaXMuI25zLmdldFBvcnRIYW5kbGUocG9ydCk7XG4gICAgICAgIGhhbmRsZS53cml0ZShKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgICAgIHRoaXMuI25zLnNjcChwZXJmb3JtX3BhdGgsIGhvc3QsIFwiaG9tZVwiKTtcbiAgICAgICAgdGhpcy4jbnMuZXhlYyhwZXJmb3JtX3BhdGgsIGhvc3QsIHVuZGVmaW5lZCwgcG9ydCk7XG4gICAgICAgIGF3YWl0IGhhbmRsZS5uZXh0V3JpdGUoKTtcbiAgICAgICAgY29uc3QgcmV0X2RhdGEgPSBoYW5kbGUucmVhZCgpIGFzIHN0cmluZztcbiAgICAgICAgdGhpcy4jY29tbXMudW5hc3NpZ25Qb3J0cyhbcG9ydF0pO1xuICAgICAgICByZXR1cm4gcmV0X2RhdGE7XG4gICAgfVxuXG4gICAgYXN5bmMgd3JpdGUocGF0aDogc3RyaW5nLCBmaWxlRGF0YTogc3RyaW5nLCBob3N0OiBzdHJpbmcsIG1vZGU/OiBcIndcIiB8IFwiYVwiKSB7XG4gICAgICAgIGNvbnN0IHBvcnQgPSAoYXdhaXQgdGhpcy4jY29tbXMuYXNzaWduRmlyc3RBdmFpbGFibGUoMSkpLmFzc2lnbmVkUG9ydHNbMF07XG4gICAgICAgIGNvbnN0IGRhdGE6IE9wZXJhdGlvbkRhdGEgPSB7XG4gICAgICAgICAgICBvcDogXCJ3cml0ZVwiLFxuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIGRhdGE6IGZpbGVEYXRhLFxuICAgICAgICAgICAgbW9kZVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbmRsZSA9IHRoaXMuI25zLmdldFBvcnRIYW5kbGUocG9ydCk7XG4gICAgICAgIGhhbmRsZS53cml0ZShKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgICAgIHRoaXMuI25zLnNjcChwZXJmb3JtX3BhdGgsIGhvc3QsIFwiaG9tZVwiKTtcbiAgICAgICAgdGhpcy4jbnMuZXhlYyhwZXJmb3JtX3BhdGgsIGhvc3QsIHVuZGVmaW5lZCwgcG9ydCk7XG4gICAgICAgIGF3YWl0IGhhbmRsZS5uZXh0V3JpdGUoKTtcbiAgICAgICAgaGFuZGxlLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuI2NvbW1zLnVuYXNzaWduUG9ydHMoW3BvcnRdKTtcbiAgICB9XG59Il19