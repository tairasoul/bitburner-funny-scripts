import Communicator from "/service-communicators/port-registry";
const perform_path = "/general/remote-file/perform-operation.js";
export class RemoteFiles {
    #ns;
    #comms;
    constructor(ns) {
        this.#ns = ns;
        this.#comms = new Communicator(ns);
    }
    exists(path, host) {
        return this.#ns.fileExists(path, host);
    }
    async read(path, host) {
        const port = (await this.#comms.assignFirstAvailable(1)).assignedPorts[0];
        const data = {
            op: "read",
            path
        };
        const handle = this.#ns.getPortHandle(port);
        handle.write(JSON.stringify(data));
        this.#ns.scp(perform_path, host, "home");
        this.#ns.exec(perform_path, host, undefined, port);
        await handle.nextWrite();
        const ret_data = handle.read();
        this.#comms.unassignPorts([port]);
        return ret_data;
    }
    async write(path, fileData, host, mode) {
        const port = (await this.#comms.assignFirstAvailable(1)).assignedPorts[0];
        const data = {
            op: "write",
            path,
            data: fileData,
            mode
        };
        const handle = this.#ns.getPortHandle(port);
        handle.write(JSON.stringify(data));
        this.#ns.scp(perform_path, host, "home");
        this.#ns.exec(perform_path, host, undefined, port);
        await handle.nextWrite();
        handle.clear();
        this.#comms.unassignPorts([port]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLWZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2VuZXJhbC9yZW1vdGUtZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLFlBQVksTUFBTSxzQ0FBc0MsQ0FBQztBQUVoRSxNQUFNLFlBQVksR0FBRywyQ0FBMkMsQ0FBQztBQUVqRSxNQUFNLE9BQU8sV0FBVztJQUNwQixHQUFHLENBQVE7SUFDWCxNQUFNLENBQWU7SUFDckIsWUFBWSxFQUFTO1FBQ2pCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVksRUFBRSxJQUFZO1FBQzdCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQVksRUFBRSxJQUFZO1FBQ2pDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFFLE1BQU0sSUFBSSxHQUFrQjtZQUN4QixFQUFFLEVBQUUsTUFBTTtZQUNWLElBQUk7U0FDUCxDQUFBO1FBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuRCxNQUFNLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN6QixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFZLENBQUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLElBQVksRUFBRSxRQUFnQixFQUFFLElBQVksRUFBRSxJQUFnQjtRQUN0RSxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRSxNQUFNLElBQUksR0FBa0I7WUFDeEIsRUFBRSxFQUFFLE9BQU87WUFDWCxJQUFJO1lBQ0osSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJO1NBQ1AsQ0FBQTtRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkQsTUFBTSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDekIsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBucyBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBPcGVyYXRpb25EYXRhIH0gZnJvbSBcIi9nZW5lcmFsL3JlbW90ZS1maWxlL3BlcmZvcm0tb3BlcmF0aW9uXCI7XG5pbXBvcnQgQ29tbXVuaWNhdG9yIGZyb20gXCIvc2VydmljZS1jb21tdW5pY2F0b3JzL3BvcnQtcmVnaXN0cnlcIjtcblxuY29uc3QgcGVyZm9ybV9wYXRoID0gXCIvZ2VuZXJhbC9yZW1vdGUtZmlsZS9wZXJmb3JtLW9wZXJhdGlvbi5qc1wiO1xuXG5leHBvcnQgY2xhc3MgUmVtb3RlRmlsZXMge1xuICAgICNuczogbnMuTlM7XG4gICAgI2NvbW1zOiBDb21tdW5pY2F0b3I7XG4gICAgY29uc3RydWN0b3IobnM6IG5zLk5TKSB7XG4gICAgICAgIHRoaXMuI25zID0gbnM7XG4gICAgICAgIHRoaXMuI2NvbW1zID0gbmV3IENvbW11bmljYXRvcihucyk7XG4gICAgfVxuXG4gICAgZXhpc3RzKHBhdGg6IHN0cmluZywgaG9zdDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNucy5maWxlRXhpc3RzKHBhdGgsIGhvc3QpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlYWQocGF0aDogc3RyaW5nLCBob3N0OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcG9ydCA9IChhd2FpdCB0aGlzLiNjb21tcy5hc3NpZ25GaXJzdEF2YWlsYWJsZSgxKSkuYXNzaWduZWRQb3J0c1swXTtcbiAgICAgICAgY29uc3QgZGF0YTogT3BlcmF0aW9uRGF0YSA9IHtcbiAgICAgICAgICAgIG9wOiBcInJlYWRcIixcbiAgICAgICAgICAgIHBhdGhcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYW5kbGUgPSB0aGlzLiNucy5nZXRQb3J0SGFuZGxlKHBvcnQpO1xuICAgICAgICBoYW5kbGUud3JpdGUoSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgICAgICB0aGlzLiNucy5zY3AocGVyZm9ybV9wYXRoLCBob3N0LCBcImhvbWVcIik7XG4gICAgICAgIHRoaXMuI25zLmV4ZWMocGVyZm9ybV9wYXRoLCBob3N0LCB1bmRlZmluZWQsIHBvcnQpO1xuICAgICAgICBhd2FpdCBoYW5kbGUubmV4dFdyaXRlKCk7XG4gICAgICAgIGNvbnN0IHJldF9kYXRhID0gaGFuZGxlLnJlYWQoKSBhcyBzdHJpbmc7XG4gICAgICAgIHRoaXMuI2NvbW1zLnVuYXNzaWduUG9ydHMoW3BvcnRdKTtcbiAgICAgICAgcmV0dXJuIHJldF9kYXRhO1xuICAgIH1cblxuICAgIGFzeW5jIHdyaXRlKHBhdGg6IHN0cmluZywgZmlsZURhdGE6IHN0cmluZywgaG9zdDogc3RyaW5nLCBtb2RlPzogXCJ3XCIgfCBcImFcIikge1xuICAgICAgICBjb25zdCBwb3J0ID0gKGF3YWl0IHRoaXMuI2NvbW1zLmFzc2lnbkZpcnN0QXZhaWxhYmxlKDEpKS5hc3NpZ25lZFBvcnRzWzBdO1xuICAgICAgICBjb25zdCBkYXRhOiBPcGVyYXRpb25EYXRhID0ge1xuICAgICAgICAgICAgb3A6IFwid3JpdGVcIixcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBkYXRhOiBmaWxlRGF0YSxcbiAgICAgICAgICAgIG1vZGVcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYW5kbGUgPSB0aGlzLiNucy5nZXRQb3J0SGFuZGxlKHBvcnQpO1xuICAgICAgICBoYW5kbGUud3JpdGUoSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgICAgICB0aGlzLiNucy5zY3AocGVyZm9ybV9wYXRoLCBob3N0LCBcImhvbWVcIik7XG4gICAgICAgIHRoaXMuI25zLmV4ZWMocGVyZm9ybV9wYXRoLCBob3N0LCB1bmRlZmluZWQsIHBvcnQpO1xuICAgICAgICBhd2FpdCBoYW5kbGUubmV4dFdyaXRlKCk7XG4gICAgICAgIGhhbmRsZS5jbGVhcigpO1xuICAgICAgICB0aGlzLiNjb21tcy51bmFzc2lnblBvcnRzKFtwb3J0XSk7XG4gICAgfVxufSJdfQ==