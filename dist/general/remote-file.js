import Communicator from "/port-registry/classes/communicator";
const perform_path = "/general/remote-file/perform-operation.js";
export class RemoteFiles {
    #ns;
    #comms;
    constructor(ns) {
        this.#ns = ns;
        this.#comms = new Communicator(ns);
    }
    exists(path, host) {
        return this.#ns.fileExists(path, host);
    }
    async read(path, host) {
        const port = (await this.#comms.assignFirstAvailable(1)).assignedPorts[0];
        const data = {
            op: "read",
            path
        };
        const handle = this.#ns.getPortHandle(port);
        handle.write(data);
        this.#ns.scp(perform_path, host, "home");
        this.#ns.exec(perform_path, host, undefined, port);
        await handle.nextWrite();
        const ret_data = handle.read();
        this.#comms.unassignPorts([port]);
        return ret_data;
    }
    async write(path, fileData, host) {
        const port = (await this.#comms.assignFirstAvailable(1)).assignedPorts[0];
        const data = {
            op: "write",
            path,
            data: fileData
        };
        const handle = this.#ns.getPortHandle(port);
        handle.write(data);
        this.#ns.scp(perform_path, host, "home");
        this.#ns.exec(perform_path, host, undefined, port);
        await handle.nextWrite();
        handle.clear();
        this.#comms.unassignPorts([port]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLWZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2VuZXJhbC9yZW1vdGUtZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLFlBQVksTUFBTSxxQ0FBcUMsQ0FBQztBQUUvRCxNQUFNLFlBQVksR0FBRywyQ0FBMkMsQ0FBQztBQUVqRSxNQUFNLE9BQU8sV0FBVztJQUNwQixHQUFHLENBQVE7SUFDWCxNQUFNLENBQWU7SUFDckIsWUFBWSxFQUFTO1FBQ2pCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVksRUFBRSxJQUFZO1FBQzdCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQVksRUFBRSxJQUFZO1FBQ2pDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFFLE1BQU0sSUFBSSxHQUFrQjtZQUN4QixFQUFFLEVBQUUsTUFBTTtZQUNWLElBQUk7U0FDUCxDQUFBO1FBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25ELE1BQU0sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3pCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQVksQ0FBQztRQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbEMsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBWSxFQUFFLFFBQWdCLEVBQUUsSUFBWTtRQUNwRCxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRSxNQUFNLElBQUksR0FBa0I7WUFDeEIsRUFBRSxFQUFFLE9BQU87WUFDWCxJQUFJO1lBQ0osSUFBSSxFQUFFLFFBQVE7U0FDakIsQ0FBQTtRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuRCxNQUFNLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN6QixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5zIGZyb20gXCJAbnNcIjtcbmltcG9ydCB7IE9wZXJhdGlvbkRhdGEgfSBmcm9tIFwiL2dlbmVyYWwvcmVtb3RlLWZpbGUvcGVyZm9ybS1vcGVyYXRpb25cIjtcbmltcG9ydCBDb21tdW5pY2F0b3IgZnJvbSBcIi9wb3J0LXJlZ2lzdHJ5L2NsYXNzZXMvY29tbXVuaWNhdG9yXCI7XG5cbmNvbnN0IHBlcmZvcm1fcGF0aCA9IFwiL2dlbmVyYWwvcmVtb3RlLWZpbGUvcGVyZm9ybS1vcGVyYXRpb24uanNcIjtcblxuZXhwb3J0IGNsYXNzIFJlbW90ZUZpbGVzIHtcbiAgICAjbnM6IG5zLk5TO1xuICAgICNjb21tczogQ29tbXVuaWNhdG9yO1xuICAgIGNvbnN0cnVjdG9yKG5zOiBucy5OUykge1xuICAgICAgICB0aGlzLiNucyA9IG5zO1xuICAgICAgICB0aGlzLiNjb21tcyA9IG5ldyBDb21tdW5pY2F0b3IobnMpO1xuICAgIH1cblxuICAgIGV4aXN0cyhwYXRoOiBzdHJpbmcsIGhvc3Q6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy4jbnMuZmlsZUV4aXN0cyhwYXRoLCBob3N0KTtcbiAgICB9XG5cbiAgICBhc3luYyByZWFkKHBhdGg6IHN0cmluZywgaG9zdDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBvcnQgPSAoYXdhaXQgdGhpcy4jY29tbXMuYXNzaWduRmlyc3RBdmFpbGFibGUoMSkpLmFzc2lnbmVkUG9ydHNbMF07XG4gICAgICAgIGNvbnN0IGRhdGE6IE9wZXJhdGlvbkRhdGEgPSB7XG4gICAgICAgICAgICBvcDogXCJyZWFkXCIsXG4gICAgICAgICAgICBwYXRoXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFuZGxlID0gdGhpcy4jbnMuZ2V0UG9ydEhhbmRsZShwb3J0KTtcbiAgICAgICAgaGFuZGxlLndyaXRlKGRhdGEpO1xuICAgICAgICB0aGlzLiNucy5zY3AocGVyZm9ybV9wYXRoLCBob3N0LCBcImhvbWVcIik7XG4gICAgICAgIHRoaXMuI25zLmV4ZWMocGVyZm9ybV9wYXRoLCBob3N0LCB1bmRlZmluZWQsIHBvcnQpO1xuICAgICAgICBhd2FpdCBoYW5kbGUubmV4dFdyaXRlKCk7XG4gICAgICAgIGNvbnN0IHJldF9kYXRhID0gaGFuZGxlLnJlYWQoKSBhcyBzdHJpbmc7XG4gICAgICAgIHRoaXMuI2NvbW1zLnVuYXNzaWduUG9ydHMoW3BvcnRdKTtcbiAgICAgICAgcmV0dXJuIHJldF9kYXRhO1xuICAgIH1cblxuICAgIGFzeW5jIHdyaXRlKHBhdGg6IHN0cmluZywgZmlsZURhdGE6IHN0cmluZywgaG9zdDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBvcnQgPSAoYXdhaXQgdGhpcy4jY29tbXMuYXNzaWduRmlyc3RBdmFpbGFibGUoMSkpLmFzc2lnbmVkUG9ydHNbMF07XG4gICAgICAgIGNvbnN0IGRhdGE6IE9wZXJhdGlvbkRhdGEgPSB7XG4gICAgICAgICAgICBvcDogXCJ3cml0ZVwiLFxuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIGRhdGE6IGZpbGVEYXRhXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFuZGxlID0gdGhpcy4jbnMuZ2V0UG9ydEhhbmRsZShwb3J0KTtcbiAgICAgICAgaGFuZGxlLndyaXRlKGRhdGEpO1xuICAgICAgICB0aGlzLiNucy5zY3AocGVyZm9ybV9wYXRoLCBob3N0LCBcImhvbWVcIik7XG4gICAgICAgIHRoaXMuI25zLmV4ZWMocGVyZm9ybV9wYXRoLCBob3N0LCB1bmRlZmluZWQsIHBvcnQpO1xuICAgICAgICBhd2FpdCBoYW5kbGUubmV4dFdyaXRlKCk7XG4gICAgICAgIGhhbmRsZS5jbGVhcigpO1xuICAgICAgICB0aGlzLiNjb21tcy51bmFzc2lnblBvcnRzKFtwb3J0XSk7XG4gICAgfVxufSJdfQ==