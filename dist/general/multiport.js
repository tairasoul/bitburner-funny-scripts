export default class Multiport {
    ports = [];
    constructor(ns, data) {
        if ("ports" in data) {
            for (const port of data.ports) {
                this.ports.push(ns.getPortHandle(port));
            }
        }
        else {
            for (let i = data.start; i <= data.end; i++) {
                this.ports.push(ns.getPortHandle(i));
            }
        }
    }
    write(data, portPredicate = (_, __) => true) {
        const parsed = typeof data == "string" ? data : JSON.stringify(data);
        for (let i = 0; this.ports[i] != undefined; i++) {
            if (!this.ports[i].full() && portPredicate(i, this.ports[i])) {
                this.ports[i].write(parsed);
                break;
            }
        }
    }
    writeEmpty(data) {
        this.write(data, (_, port) => port.empty());
    }
    nextWrite() {
        const promises = [];
        for (const port of this.ports) {
            promises.push(port.nextWrite());
        }
        return Promise.any(promises);
    }
    clear() {
        for (const port of this.ports)
            port.clear();
    }
    empty() {
        for (const port of this.ports)
            if (!port.empty())
                return false;
        return true;
    }
    full() {
        for (const port of this.ports)
            if (!port.full())
                return false;
        return true;
    }
    peek(predicate = () => true) {
        for (const port of this.ports) {
            if (port.peek() != "NULL PORT DATA" && predicate(port.peek()))
                return port.peek();
        }
        return null;
    }
    read(predicate = () => true) {
        for (const port of this.ports) {
            if (port.peek() != "NULL PORT DATA" && predicate(port.peek()))
                return port.read();
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dlbmVyYWwvbXVsdGlwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLE1BQU0sQ0FBQyxPQUFPLE9BQU8sU0FBUztJQUNsQixLQUFLLEdBQXVCLEVBQUUsQ0FBQztJQUN2QyxZQUFZLEVBQVMsRUFBRSxJQUFrQjtRQUNyQyxJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQUU7WUFDakIsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDM0M7U0FDSjthQUNJO1lBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDeEM7U0FDSjtJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBUyxFQUFFLGdCQUFzRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUk7UUFDbEcsTUFBTSxNQUFNLEdBQUcsT0FBTyxJQUFJLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksYUFBYSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzFELElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM1QixNQUFNO2FBQ1Q7U0FDSjtJQUNMLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBUztRQUNoQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxTQUFTO1FBQ0wsTUFBTSxRQUFRLEdBQW9CLEVBQUUsQ0FBQztRQUNyQyxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDM0IsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztTQUNuQztRQUNELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsS0FBSztRQUNELEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUs7WUFDekIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxLQUFLO1FBQ0QsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDYixPQUFPLEtBQUssQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBSTtRQUNBLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUs7WUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1osT0FBTyxLQUFLLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUksQ0FBQyxZQUFvQyxHQUFHLEVBQUUsQ0FBQyxJQUFJO1FBQy9DLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUMzQixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxnQkFBZ0IsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN6RCxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMxQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFJLENBQUMsWUFBb0MsR0FBRyxFQUFFLENBQUMsSUFBSTtRQUMvQyxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDM0IsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksZ0JBQWdCLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDekQsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDMUI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbnMgZnJvbSBcIkBuc1wiXG5cbnR5cGUgQ3JlYXRpb25EYXRhID0ge1xuICAgIHN0YXJ0OiBudW1iZXI7XG4gICAgZW5kOiBudW1iZXI7XG59IHwge1xuICAgIHBvcnRzOiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVsdGlwb3J0IHtcbiAgICBwcml2YXRlIHBvcnRzOiBucy5OZXRzY3JpcHRQb3J0W10gPSBbXTtcbiAgICBjb25zdHJ1Y3RvcihuczogbnMuTlMsIGRhdGE6IENyZWF0aW9uRGF0YSkge1xuICAgICAgICBpZiAoXCJwb3J0c1wiIGluIGRhdGEpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcG9ydCBvZiBkYXRhLnBvcnRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3J0cy5wdXNoKG5zLmdldFBvcnRIYW5kbGUocG9ydCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGRhdGEuc3RhcnQ7IGkgPD0gZGF0YS5lbmQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMucG9ydHMucHVzaChucy5nZXRQb3J0SGFuZGxlKGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHdyaXRlKGRhdGE6IGFueSwgcG9ydFByZWRpY2F0ZTogKHBvcnROdW06IG51bWJlciwgcG9ydDogbnMuTmV0c2NyaXB0UG9ydCkgPT4gYm9vbGVhbiA9IChfLCBfXykgPT4gdHJ1ZSkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiID8gZGF0YSA6IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgdGhpcy5wb3J0c1tpXSAhPSB1bmRlZmluZWQ7IGkrKykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBvcnRzW2ldLmZ1bGwoKSAmJiBwb3J0UHJlZGljYXRlKGksIHRoaXMucG9ydHNbaV0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3J0c1tpXS53cml0ZShwYXJzZWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgd3JpdGVFbXB0eShkYXRhOiBhbnkpIHtcbiAgICAgICAgdGhpcy53cml0ZShkYXRhLCAoXywgcG9ydCkgPT4gcG9ydC5lbXB0eSgpKTtcbiAgICB9XG5cbiAgICBuZXh0V3JpdGUoKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2VzOiBQcm9taXNlPHZvaWQ+W10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBwb3J0IG9mIHRoaXMucG9ydHMpIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2gocG9ydC5uZXh0V3JpdGUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYW55KHByb21pc2VzKTtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgZm9yIChjb25zdCBwb3J0IG9mIHRoaXMucG9ydHMpXG4gICAgICAgICAgICBwb3J0LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgZW1wdHkoKSB7XG4gICAgICAgIGZvciAoY29uc3QgcG9ydCBvZiB0aGlzLnBvcnRzKSBcbiAgICAgICAgICAgIGlmICghcG9ydC5lbXB0eSgpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVsbCgpIHtcbiAgICAgICAgZm9yIChjb25zdCBwb3J0IG9mIHRoaXMucG9ydHMpXG4gICAgICAgICAgICBpZiAoIXBvcnQuZnVsbCgpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcGVlayhwcmVkaWNhdGU6IChkYXRhOiBhbnkpID0+IGJvb2xlYW4gPSAoKSA9PiB0cnVlKSB7XG4gICAgICAgIGZvciAoY29uc3QgcG9ydCBvZiB0aGlzLnBvcnRzKSB7XG4gICAgICAgICAgICBpZiAocG9ydC5wZWVrKCkgIT0gXCJOVUxMIFBPUlQgREFUQVwiICYmIHByZWRpY2F0ZShwb3J0LnBlZWsoKSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvcnQucGVlaygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJlYWQocHJlZGljYXRlOiAoZGF0YTogYW55KSA9PiBib29sZWFuID0gKCkgPT4gdHJ1ZSkge1xuICAgICAgICBmb3IgKGNvbnN0IHBvcnQgb2YgdGhpcy5wb3J0cykge1xuICAgICAgICAgICAgaWYgKHBvcnQucGVlaygpICE9IFwiTlVMTCBQT1JUIERBVEFcIiAmJiBwcmVkaWNhdGUocG9ydC5wZWVrKCkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBwb3J0LnJlYWQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59Il19