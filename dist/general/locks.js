import { RemoteFiles } from "/general/remote-file";
export default class Lockfile {
    #ns;
    #remote_files;
    constructor(ns) {
        this.#ns = ns;
        this.#remote_files = new RemoteFiles(ns);
    }
    isLocked(name) {
        return this.#ns.fileExists(`/lockfiles/${name}.txt`, "home");
    }
    async getLockData(name) {
        if (!this.isLocked(name))
            throw `${name} is not locked!`;
        return await this.#remote_files.read(`/lockfiles/${name}.txt`, "home");
    }
    async lock(name, data = "locked.") {
        if (this.isLocked(name))
            throw `${name} is already locked!`;
        await this.#remote_files.write(`/lockfiles/${name}.txt`, data, "home");
    }
    unlock(name) {
        this.#ns.rm(`/lockfiles/${name}.txt`, "home");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9ja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2VuZXJhbC9sb2Nrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbkQsTUFBTSxDQUFDLE9BQU8sT0FBTyxRQUFRO0lBQ3pCLEdBQUcsQ0FBUTtJQUNYLGFBQWEsQ0FBYztJQUMzQixZQUFZLEVBQVM7UUFDakIsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxRQUFRLENBQUMsSUFBWTtRQUNqQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGNBQWMsSUFBSSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBWTtRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDcEIsTUFBTSxHQUFHLElBQUksaUJBQWlCLENBQUM7UUFDbkMsT0FBTyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBWSxFQUFFLE9BQWUsU0FBUztRQUM3QyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ25CLE1BQU0sR0FBRyxJQUFJLHFCQUFxQixDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsY0FBYyxJQUFJLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBQ2YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsY0FBYyxJQUFJLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbnMgZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgUmVtb3RlRmlsZXMgfSBmcm9tIFwiL2dlbmVyYWwvcmVtb3RlLWZpbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9ja2ZpbGUge1xuICAgICNuczogbnMuTlM7XG4gICAgI3JlbW90ZV9maWxlczogUmVtb3RlRmlsZXM7XG4gICAgY29uc3RydWN0b3IobnM6IG5zLk5TKSB7XG4gICAgICAgIHRoaXMuI25zID0gbnM7XG4gICAgICAgIHRoaXMuI3JlbW90ZV9maWxlcyA9IG5ldyBSZW1vdGVGaWxlcyhucyk7XG4gICAgfVxuXG4gICAgaXNMb2NrZWQobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNucy5maWxlRXhpc3RzKGAvbG9ja2ZpbGVzLyR7bmFtZX0udHh0YCwgXCJob21lXCIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldExvY2tEYXRhKG5hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAoIXRoaXMuaXNMb2NrZWQobmFtZSkpXG4gICAgICAgICAgICB0aHJvdyBgJHtuYW1lfSBpcyBub3QgbG9ja2VkIWA7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLiNyZW1vdGVfZmlsZXMucmVhZChgL2xvY2tmaWxlcy8ke25hbWV9LnR4dGAsIFwiaG9tZVwiKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2NrKG5hbWU6IHN0cmluZywgZGF0YTogc3RyaW5nID0gXCJsb2NrZWQuXCIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNMb2NrZWQobmFtZSkpXG4gICAgICAgICAgICB0aHJvdyBgJHtuYW1lfSBpcyBhbHJlYWR5IGxvY2tlZCFgO1xuICAgICAgICBhd2FpdCB0aGlzLiNyZW1vdGVfZmlsZXMud3JpdGUoYC9sb2NrZmlsZXMvJHtuYW1lfS50eHRgLCBkYXRhLCBcImhvbWVcIik7XG4gICAgfVxuXG4gICAgdW5sb2NrKG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLiNucy5ybShgL2xvY2tmaWxlcy8ke25hbWV9LnR4dGAsIFwiaG9tZVwiKTtcbiAgICB9XG59Il19