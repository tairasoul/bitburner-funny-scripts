import { list_servers, gainAccess } from "/general/utils";
export default class RamNet {
    #blocks = [];
    #minBlockSize = Infinity;
    #maxBlockSize = 0;
    #totalRam = 0;
    #maxRam = 0;
    #index = new Map();
    #ns;
    constructor(ns) {
        this.#ns = ns;
    }
    async init() {
        for (const server of list_servers(this.#ns)) {
            if (server != "home" && server != "Controller-Central") {
                if (!this.#ns.hasRootAccess(server)) {
                    await gainAccess(this.#ns, server);
                }
                if (this.#ns.hasRootAccess(server)) {
                    const maxRam = this.#ns.getServerMaxRam(server);
                    const ram = maxRam - this.#ns.getServerUsedRam(server);
                    if (ram >= 1.60) {
                        const block = { server: server, ram: ram };
                        this.#blocks.push(block);
                        if (ram < this.#minBlockSize)
                            this.#minBlockSize = ram;
                        if (ram > this.#maxBlockSize)
                            this.#maxBlockSize = ram;
                        this.#totalRam += ram;
                        this.#maxRam += maxRam;
                    }
                }
            }
        }
        this.#sort();
        this.#blocks.forEach((block, index) => this.#index.set(block.server, index));
    }
    async update() {
        this.#blocks = [];
        this.#totalRam += 0;
        this.#maxRam += 0;
        for (const server of list_servers(this.#ns)) {
            if (server != "home" && server != "Controller-Central") {
                if (!this.#ns.hasRootAccess(server)) {
                    await gainAccess(this.#ns, server);
                }
                if (this.#ns.hasRootAccess(server)) {
                    const maxRam = this.#ns.getServerMaxRam(server);
                    const ram = maxRam - this.#ns.getServerUsedRam(server);
                    if (ram >= 1.60) {
                        const block = { server: server, ram: ram };
                        this.#blocks.push(block);
                        if (ram < this.#minBlockSize)
                            this.#minBlockSize = ram;
                        if (ram > this.#maxBlockSize)
                            this.#maxBlockSize = ram;
                        this.#totalRam += ram;
                        this.#maxRam += maxRam;
                    }
                }
            }
        }
        this.#sort();
        this.#blocks.forEach((block, index) => this.#index.set(block.server, index));
    }
    #sort() {
        this.#blocks.sort((x, y) => {
            // Prefer assigning to home last so that we have more room to play the game while batching.
            if (x.server === "home")
                return 1;
            if (y.server === "home")
                return -1;
            return x.ram - y.ram;
        });
    }
    getBlock(server) {
        if (this.#index.has(server)) {
            return this.#blocks[this.#index.get(server)];
        }
        else {
            throw new Error(`Server ${server} not found in RamNet.`);
        }
    }
    hasBlock(server) {
        return this.#index.has(server);
    }
    get totalRam() {
        return this.#totalRam;
    }
    get maxRam() {
        return this.#maxRam;
    }
    get maxBlockSize() {
        return this.#maxBlockSize;
    }
    get clone() {
        return this.#blocks.map(block => ({ ...block }));
    }
    assign(job) {
        const block = this.#blocks.find(block => block.ram >= job.ram);
        if (!block)
            return false;
        job.server = block.server;
        block.ram -= job.ram;
        this.#totalRam -= job.ram;
        return true;
    }
    finish(job) {
        const block = this.getBlock(job.server);
        block.ram += job.ram;
        this.#totalRam += job.ram;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFtbmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dlbmVyYWwvcmFtbmV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFZMUQsTUFBTSxDQUFDLE9BQU8sT0FBTyxNQUFNO0lBQ3ZCLE9BQU8sR0FBWSxFQUFFLENBQUM7SUFDdEIsYUFBYSxHQUFHLFFBQVEsQ0FBQztJQUN6QixhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ1osTUFBTSxHQUF3QixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3hDLEdBQUcsQ0FBTztJQUVWLFlBQVksRUFBUztRQUNqQixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUk7UUFDTixLQUFLLE1BQU0sTUFBTSxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDekMsSUFBSSxNQUFNLElBQUksTUFBTSxJQUFJLE1BQU0sSUFBSSxvQkFBb0IsRUFBRTtnQkFDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUNqQyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUN0QztnQkFDRCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUNoQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDaEQsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7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QUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsS0FBSztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUMxQixLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBUTtRQUNYLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hDLEtBQUssQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQztRQUNyQixJQUFJLENBQUMsU0FBUyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDOUIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5zIGZyb20gXCJAbnNcIjtcbmltcG9ydCB7IGxpc3Rfc2VydmVycywgZ2FpbkFjY2VzcyB9IGZyb20gXCIvZ2VuZXJhbC91dGlsc1wiO1xuXG5leHBvcnQgdHlwZSBCbG9jayA9IHtcbiAgICBzZXJ2ZXI6IHN0cmluZztcbiAgICByYW06IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgSm9iID0ge1xuICAgIHNlcnZlcjogc3RyaW5nO1xuICAgIHJhbTogbnVtYmVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYW1OZXQge1xuICAgICNibG9ja3M6IEJsb2NrW10gPSBbXTtcbiAgICAjbWluQmxvY2tTaXplID0gSW5maW5pdHk7XG4gICAgI21heEJsb2NrU2l6ZSA9IDA7XG4gICAgI3RvdGFsUmFtID0gMDtcbiAgICAjbWF4UmFtID0gMDtcbiAgICAjaW5kZXg6IE1hcDxzdHJpbmcsIG51bWJlcj4gPSBuZXcgTWFwKCk7XG4gICAgI25zOiBucy5OU1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKG5zOiBucy5OUykge1xuICAgICAgICB0aGlzLiNucyA9IG5zO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIGZvciAoY29uc3Qgc2VydmVyIG9mIGxpc3Rfc2VydmVycyh0aGlzLiNucykpIHtcbiAgICAgICAgICAgIGlmIChzZXJ2ZXIgIT0gXCJob21lXCIgJiYgc2VydmVyICE9IFwiQ29udHJvbGxlci1DZW50cmFsXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuI25zLmhhc1Jvb3RBY2Nlc3Moc2VydmVyKSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBnYWluQWNjZXNzKHRoaXMuI25zLCBzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy4jbnMuaGFzUm9vdEFjY2VzcyhzZXJ2ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heFJhbSA9IHRoaXMuI25zLmdldFNlcnZlck1heFJhbShzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByYW0gPSBtYXhSYW0gLSB0aGlzLiNucy5nZXRTZXJ2ZXJVc2VkUmFtKHNlcnZlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW0gPj0gMS42MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxvY2sgPSB7IHNlcnZlcjogc2VydmVyLCByYW06IHJhbSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbSA8IHRoaXMuI21pbkJsb2NrU2l6ZSkgdGhpcy4jbWluQmxvY2tTaXplID0gcmFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbSA+IHRoaXMuI21heEJsb2NrU2l6ZSkgdGhpcy4jbWF4QmxvY2tTaXplID0gcmFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jdG90YWxSYW0gKz0gcmFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jbWF4UmFtICs9IG1heFJhbTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXHRcdHRoaXMuI3NvcnQoKTtcblxuXHRcdHRoaXMuI2Jsb2Nrcy5mb3JFYWNoKChibG9jaywgaW5kZXgpID0+IHRoaXMuI2luZGV4LnNldChibG9jay5zZXJ2ZXIsIGluZGV4KSk7XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlKCkge1xuICAgICAgICB0aGlzLiNibG9ja3MgPSBbXTtcbiAgICAgICAgdGhpcy4jdG90YWxSYW0gKz0gMDtcbiAgICAgICAgdGhpcy4jbWF4UmFtICs9IDA7XG4gICAgICAgIGZvciAoY29uc3Qgc2VydmVyIG9mIGxpc3Rfc2VydmVycyh0aGlzLiNucykpIHtcbiAgICAgICAgICAgIGlmIChzZXJ2ZXIgIT0gXCJob21lXCIgJiYgc2VydmVyICE9IFwiQ29udHJvbGxlci1DZW50cmFsXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuI25zLmhhc1Jvb3RBY2Nlc3Moc2VydmVyKSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBnYWluQWNjZXNzKHRoaXMuI25zLCBzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy4jbnMuaGFzUm9vdEFjY2VzcyhzZXJ2ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heFJhbSA9IHRoaXMuI25zLmdldFNlcnZlck1heFJhbShzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByYW0gPSBtYXhSYW0gLSB0aGlzLiNucy5nZXRTZXJ2ZXJVc2VkUmFtKHNlcnZlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW0gPj0gMS42MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxvY2sgPSB7IHNlcnZlcjogc2VydmVyLCByYW06IHJhbSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbSA8IHRoaXMuI21pbkJsb2NrU2l6ZSkgdGhpcy4jbWluQmxvY2tTaXplID0gcmFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbSA+IHRoaXMuI21heEJsb2NrU2l6ZSkgdGhpcy4jbWF4QmxvY2tTaXplID0gcmFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jdG90YWxSYW0gKz0gcmFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jbWF4UmFtICs9IG1heFJhbTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXHRcdHRoaXMuI3NvcnQoKTtcblxuXHRcdHRoaXMuI2Jsb2Nrcy5mb3JFYWNoKChibG9jaywgaW5kZXgpID0+IHRoaXMuI2luZGV4LnNldChibG9jay5zZXJ2ZXIsIGluZGV4KSk7XG4gICAgfVxuICAgIFxuXHQjc29ydCgpIHtcblx0XHR0aGlzLiNibG9ja3Muc29ydCgoeCwgeSkgPT4ge1xuXHRcdFx0Ly8gUHJlZmVyIGFzc2lnbmluZyB0byBob21lIGxhc3Qgc28gdGhhdCB3ZSBoYXZlIG1vcmUgcm9vbSB0byBwbGF5IHRoZSBnYW1lIHdoaWxlIGJhdGNoaW5nLlxuXHRcdFx0aWYgKHguc2VydmVyID09PSBcImhvbWVcIikgcmV0dXJuIDE7XG5cdFx0XHRpZiAoeS5zZXJ2ZXIgPT09IFwiaG9tZVwiKSByZXR1cm4gLTE7XG5cblx0XHRcdHJldHVybiB4LnJhbSAtIHkucmFtO1xuXHRcdH0pO1xuXHR9XG5cblx0Z2V0QmxvY2soc2VydmVyOiBzdHJpbmcpIHtcblx0XHRpZiAodGhpcy4jaW5kZXguaGFzKHNlcnZlcikpIHtcblx0XHRcdHJldHVybiB0aGlzLiNibG9ja3NbdGhpcy4jaW5kZXguZ2V0KHNlcnZlcikgYXMgbnVtYmVyXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBTZXJ2ZXIgJHtzZXJ2ZXJ9IG5vdCBmb3VuZCBpbiBSYW1OZXQuYCk7XG5cdFx0fVxuXHR9XG5cbiAgICBoYXNCbG9jayhzZXJ2ZXI6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy4jaW5kZXguaGFzKHNlcnZlcik7XG4gICAgfVxuXHRnZXQgdG90YWxSYW0oKSB7XG5cdFx0cmV0dXJuIHRoaXMuI3RvdGFsUmFtO1xuXHR9XG5cblx0Z2V0IG1heFJhbSgpIHtcblx0XHRyZXR1cm4gdGhpcy4jbWF4UmFtO1xuXHR9XG5cblx0Z2V0IG1heEJsb2NrU2l6ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy4jbWF4QmxvY2tTaXplO1xuXHR9XG5cblx0Z2V0IGNsb25lKCkge1xuXHRcdHJldHVybiB0aGlzLiNibG9ja3MubWFwKGJsb2NrID0+ICh7IC4uLmJsb2NrIH0pKTtcblx0fVxuXG4gICAgYXNzaWduKGpvYjogSm9iKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy4jYmxvY2tzLmZpbmQoYmxvY2sgPT4gYmxvY2sucmFtID49IGpvYi5yYW0pO1xuICAgICAgICBpZiAoIWJsb2NrKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGpvYi5zZXJ2ZXIgPSBibG9jay5zZXJ2ZXI7XG4gICAgICAgIGJsb2NrLnJhbSAtPSBqb2IucmFtO1xuICAgICAgICB0aGlzLiN0b3RhbFJhbSAtPSBqb2IucmFtO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmaW5pc2goam9iOiBKb2IpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLmdldEJsb2NrKGpvYi5zZXJ2ZXIpO1xuICAgICAgICBibG9jay5yYW0gKz0gam9iLnJhbTtcbiAgICAgICAgdGhpcy4jdG90YWxSYW0gKz0gam9iLnJhbTtcbiAgICB9XG59Il19