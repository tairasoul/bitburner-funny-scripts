function scan(ns, parent, server, list) {
    const children = ns.scan(server);
    for (let child of children) {
        if (parent == child) {
            continue;
        }
        list.push(child);
        scan(ns, server, child, list);
    }
}
export function list_servers(ns) {
    const list = ['home'];
    scan(ns, '', 'home', list);
    return list;
}
export async function gainAccess(ns, server) {
    const brute = await tryRun(() => ns.brutessh(server));
    await ns.sleep(10);
    const ftp = await tryRun(() => ns.ftpcrack(server));
    await ns.sleep(10);
    const http = await tryRun(() => ns.httpworm(server));
    await ns.sleep(10);
    const smtp = await tryRun(() => ns.relaysmtp(server));
    await ns.sleep(10);
    const sql = await tryRun(() => ns.sqlinject(server));
    await ns.sleep(10);
    const nuke = await tryRun(() => ns.nuke(server));
    await ns.sleep(10);
    return {
        brute,
        ftp,
        http,
        smtp,
        sql,
        nuke
    };
}
async function tryRun(func) {
    try {
        await func();
        return true;
    }
    catch {
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2VuZXJhbC91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxTQUFTLElBQUksQ0FBQyxFQUFTLEVBQUUsTUFBYyxFQUFFLE1BQWMsRUFBRSxJQUFjO0lBQ25FLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsS0FBSyxJQUFJLEtBQUssSUFBSSxRQUFRLEVBQUU7UUFDeEIsSUFBSSxNQUFNLElBQUksS0FBSyxFQUFFO1lBQ2pCLFNBQVM7U0FDWjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFakIsSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ2pDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsRUFBUztJQUNsQyxNQUFNLElBQUksR0FBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzQixPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxVQUFVLENBQUMsRUFBUyxFQUFFLE1BQWM7SUFDdEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQixNQUFNLEdBQUcsR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25CLE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQixNQUFNLEdBQUcsR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDckQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25CLE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkIsT0FBTztRQUNILEtBQUs7UUFDTCxHQUFHO1FBQ0gsSUFBSTtRQUNKLElBQUk7UUFDSixHQUFHO1FBQ0gsSUFBSTtLQUNQLENBQUE7QUFDTCxDQUFDO0FBRUQsS0FBSyxVQUFVLE1BQU0sQ0FBQyxJQUFlO0lBQ2pDLElBQUk7UUFDQSxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2IsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUNELE1BQU07UUFDRixPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbnMgZnJvbSBcIkBuc1wiO1xuXG5mdW5jdGlvbiBzY2FuKG5zOiBucy5OUywgcGFyZW50OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nLCBsaXN0OiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gbnMuc2NhbihzZXJ2ZXIpO1xuICAgIGZvciAobGV0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChwYXJlbnQgPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxpc3QucHVzaChjaGlsZCk7XG4gICAgICAgIFxuICAgICAgICBzY2FuKG5zLCBzZXJ2ZXIsIGNoaWxkLCBsaXN0KTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0X3NlcnZlcnMobnM6IG5zLk5TKSB7XG4gICAgY29uc3QgbGlzdDogc3RyaW5nW10gPSBbJ2hvbWUnXTtcbiAgICBzY2FuKG5zLCAnJywgJ2hvbWUnLCBsaXN0KTtcbiAgICByZXR1cm4gbGlzdDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdhaW5BY2Nlc3MobnM6IG5zLk5TLCBzZXJ2ZXI6IHN0cmluZykge1xuICAgIGNvbnN0IGJydXRlID0gYXdhaXQgdHJ5UnVuKCgpID0+IG5zLmJydXRlc3NoKHNlcnZlcikpO1xuICAgIGF3YWl0IG5zLnNsZWVwKDEwKTtcbiAgICBjb25zdCBmdHAgPSBhd2FpdCB0cnlSdW4oKCkgPT4gbnMuZnRwY3JhY2soc2VydmVyKSk7XG4gICAgYXdhaXQgbnMuc2xlZXAoMTApO1xuICAgIGNvbnN0IGh0dHAgPSBhd2FpdCB0cnlSdW4oKCkgPT4gbnMuaHR0cHdvcm0oc2VydmVyKSk7XG4gICAgYXdhaXQgbnMuc2xlZXAoMTApO1xuICAgIGNvbnN0IHNtdHAgPSBhd2FpdCB0cnlSdW4oKCkgPT4gbnMucmVsYXlzbXRwKHNlcnZlcikpO1xuICAgIGF3YWl0IG5zLnNsZWVwKDEwKTtcbiAgICBjb25zdCBzcWwgPSBhd2FpdCB0cnlSdW4oKCkgPT4gbnMuc3FsaW5qZWN0KHNlcnZlcikpO1xuICAgIGF3YWl0IG5zLnNsZWVwKDEwKTtcbiAgICBjb25zdCBudWtlID0gYXdhaXQgdHJ5UnVuKCgpID0+IG5zLm51a2Uoc2VydmVyKSk7XG4gICAgYXdhaXQgbnMuc2xlZXAoMTApO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJydXRlLFxuICAgICAgICBmdHAsXG4gICAgICAgIGh0dHAsXG4gICAgICAgIHNtdHAsXG4gICAgICAgIHNxbCxcbiAgICAgICAgbnVrZVxuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gdHJ5UnVuKGZ1bmM6ICgpID0+IGFueSkge1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGZ1bmMoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn0iXX0=