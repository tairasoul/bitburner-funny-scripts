import { getReactKey } from "/react-handlers/get_react_key";
function recursiveScan(ns, parent, server, target, route) {
    const children = ns.scan(server);
    for (let child of children) {
        if (parent == child) {
            continue;
        }
        if (child == target) {
            route.unshift(child);
            route.unshift(server);
            return true;
        }
        if (recursiveScan(ns, server, child, target, route)) {
            route.unshift(server);
            return true;
        }
    }
    return false;
}
export async function main(ns) {
    const server = ns.args[0];
    const doc = eval("document");
    const terminal = doc.querySelector("#terminal-input");
    const route = [];
    recursiveScan(ns, '', 'home', server, route);
    const props = getReactKey(terminal, "Props$");
    // @ts-ignore
    const onChange = terminal[props].onChange;
    let str = "";
    for (const path of route) {
        str += `connect ${path};`;
    }
    onChange({ target: { value: str } });
    await ns.sleep(20);
    const event = {
        preventDefault: () => { },
        key: "Enter",
        isTrusted: true
    };
    // @ts-ignore
    const keyDown = terminal[props].onKeyDown;
    await keyDown(event);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdC1zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY29ubmVjdC1zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBRTNELFNBQVMsYUFBYSxDQUFDLEVBQVMsRUFBRSxNQUFjLEVBQUUsTUFBYyxFQUFFLE1BQWMsRUFBRSxLQUFlO0lBQzdGLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsS0FBSyxJQUFJLEtBQUssSUFBSSxRQUFRLEVBQUU7UUFDeEIsSUFBSSxNQUFNLElBQUksS0FBSyxFQUFFO1lBQ2pCLFNBQVM7U0FDWjtRQUNELElBQUksS0FBSyxJQUFJLE1BQU0sRUFBRTtZQUNqQixLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JCLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELElBQUksYUFBYSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRTtZQUNqRCxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7S0FDSjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzVCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQXFCLENBQUM7SUFDMUUsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO0lBQzNCLGFBQWEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0MsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM5QyxhQUFhO0lBQ2IsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUMxQyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtRQUN0QixHQUFHLElBQUksV0FBVyxJQUFJLEdBQUcsQ0FBQTtLQUM1QjtJQUNELFFBQVEsQ0FBQyxFQUFDLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBRSxHQUFHLEVBQUMsRUFBQyxDQUFDLENBQUE7SUFDaEMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25CLE1BQU0sS0FBSyxHQUFHO1FBQ1YsY0FBYyxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7UUFDeEIsR0FBRyxFQUFFLE9BQU87UUFDWixTQUFTLEVBQUUsSUFBSTtLQUNsQixDQUFBO0lBQ0QsYUFBYTtJQUNiLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDMUMsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBucyBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBnZXRSZWFjdEtleSB9IGZyb20gXCIvcmVhY3QtaGFuZGxlcnMvZ2V0X3JlYWN0X2tleVwiXG5cbmZ1bmN0aW9uIHJlY3Vyc2l2ZVNjYW4obnM6IG5zLk5TLCBwYXJlbnQ6IHN0cmluZywgc2VydmVyOiBzdHJpbmcsIHRhcmdldDogc3RyaW5nLCByb3V0ZTogc3RyaW5nW10pIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IG5zLnNjYW4oc2VydmVyKTtcbiAgICBmb3IgKGxldCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgICBpZiAocGFyZW50ID09IGNoaWxkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGQgPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICByb3V0ZS51bnNoaWZ0KGNoaWxkKTtcbiAgICAgICAgICAgIHJvdXRlLnVuc2hpZnQoc2VydmVyKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlY3Vyc2l2ZVNjYW4obnMsIHNlcnZlciwgY2hpbGQsIHRhcmdldCwgcm91dGUpKSB7XG4gICAgICAgICAgICByb3V0ZS51bnNoaWZ0KHNlcnZlcik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBucy5OUykge1xuICAgIGNvbnN0IHNlcnZlciA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nO1xuICAgIGNvbnN0IGRvYyA9IGV2YWwoXCJkb2N1bWVudFwiKVxuICAgIGNvbnN0IHRlcm1pbmFsID0gZG9jLnF1ZXJ5U2VsZWN0b3IoXCIjdGVybWluYWwtaW5wdXRcIikgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCByb3V0ZTogc3RyaW5nW10gPSBbXTtcbiAgICByZWN1cnNpdmVTY2FuKG5zLCAnJywgJ2hvbWUnLCBzZXJ2ZXIsIHJvdXRlKTtcbiAgICBjb25zdCBwcm9wcyA9IGdldFJlYWN0S2V5KHRlcm1pbmFsLCBcIlByb3BzJFwiKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qgb25DaGFuZ2UgPSB0ZXJtaW5hbFtwcm9wc10ub25DaGFuZ2U7XG4gICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgZm9yIChjb25zdCBwYXRoIG9mIHJvdXRlKSB7XG4gICAgICAgIHN0ciArPSBgY29ubmVjdCAke3BhdGh9O2BcbiAgICB9XG4gICAgb25DaGFuZ2Uoe3RhcmdldDoge3ZhbHVlOiBzdHJ9fSlcbiAgICBhd2FpdCBucy5zbGVlcCgyMCk7XG4gICAgY29uc3QgZXZlbnQgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiAoKSA9PiB7fSxcbiAgICAgICAga2V5OiBcIkVudGVyXCIsXG4gICAgICAgIGlzVHJ1c3RlZDogdHJ1ZVxuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qga2V5RG93biA9IHRlcm1pbmFsW3Byb3BzXS5vbktleURvd247XG4gICAgYXdhaXQga2V5RG93bihldmVudCk7XG59Il19