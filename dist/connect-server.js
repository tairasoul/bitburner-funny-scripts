import { mapServers } from "./infect/utils";
function findServerPath(server, targetName, currentPath = []) {
    if (server.name === targetName) {
        return [...currentPath, server.name];
    }
    for (const subServer of server.sub_servers) {
        const path = findServerPath(subServer, targetName, [...currentPath, server.name]);
        if (path) {
            return path;
        }
    }
    return null;
}
export async function main(ns) {
    const server = ns.args[0];
    const doc = eval("document");
    const terminal = doc.querySelector("#terminal-input");
    await ns.sleep(1000);
    const mapped = await mapServers(ns);
    for (const map of mapped) {
        const res = findServerPath(map, server);
        if (res) {
            let str = "";
            for (const path of res) {
                str += `connect ${path};`;
            }
            terminal.value = str;
            break;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdC1zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY29ubmVjdC1zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhELFNBQVMsY0FBYyxDQUFDLE1BQWtCLEVBQUUsVUFBa0IsRUFBRSxjQUF3QixFQUFFO0lBQ3RGLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7UUFDNUIsT0FBTyxDQUFDLEdBQUcsV0FBVyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4QztJQUVELEtBQUssTUFBTSxTQUFTLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtRQUN4QyxNQUFNLElBQUksR0FBRyxjQUFjLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDLEdBQUcsV0FBVyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xGLElBQUksSUFBSSxFQUFFO1lBQ04sT0FBTyxJQUFJLENBQUM7U0FDZjtLQUNKO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQVM7SUFDaEMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUNwQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDNUIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBcUIsQ0FBQztJQUMxRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckIsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7UUFDdEIsTUFBTSxHQUFHLEdBQUcsY0FBYyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN2QyxJQUFJLEdBQUcsRUFBRTtZQUNMLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztZQUNiLEtBQUssTUFBTSxJQUFJLElBQUksR0FBRyxFQUFFO2dCQUNwQixHQUFHLElBQUksV0FBVyxJQUFJLEdBQUcsQ0FBQTthQUM1QjtZQUNELFFBQVEsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1lBQ3JCLE1BQU07U0FDVDtLQUNKO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBucyBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBTZXJ2ZXJJbmZvLCBtYXBTZXJ2ZXJzIH0gZnJvbSBcIi4vaW5mZWN0L3V0aWxzXCI7XG5cbmZ1bmN0aW9uIGZpbmRTZXJ2ZXJQYXRoKHNlcnZlcjogU2VydmVySW5mbywgdGFyZ2V0TmFtZTogc3RyaW5nLCBjdXJyZW50UGF0aDogc3RyaW5nW10gPSBbXSk6IHN0cmluZ1tdIHwgbnVsbCB7XG4gICAgaWYgKHNlcnZlci5uYW1lID09PSB0YXJnZXROYW1lKSB7XG4gICAgICAgIHJldHVybiBbLi4uY3VycmVudFBhdGgsIHNlcnZlci5uYW1lXTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHN1YlNlcnZlciBvZiBzZXJ2ZXIuc3ViX3NlcnZlcnMpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGZpbmRTZXJ2ZXJQYXRoKHN1YlNlcnZlciwgdGFyZ2V0TmFtZSwgWy4uLmN1cnJlbnRQYXRoLCBzZXJ2ZXIubmFtZV0pO1xuICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IG5zLk5TKSB7XG4gICAgY29uc3Qgc2VydmVyID0gbnMuYXJnc1swXSBhcyBzdHJpbmc7XG4gICAgY29uc3QgZG9jID0gZXZhbChcImRvY3VtZW50XCIpXG4gICAgY29uc3QgdGVybWluYWwgPSBkb2MucXVlcnlTZWxlY3RvcihcIiN0ZXJtaW5hbC1pbnB1dFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGF3YWl0IG5zLnNsZWVwKDEwMDApO1xuICAgIGNvbnN0IG1hcHBlZCA9IGF3YWl0IG1hcFNlcnZlcnMobnMpO1xuICAgIGZvciAoY29uc3QgbWFwIG9mIG1hcHBlZCkge1xuICAgICAgICBjb25zdCByZXMgPSBmaW5kU2VydmVyUGF0aChtYXAsIHNlcnZlcilcbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhdGggb2YgcmVzKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9IGBjb25uZWN0ICR7cGF0aH07YFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVybWluYWwudmFsdWUgPSBzdHI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=