import { gainAccess } from "/infect/utils";
import { exploit } from "/game/get-game";
import PortCommunicator from "/service-communicators/port-registry";
export async function aevum(ns) {
    const doc = eval("document");
    const comms = new PortCommunicator(ns);
    const game = await exploit();
    if (game.money < 200000) {
        const hacking = game.skills.hacking;
        const priority = ["omega-net", "phantasy", "silver-helix", "iron-gym", "zer0", "max-hardware", "CSEC", "harakiri-sushi", "joesguns", "sigma-cosmetics", "foodnstuff", "n00dles"];
        for (const server of priority) {
            const skillRequired = ns.getServer(server).requiredHackingSkill;
            if (hacking >= skillRequired) {
                const accessGained = await gainAccess(ns, server);
                if (accessGained.nuke) {
                    const port = await comms.assignFirstAvailable(1);
                    ns.toast(`money too low, hacking ${server} until we have enough money!`, "error", 3000);
                    const ram = ns.getServerMaxRam(ns.getHostname()) - ns.getServerUsedRam(ns.getHostname());
                    const hackUsage = ns.getScriptRam("/rouletteburn-automated/goto/gain-money.js");
                    const threads = Math.floor(ram / hackUsage);
                    ns.run("/rouletteburn-automated/goto/gain-money.js", threads, server, port.assignedPorts[0]);
                    const handle = ns.getPortHandle(port.assignedPorts[0]);
                    await handle.nextWrite();
                    handle.clear();
                    await comms.unassignPorts(port.assignedPorts);
                    break;
                }
            }
        }
    }
    const buttons = doc.querySelectorAll("div.MuiButtonBase-root");
    buttons.forEach(div => {
        if (Array.from(div.querySelectorAll('*')).some(element => element.textContent?.includes('Travel'))) {
            div.click();
        }
    });
    const elems = doc.querySelectorAll('span');
    elems.forEach((elem) => {
        if (elem.textContent?.trim() == "A") {
            elem.click();
            return;
        }
    });
    const divs = doc.querySelectorAll("button.MuiButtonBase-root");
    divs.forEach(div => {
        if (Array.from(div.querySelectorAll('*')).some(element => element.textContent?.includes('Travel'))) {
            div.click();
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ28tdG8tYWV2dW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcm91bGV0dGVidXJuLWF1dG9tYXRlZC9nby10by1hZXZ1bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLGdCQUFnQixNQUFNLHNDQUFzQyxDQUFDO0FBRXBFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsS0FBSyxDQUFDLEVBQVM7SUFDakMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBYSxDQUFDO0lBQ3pDLE1BQU0sS0FBSyxHQUFHLElBQUksZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkMsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLEVBQUUsQ0FBQztJQUM3QixJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxFQUFFO1FBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ3BDLE1BQU0sUUFBUSxHQUFHLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDakwsS0FBSyxNQUFNLE1BQU0sSUFBSSxRQUFRLEVBQUU7WUFDM0IsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxvQkFBOEIsQ0FBQztZQUMxRSxJQUFJLE9BQU8sSUFBSSxhQUFhLEVBQUU7Z0JBQzFCLE1BQU0sWUFBWSxHQUFHLE1BQU0sVUFBVSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDbEQsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFO29CQUNuQixNQUFNLElBQUksR0FBRyxNQUFNLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDakQsRUFBRSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsTUFBTSw4QkFBOEIsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ3hGLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO29CQUN6RixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLDRDQUE0QyxDQUFDLENBQUM7b0JBQ2hGLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO29CQUM1QyxFQUFFLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM3RixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdkQsTUFBTSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQ3pCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZixNQUFNLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO29CQUM5QyxNQUFNO2lCQUNUO2FBQ0o7U0FDSjtLQUNKO0lBQ0QsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDL0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNsQixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRTtZQUMvRixHQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ25CLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUU7WUFDaEMsSUFBb0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUM3QixPQUFPO1NBQ1Y7SUFDTCxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQy9ELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDZixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRTtZQUMvRixHQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5zIGZyb20gXCJAbnNcIjtcbmltcG9ydCB7IGdhaW5BY2Nlc3MgfSBmcm9tIFwiL2luZmVjdC91dGlsc1wiO1xuaW1wb3J0IHsgZXhwbG9pdCB9IGZyb20gXCIvZ2FtZS9nZXQtZ2FtZVwiO1xuaW1wb3J0IFBvcnRDb21tdW5pY2F0b3IgZnJvbSBcIi9zZXJ2aWNlLWNvbW11bmljYXRvcnMvcG9ydC1yZWdpc3RyeVwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWV2dW0obnM6IG5zLk5TKSB7XG4gICAgY29uc3QgZG9jID0gZXZhbChcImRvY3VtZW50XCIpIGFzIERvY3VtZW50O1xuICAgIGNvbnN0IGNvbW1zID0gbmV3IFBvcnRDb21tdW5pY2F0b3IobnMpO1xuICAgIGNvbnN0IGdhbWUgPSBhd2FpdCBleHBsb2l0KCk7XG4gICAgaWYgKGdhbWUubW9uZXkgPCAyMDAwMDApIHtcbiAgICAgICAgY29uc3QgaGFja2luZyA9IGdhbWUuc2tpbGxzLmhhY2tpbmc7XG4gICAgICAgIGNvbnN0IHByaW9yaXR5ID0gW1wib21lZ2EtbmV0XCIsIFwicGhhbnRhc3lcIiwgXCJzaWx2ZXItaGVsaXhcIiwgXCJpcm9uLWd5bVwiLCBcInplcjBcIiwgXCJtYXgtaGFyZHdhcmVcIiwgXCJDU0VDXCIsIFwiaGFyYWtpcmktc3VzaGlcIiwgXCJqb2VzZ3Vuc1wiLCBcInNpZ21hLWNvc21ldGljc1wiLCBcImZvb2Ruc3R1ZmZcIiwgXCJuMDBkbGVzXCJdO1xuICAgICAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiBwcmlvcml0eSkge1xuICAgICAgICAgICAgY29uc3Qgc2tpbGxSZXF1aXJlZCA9IG5zLmdldFNlcnZlcihzZXJ2ZXIpLnJlcXVpcmVkSGFja2luZ1NraWxsIGFzIG51bWJlcjtcbiAgICAgICAgICAgIGlmIChoYWNraW5nID49IHNraWxsUmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY2Nlc3NHYWluZWQgPSBhd2FpdCBnYWluQWNjZXNzKG5zLCBzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChhY2Nlc3NHYWluZWQubnVrZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3J0ID0gYXdhaXQgY29tbXMuYXNzaWduRmlyc3RBdmFpbGFibGUoMSk7XG4gICAgICAgICAgICAgICAgICAgIG5zLnRvYXN0KGBtb25leSB0b28gbG93LCBoYWNraW5nICR7c2VydmVyfSB1bnRpbCB3ZSBoYXZlIGVub3VnaCBtb25leSFgLCBcImVycm9yXCIsIDMwMDApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0obnMuZ2V0SG9zdG5hbWUoKSkgLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKG5zLmdldEhvc3RuYW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYWNrVXNhZ2UgPSBucy5nZXRTY3JpcHRSYW0oXCIvcm91bGV0dGVidXJuLWF1dG9tYXRlZC9nb3RvL2dhaW4tbW9uZXkuanNcIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRocmVhZHMgPSBNYXRoLmZsb29yKHJhbSAvIGhhY2tVc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIG5zLnJ1bihcIi9yb3VsZXR0ZWJ1cm4tYXV0b21hdGVkL2dvdG8vZ2Fpbi1tb25leS5qc1wiLCB0aHJlYWRzLCBzZXJ2ZXIsIHBvcnQuYXNzaWduZWRQb3J0c1swXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZSA9IG5zLmdldFBvcnRIYW5kbGUocG9ydC5hc3NpZ25lZFBvcnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgaGFuZGxlLm5leHRXcml0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29tbXMudW5hc3NpZ25Qb3J0cyhwb3J0LmFzc2lnbmVkUG9ydHMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYnV0dG9ucyA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKFwiZGl2Lk11aUJ1dHRvbkJhc2Utcm9vdFwiKTtcbiAgICBidXR0b25zLmZvckVhY2goZGl2ID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmZyb20oZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSkuc29tZShlbGVtZW50ID0+IGVsZW1lbnQudGV4dENvbnRlbnQ/LmluY2x1ZGVzKCdUcmF2ZWwnKSkpIHtcbiAgICAgICAgICAgIChkaXYgYXMgSFRNTEVsZW1lbnQpLmNsaWNrKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBlbGVtcyA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuJyk7XG4gICAgZWxlbXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgICBpZiAoZWxlbS50ZXh0Q29udGVudD8udHJpbSgpID09IFwiQVwiKSB7XG4gICAgICAgICAgICAoZWxlbSBhcyBIVE1MRWxlbWVudCkuY2xpY2soKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IGRpdnMgPSBkb2MucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvbi5NdWlCdXR0b25CYXNlLXJvb3RcIik7XG4gICAgZGl2cy5mb3JFYWNoKGRpdiA9PiB7XG4gICAgICAgIGlmIChBcnJheS5mcm9tKGRpdi5xdWVyeVNlbGVjdG9yQWxsKCcqJykpLnNvbWUoZWxlbWVudCA9PiBlbGVtZW50LnRleHRDb250ZW50Py5pbmNsdWRlcygnVHJhdmVsJykpKSB7XG4gICAgICAgICAgICAoZGl2IGFzIEhUTUxFbGVtZW50KS5jbGljaygpO1xuICAgICAgICB9XG4gICAgfSlcbn0iXX0=