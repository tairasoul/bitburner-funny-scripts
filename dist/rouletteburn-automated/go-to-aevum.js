import { gainAccess } from "/infect/utils";
import { exploit } from "/game/get-game";
export async function aevum(ns) {
    const doc = eval("document");
    const game = await exploit();
    if (game.money < 200000) {
        const hacking = game.skills.hacking;
        const priority = ["omega-net", "phantasy", "silver-helix", "iron-gym", "zer0", "max-hardware", "CSEC", "harakiri-sushi", "joesguns", "sigma-cosmetics", "foodnstuff", "n00dles"];
        for (const server of priority) {
            const skillRequired = ns.getServer(server).requiredHackingSkill;
            if (hacking >= skillRequired) {
                const accessGained = await gainAccess(ns, server);
                if (accessGained.nuke) {
                    ns.toast(`money too low, hacking ${server} until we have enough money!`, "error", 3000);
                    const ram = ns.getServerMaxRam(ns.getHostname()) - ns.getServerUsedRam(ns.getHostname());
                    const hackUsage = ns.getScriptRam("/rouletteburn-automated/goto/gain-money.js");
                    const threads = Math.floor(ram / hackUsage);
                    const pid = ns.run("/rouletteburn-automated/goto/gain-money.js", threads, server);
                    ;
                    while (ns.isRunning(pid))
                        await ns.sleep(1);
                    break;
                }
            }
        }
    }
    const buttons = doc.querySelectorAll("div.MuiButtonBase-root");
    buttons.forEach(div => {
        if (Array.from(div.querySelectorAll('*')).some(element => element.textContent?.includes('Travel'))) {
            div.click();
        }
    });
    const elems = doc.querySelectorAll('span');
    elems.forEach((elem) => {
        if (elem.textContent?.trim() == "A") {
            elem.click();
            return;
        }
    });
    const divs = doc.querySelectorAll("button.MuiButtonBase-root");
    divs.forEach(div => {
        if (Array.from(div.querySelectorAll('*')).some(element => element.textContent?.includes('Travel'))) {
            div.click();
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ28tdG8tYWV2dW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcm91bGV0dGVidXJuLWF1dG9tYXRlZC9nby10by1hZXZ1bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QyxNQUFNLENBQUMsS0FBSyxVQUFVLEtBQUssQ0FBQyxFQUFTO0lBQ2pDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQztJQUN6QyxNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sRUFBRSxDQUFDO0lBQzdCLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLEVBQUU7UUFDckIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDcEMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNqTCxLQUFLLE1BQU0sTUFBTSxJQUFJLFFBQVEsRUFBRTtZQUMzQixNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLG9CQUE4QixDQUFDO1lBQzFFLElBQUksT0FBTyxJQUFJLGFBQWEsRUFBRTtnQkFDMUIsTUFBTSxZQUFZLEdBQUcsTUFBTSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNsRCxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUU7b0JBQ25CLEVBQUUsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLE1BQU0sOEJBQThCLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUN4RixNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztvQkFDekYsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO29CQUNoRixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQztvQkFDNUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyw0Q0FBNEMsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQUEsQ0FBQztvQkFDbkYsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQzt3QkFDcEIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN0QixNQUFNO2lCQUNUO2FBQ0o7U0FDSjtLQUNKO0lBQ0QsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDL0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNsQixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRTtZQUMvRixHQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ25CLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUU7WUFDaEMsSUFBb0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUM3QixPQUFPO1NBQ1Y7SUFDTCxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQy9ELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDZixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRTtZQUMvRixHQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5zIGZyb20gXCJAbnNcIjtcbmltcG9ydCB7IGdhaW5BY2Nlc3MgfSBmcm9tIFwiL2luZmVjdC91dGlsc1wiO1xuaW1wb3J0IHsgZXhwbG9pdCB9IGZyb20gXCIvZ2FtZS9nZXQtZ2FtZVwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWV2dW0obnM6IG5zLk5TKSB7XG4gICAgY29uc3QgZG9jID0gZXZhbChcImRvY3VtZW50XCIpIGFzIERvY3VtZW50O1xuICAgIGNvbnN0IGdhbWUgPSBhd2FpdCBleHBsb2l0KCk7XG4gICAgaWYgKGdhbWUubW9uZXkgPCAyMDAwMDApIHtcbiAgICAgICAgY29uc3QgaGFja2luZyA9IGdhbWUuc2tpbGxzLmhhY2tpbmc7XG4gICAgICAgIGNvbnN0IHByaW9yaXR5ID0gW1wib21lZ2EtbmV0XCIsIFwicGhhbnRhc3lcIiwgXCJzaWx2ZXItaGVsaXhcIiwgXCJpcm9uLWd5bVwiLCBcInplcjBcIiwgXCJtYXgtaGFyZHdhcmVcIiwgXCJDU0VDXCIsIFwiaGFyYWtpcmktc3VzaGlcIiwgXCJqb2VzZ3Vuc1wiLCBcInNpZ21hLWNvc21ldGljc1wiLCBcImZvb2Ruc3R1ZmZcIiwgXCJuMDBkbGVzXCJdO1xuICAgICAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiBwcmlvcml0eSkge1xuICAgICAgICAgICAgY29uc3Qgc2tpbGxSZXF1aXJlZCA9IG5zLmdldFNlcnZlcihzZXJ2ZXIpLnJlcXVpcmVkSGFja2luZ1NraWxsIGFzIG51bWJlcjtcbiAgICAgICAgICAgIGlmIChoYWNraW5nID49IHNraWxsUmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY2Nlc3NHYWluZWQgPSBhd2FpdCBnYWluQWNjZXNzKG5zLCBzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChhY2Nlc3NHYWluZWQubnVrZSkge1xuICAgICAgICAgICAgICAgICAgICBucy50b2FzdChgbW9uZXkgdG9vIGxvdywgaGFja2luZyAke3NlcnZlcn0gdW50aWwgd2UgaGF2ZSBlbm91Z2ggbW9uZXkhYCwgXCJlcnJvclwiLCAzMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFtID0gbnMuZ2V0U2VydmVyTWF4UmFtKG5zLmdldEhvc3RuYW1lKCkpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShucy5nZXRIb3N0bmFtZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFja1VzYWdlID0gbnMuZ2V0U2NyaXB0UmFtKFwiL3JvdWxldHRlYnVybi1hdXRvbWF0ZWQvZ290by9nYWluLW1vbmV5LmpzXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aHJlYWRzID0gTWF0aC5mbG9vcihyYW0gLyBoYWNrVXNhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaWQgPSBucy5ydW4oXCIvcm91bGV0dGVidXJuLWF1dG9tYXRlZC9nb3RvL2dhaW4tbW9uZXkuanNcIiwgdGhyZWFkcywgc2VydmVyKTs7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChucy5pc1J1bm5pbmcocGlkKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYnV0dG9ucyA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKFwiZGl2Lk11aUJ1dHRvbkJhc2Utcm9vdFwiKTtcbiAgICBidXR0b25zLmZvckVhY2goZGl2ID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmZyb20oZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSkuc29tZShlbGVtZW50ID0+IGVsZW1lbnQudGV4dENvbnRlbnQ/LmluY2x1ZGVzKCdUcmF2ZWwnKSkpIHtcbiAgICAgICAgICAgIChkaXYgYXMgSFRNTEVsZW1lbnQpLmNsaWNrKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBlbGVtcyA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuJyk7XG4gICAgZWxlbXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgICBpZiAoZWxlbS50ZXh0Q29udGVudD8udHJpbSgpID09IFwiQVwiKSB7XG4gICAgICAgICAgICAoZWxlbSBhcyBIVE1MRWxlbWVudCkuY2xpY2soKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IGRpdnMgPSBkb2MucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvbi5NdWlCdXR0b25CYXNlLXJvb3RcIik7XG4gICAgZGl2cy5mb3JFYWNoKGRpdiA9PiB7XG4gICAgICAgIGlmIChBcnJheS5mcm9tKGRpdi5xdWVyeVNlbGVjdG9yQWxsKCcqJykpLnNvbWUoZWxlbWVudCA9PiBlbGVtZW50LnRleHRDb250ZW50Py5pbmNsdWRlcygnVHJhdmVsJykpKSB7XG4gICAgICAgICAgICAoZGl2IGFzIEhUTUxFbGVtZW50KS5jbGljaygpO1xuICAgICAgICB9XG4gICAgfSlcbn0iXX0=