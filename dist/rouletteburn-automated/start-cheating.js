import { exploit } from "/game/get-game";
import { clickText } from "./begin";
function extractNumberFromString(str) {
    const numericStr = str.replace(/\D/g, '');
    const number = parseInt(numericStr);
    return number;
}
function getGreenTile(table) {
    const rows = table.querySelectorAll("tr");
    const cells = [];
    rows.forEach(row => {
        const children = row.children;
        for (const child of children) {
            cells.push(child);
        }
    });
    for (const cell of cells) {
        if (cell.style.backgroundColor == "limegreen")
            return cell;
    }
    return null;
}
function getTile(num, table) {
    const rows = table.querySelectorAll('tr');
    for (const row of rows) {
        const cells = row.querySelectorAll('td');
        for (const cell of cells) {
            const buttons = cell.querySelectorAll('button');
            if (buttons.length > 0) {
                for (const button of buttons) {
                    if (button.textContent?.trim() === num.toString()) {
                        return button;
                    }
                }
            }
            else if (cell.textContent?.trim() === num.toString()) {
                return cell;
            }
        }
    }
    return null;
}
function clickBypassed(element) {
    const propsName = Object.keys(element).find((v) => v.startsWith("__reactProps$"));
    // @ts-ignore
    const click = element[propsName].onClick;
    const event = {
        target: element,
        currentTarget: element,
        bubbles: true,
        cancelable: true,
        type: 'click',
        isTrusted: true
    };
    // @ts-ignore
    click(event);
}
export async function cheat(ns) {
    ns.disableLog("sleep");
    const doc = eval("document");
    const pid = ns.run("rouletteburn.js");
    await ns.sleep(1500);
    const tailWindows = doc.querySelectorAll("div.react-resizable");
    let targetElement;
    tailWindows.forEach((w) => {
        const children = w.querySelectorAll(":scope > *");
        children.forEach((childElement) => {
            if (childElement.textContent?.trim().includes("rouletteburn.js")) {
                targetElement = w;
                return;
            }
        });
    });
    clickText("City", 'div[role="button"]');
    await ns.sleep(1000);
    const casino = doc.querySelector('span[aria-label="Iker Molina Casino"]');
    casino.click();
    await ns.sleep(1000);
    const playRoulette = doc.querySelector("#root > div.MuiBox-root > div.MuiBox-root > div > button:nth-child(3)");
    playRoulette.click();
    await ns.sleep(1000);
    if (targetElement) {
        while (true) {
            const game = await exploit();
            if (game.getCasinoWinnings() > 10e9) {
                ns.kill(pid);
                clickText("Terminal", 'div[role="button"]');
                break;
            }
            await ns.sleep(1);
            const rouletteBurn = targetElement.querySelector("table");
            const rouletteWindow = doc.querySelector("#root > div.MuiBox-root > div.MuiBox-root");
            const roulette = rouletteWindow?.querySelector("table");
            if (getGreenTile(rouletteBurn) == null) {
                const burnTile = getTile(1, rouletteBurn);
                if (burnTile)
                    burnTile.click();
                const rouletteTile = getTile(1, roulette);
                if (rouletteTile)
                    clickBypassed(rouletteTile);
                while (!rouletteWindow.querySelector(":nth-child(6)").textContent?.startsWith("playing"))
                    await ns.sleep(1);
                while (!rouletteWindow.querySelector(":nth-child(6)").textContent?.startsWith("lost ") && !rouletteWindow.querySelector(":nth-child(6)").textContent?.startsWith("won "))
                    await ns.sleep(1);
                const resultTile = rouletteWindow.querySelector(":nth-child(4)");
                if (resultTile) {
                    const tileNum = extractNumberFromString(resultTile.textContent);
                    const resultBurn = getTile(tileNum, rouletteBurn);
                    if (resultBurn)
                        resultBurn.click();
                }
            }
            else {
                const input = rouletteWindow.querySelector("div")?.querySelector("div")?.querySelector("input");
                const propsName = Object.keys(input).find((v) => v.startsWith("__reactProps$"));
                // @ts-ignore
                const props = input[propsName];
                props.onChange({ currentTarget: { value: 1e7 } });
                const burnTile = getGreenTile(rouletteBurn);
                const tile = parseInt(burnTile.textContent);
                const rouletteTile = getTile(tile, roulette);
                burnTile.click();
                if (rouletteTile)
                    clickBypassed(rouletteTile);
                while (!rouletteWindow.querySelector(":nth-child(6)").textContent?.startsWith("playing"))
                    await ns.sleep(1);
                while (!rouletteWindow.querySelector(":nth-child(6)").textContent?.startsWith("lost ") && !rouletteWindow.querySelector(":nth-child(6)").textContent?.startsWith("won "))
                    await ns.sleep(1);
                const resultTile = rouletteWindow.querySelector(":nth-child(4)");
                if (resultTile) {
                    const tileNum = extractNumberFromString(resultTile.textContent);
                    const resultBurn = getTile(tileNum, rouletteBurn);
                    if (resultBurn)
                        resultBurn.click();
                }
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtY2hlYXRpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcm91bGV0dGVidXJuLWF1dG9tYXRlZC9zdGFydC1jaGVhdGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVwQyxTQUFTLHVCQUF1QixDQUFDLEdBQVc7SUFDeEMsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxLQUF1QjtJQUN6QyxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsTUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztJQUVoQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2YsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUM5QixLQUFLLE1BQU0sS0FBSyxJQUFJLFFBQVEsRUFBRTtZQUMxQixLQUFLLENBQUMsSUFBSSxDQUFDLEtBQW9CLENBQUMsQ0FBQztTQUNwQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDdEIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsSUFBSSxXQUFXO1lBQ3pDLE9BQU8sSUFBSSxDQUFDO0tBQ25CO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLEdBQVcsRUFBRSxLQUF1QjtJQUNqRCxNQUFNLElBQUksR0FBRyxLQUFL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dXJjZXNDb250ZW50IjpbImltcG9ydCBucyBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBleHBsb2l0IH0gZnJvbSBcIi9nYW1lL2dldC1nYW1lXCI7XG5pbXBvcnQgeyBjbGlja1RleHQgfSBmcm9tIFwiLi9iZWdpblwiO1xuXG5mdW5jdGlvbiBleHRyYWN0TnVtYmVyRnJvbVN0cmluZyhzdHI6IHN0cmluZykge1xuICAgIGNvbnN0IG51bWVyaWNTdHIgPSBzdHIucmVwbGFjZSgvXFxEL2csICcnKTtcbiAgICBjb25zdCBudW1iZXIgPSBwYXJzZUludChudW1lcmljU3RyKTtcbiAgICByZXR1cm4gbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBnZXRHcmVlblRpbGUodGFibGU6IEhUTUxUYWJsZUVsZW1lbnQpIHtcbiAgICBjb25zdCByb3dzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbChcInRyXCIpO1xuICAgIGNvbnN0IGNlbGxzOiBIVE1MRWxlbWVudFtdID0gW107XG4gICAgXG4gICAgcm93cy5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gcm93LmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjZWxscy5wdXNoKGNoaWxkIGFzIEhUTUxFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGZvciAoY29uc3QgY2VsbCBvZiBjZWxscykge1xuICAgICAgICBpZiAoY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPT0gXCJsaW1lZ3JlZW5cIilcbiAgICAgICAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VGlsZShudW06IG51bWJlciwgdGFibGU6IEhUTUxUYWJsZUVsZW1lbnQpIHtcbiAgICBjb25zdCByb3dzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgndHInKTtcblxuICAgIGZvciAoY29uc3Qgcm93IG9mIHJvd3MpIHtcbiAgICAgICAgY29uc3QgY2VsbHMgPSByb3cucXVlcnlTZWxlY3RvckFsbCgndGQnKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGNlbGwgb2YgY2VsbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbnMgPSBjZWxsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpO1xuXG4gICAgICAgICAgICBpZiAoYnV0dG9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgYnV0dG9ucykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLnRleHRDb250ZW50Py50cmltKCkgPT09IG51bS50b1N0cmluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjZWxsLnRleHRDb250ZW50Py50cmltKCkgPT09IG51bS50b1N0cmluZygpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNlbGwgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gY2xpY2tCeXBhc3NlZChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IHByb3BzTmFtZSA9IE9iamVjdC5rZXlzKGVsZW1lbnQpLmZpbmQoKHYpID0+IHYuc3RhcnRzV2l0aChcIl9fcmVhY3RQcm9wcyRcIikpIGFzIHN0cmluZztcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3QgY2xpY2sgPSBlbGVtZW50W3Byb3BzTmFtZV0ub25DbGlja1xuICAgIGNvbnN0IGV2ZW50ID0ge1xuICAgICAgICB0YXJnZXQ6IGVsZW1lbnQsXG4gICAgICAgIGN1cnJlbnRUYXJnZXQ6IGVsZW1lbnQsXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgIHR5cGU6ICdjbGljaycsXG4gICAgICAgIGlzVHJ1c3RlZDogdHJ1ZVxuICAgIH07XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNsaWNrKGV2ZW50KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWF0KG5zOiBucy5OUykge1xuICAgIG5zLmRpc2FibGVMb2coXCJzbGVlcFwiKTtcbiAgICBjb25zdCBkb2MgPSBldmFsKFwiZG9jdW1lbnRcIikgYXMgRG9jdW1lbnQ7XG4gICAgY29uc3QgcGlkID0gbnMucnVuKFwicm91bGV0dGVidXJuLmpzXCIpXG4gICAgYXdhaXQgbnMuc2xlZXAoMTUwMCk7XG4gICAgY29uc3QgdGFpbFdpbmRvd3MgPSBkb2MucXVlcnlTZWxlY3RvckFsbChcImRpdi5yZWFjdC1yZXNpemFibGVcIilcbiAgICBsZXQgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gICAgdGFpbFdpbmRvd3MuZm9yRWFjaCgodykgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHcucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZSA+ICpcIik7XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkRWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNoaWxkRWxlbWVudC50ZXh0Q29udGVudD8udHJpbSgpLmluY2x1ZGVzKFwicm91bGV0dGVidXJuLmpzXCIpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudCA9IHcgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNsaWNrVGV4dChcIkNpdHlcIiwgJ2Rpdltyb2xlPVwiYnV0dG9uXCJdJylcblxuICAgIGF3YWl0IG5zLnNsZWVwKDEwMDApO1xuXG4gICAgY29uc3QgY2FzaW5vID0gZG9jLnF1ZXJ5U2VsZWN0b3IoJ3NwYW5bYXJpYS1sYWJlbD1cIklrZXIgTW9saW5hIENhc2lub1wiXScpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgY2FzaW5vLmNsaWNrKCk7XG5cbiAgICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcblxuICAgIGNvbnN0IHBsYXlSb3VsZXR0ZSA9IGRvYy5xdWVyeVNlbGVjdG9yKFwiI3Jvb3QgPiBkaXYuTXVpQm94LXJvb3QgPiBkaXYuTXVpQm94LXJvb3QgPiBkaXYgPiBidXR0b246bnRoLWNoaWxkKDMpXCIpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgcGxheVJvdWxldHRlLmNsaWNrKCk7XG5cbiAgICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcblxuICAgIGlmICh0YXJnZXRFbGVtZW50KSB7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBnYW1lID0gYXdhaXQgZXhwbG9pdCgpO1xuICAgICAgICAgICAgaWYgKGdhbWUuZ2V0Q2FzaW5vV2lubmluZ3MoKSA+IDEwZTkpIHtcbiAgICAgICAgICAgICAgICBucy5raWxsKHBpZCk7XG5cbiAgICAgICAgICAgICAgICBjbGlja1RleHQoXCJUZXJtaW5hbFwiLCAnZGl2W3JvbGU9XCJidXR0b25cIl0nKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMSk7XG4gICAgICAgICAgICBjb25zdCByb3VsZXR0ZUJ1cm4gPSB0YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ0YWJsZVwiKSBhcyBIVE1MVGFibGVFbGVtZW50O1xuICAgICAgICAgICAgY29uc3Qgcm91bGV0dGVXaW5kb3cgPSBkb2MucXVlcnlTZWxlY3RvcihcIiNyb290ID4gZGl2Lk11aUJveC1yb290ID4gZGl2Lk11aUJveC1yb290XCIpIGFzIEhUTUxEaXZFbGVtZW50O1xuICAgICAgICAgICAgY29uc3Qgcm91bGV0dGUgPSByb3VsZXR0ZVdpbmRvdz8ucXVlcnlTZWxlY3RvcihcInRhYmxlXCIpIGFzIEhUTUxUYWJsZUVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoZ2V0R3JlZW5UaWxlKHJvdWxldHRlQnVybikgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1cm5UaWxlID0gZ2V0VGlsZSgxLCByb3VsZXR0ZUJ1cm4pO1xuICAgICAgICAgICAgICAgIGlmIChidXJuVGlsZSlcbiAgICAgICAgICAgICAgICAgICAgYnVyblRpbGUuY2xpY2soKTtcbiAgICAgICAgICAgICAgICBjb25zdCByb3VsZXR0ZVRpbGUgPSBnZXRUaWxlKDEsIHJvdWxldHRlKTtcbiAgICAgICAgICAgICAgICBpZiAocm91bGV0dGVUaWxlKVxuICAgICAgICAgICAgICAgICAgICBjbGlja0J5cGFzc2VkKHJvdWxldHRlVGlsZSk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKCEocm91bGV0dGVXaW5kb3cucXVlcnlTZWxlY3RvcihcIjpudGgtY2hpbGQoNilcIikgYXMgSFRNTEVsZW1lbnQpLnRleHRDb250ZW50Py5zdGFydHNXaXRoKFwicGxheWluZ1wiKSlcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMSlcbiAgICAgICAgICAgICAgICB3aGlsZSAoIShyb3VsZXR0ZVdpbmRvdy5xdWVyeVNlbGVjdG9yKFwiOm50aC1jaGlsZCg2KVwiKSBhcyBIVE1MRWxlbWVudCkudGV4dENvbnRlbnQ/LnN0YXJ0c1dpdGgoXCJsb3N0IFwiKSAmJiAhKHJvdWxldHRlV2luZG93LnF1ZXJ5U2VsZWN0b3IoXCI6bnRoLWNoaWxkKDYpXCIpIGFzIEhUTUxFbGVtZW50KS50ZXh0Q29udGVudD8uc3RhcnRzV2l0aChcIndvbiBcIikpXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDEpXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0VGlsZSA9IHJvdWxldHRlV2luZG93LnF1ZXJ5U2VsZWN0b3IoXCI6bnRoLWNoaWxkKDQpXCIpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRUaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbGVOdW0gPSBleHRyYWN0TnVtYmVyRnJvbVN0cmluZyhyZXN1bHRUaWxlLnRleHRDb250ZW50IGFzIHN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdEJ1cm4gPSBnZXRUaWxlKHRpbGVOdW0sIHJvdWxldHRlQnVybik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRCdXJuKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0QnVybi5jbGljaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gcm91bGV0dGVXaW5kb3cucXVlcnlTZWxlY3RvcihcImRpdlwiKT8ucXVlcnlTZWxlY3RvcihcImRpdlwiKT8ucXVlcnlTZWxlY3RvcihcImlucHV0XCIpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzTmFtZSA9IE9iamVjdC5rZXlzKGlucHV0KS5maW5kKCh2KSA9PiB2LnN0YXJ0c1dpdGgoXCJfX3JlYWN0UHJvcHMkXCIpKSBhcyBzdHJpbmc7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzID0gaW5wdXRbcHJvcHNOYW1lXVxuICAgICAgICAgICAgICAgIHByb3BzLm9uQ2hhbmdlKHtjdXJyZW50VGFyZ2V0OiB7dmFsdWU6IDFlN319KTtcbiAgICAgICAgICAgICAgICBjb25zdCBidXJuVGlsZSA9IGdldEdyZWVuVGlsZShyb3VsZXR0ZUJ1cm4pIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGUgPSBwYXJzZUludChidXJuVGlsZS50ZXh0Q29udGVudCBhcyBzdHJpbmcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvdWxldHRlVGlsZSA9IGdldFRpbGUodGlsZSwgcm91bGV0dGUpO1xuICAgICAgICAgICAgICAgIGJ1cm5UaWxlLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgaWYgKHJvdWxldHRlVGlsZSlcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tCeXBhc3NlZChyb3VsZXR0ZVRpbGUpO1xuICAgICAgICAgICAgICAgIHdoaWxlICghKHJvdWxldHRlV2luZG93LnF1ZXJ5U2VsZWN0b3IoXCI6bnRoLWNoaWxkKDYpXCIpIGFzIEhUTUxFbGVtZW50KS50ZXh0Q29udGVudD8uc3RhcnRzV2l0aChcInBsYXlpbmdcIikpXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDEpXG4gICAgICAgICAgICAgICAgd2hpbGUgKCEocm91bGV0dGVXaW5kb3cucXVlcnlTZWxlY3RvcihcIjpudGgtY2hpbGQoNilcIikgYXMgSFRNTEVsZW1lbnQpLnRleHRDb250ZW50Py5zdGFydHNXaXRoKFwibG9zdCBcIikgJiYgIShyb3VsZXR0ZVdpbmRvdy5xdWVyeVNlbGVjdG9yKFwiOm50aC1jaGlsZCg2KVwiKSBhcyBIVE1MRWxlbWVudCkudGV4dENvbnRlbnQ/LnN0YXJ0c1dpdGgoXCJ3b24gXCIpKVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBucy5zbGVlcCgxKVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdFRpbGUgPSByb3VsZXR0ZVdpbmRvdy5xdWVyeVNlbGVjdG9yKFwiOm50aC1jaGlsZCg0KVwiKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0VGlsZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aWxlTnVtID0gZXh0cmFjdE51bWJlckZyb21TdHJpbmcocmVzdWx0VGlsZS50ZXh0Q29udGVudCBhcyBzdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRCdXJuID0gZ2V0VGlsZSh0aWxlTnVtLCByb3VsZXR0ZUJ1cm4pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0QnVybilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdEJ1cm4uY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59Il19