export default class Multiport {
    ports = [];
    constructor(ns, start, end) {
        for (let i = start; i <= end; i++) {
            this.ports.push(ns.getPortHandle(i));
        }
    }
    write(data, portPredicate = (_, __) => true) {
        const parsed = typeof data == "string" ? data : JSON.stringify(data);
        for (let i = 0; this.ports[i] != undefined; i++) {
            if (!this.ports[i].full() && portPredicate(i, this.ports[i])) {
                this.ports[i].write(parsed);
                break;
            }
        }
    }
    nextWrite() {
        const promises = [];
        for (const port of this.ports) {
            promises.push(port.nextWrite());
        }
        return Promise.any(promises);
    }
    clear() {
        for (const port of this.ports)
            port.clear();
    }
    empty() {
        for (const port of this.ports)
            if (!port.empty())
                return false;
        return true;
    }
    hasItems() {
        for (const port of this.ports)
            if (port.empty())
                return false;
        return false;
    }
    full() {
        for (const port of this.ports)
            if (!port.full())
                return false;
        return true;
    }
    peek(predicate = () => true) {
        for (const port of this.ports) {
            if (port.peek() != "NULL PORT DATA" && predicate(port.peek()))
                return port.peek();
        }
        return null;
    }
    read(predicate = () => true) {
        for (const port of this.ports) {
            if (port.peek() != "NULL PORT DATA" && predicate(port.peek()))
                return port.read();
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsYXNzZXMvbXVsdGlwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxPQUFPLE9BQU8sU0FBUztJQUMxQixLQUFLLEdBQXVCLEVBQUUsQ0FBQztJQUMvQixZQUFZLEVBQVMsRUFBRSxLQUFhLEVBQUUsR0FBVztRQUM3QyxLQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBUyxFQUFFLGdCQUFzRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUk7UUFDbEcsTUFBTSxNQUFNLEdBQUcsT0FBTyxJQUFJLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksYUFBYSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzFELElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM1QixNQUFNO2FBQ1Q7U0FDSjtJQUNMLENBQUM7SUFFRCxTQUFTO1FBQ0wsTUFBTSxRQUFRLEdBQW9CLEVBQUUsQ0FBQztRQUNyQyxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDM0IsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztTQUNuQztRQUNELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsS0FBSztRQUNELEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUs7WUFDekIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxLQUFLO1FBQ0QsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDYixPQUFPLEtBQUssQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsUUFBUTtRQUNKLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUs7WUFDekIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNaLE9BQU8sS0FBSyxDQUFDO1FBQ3JCLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxJQUFJO1FBQ0EsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDWixPQUFPLEtBQUssQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBSSxDQUFDLFlBQW9DLEdBQUcsRUFBRSxDQUFDLElBQUk7UUFDL0MsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzNCLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLGdCQUFnQixJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3pELE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUksQ0FBQyxZQUFvQyxHQUFHLEVBQUUsQ0FBQyxJQUFJO1FBQy9DLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUMzQixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxnQkFBZ0IsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN6RCxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMxQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBucyBmcm9tIFwiQG5zXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVsdGlwb3J0IHtcbiAgICBwb3J0czogbnMuTmV0c2NyaXB0UG9ydFtdID0gW107XG4gICAgY29uc3RydWN0b3IobnM6IG5zLk5TLCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcikge1xuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucG9ydHMucHVzaChucy5nZXRQb3J0SGFuZGxlKGkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHdyaXRlKGRhdGE6IGFueSwgcG9ydFByZWRpY2F0ZTogKHBvcnROdW06IG51bWJlciwgcG9ydDogbnMuTmV0c2NyaXB0UG9ydCkgPT4gYm9vbGVhbiA9IChfLCBfXykgPT4gdHJ1ZSkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiID8gZGF0YSA6IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgdGhpcy5wb3J0c1tpXSAhPSB1bmRlZmluZWQ7IGkrKykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBvcnRzW2ldLmZ1bGwoKSAmJiBwb3J0UHJlZGljYXRlKGksIHRoaXMucG9ydHNbaV0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3J0c1tpXS53cml0ZShwYXJzZWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmV4dFdyaXRlKCkge1xuICAgICAgICBjb25zdCBwcm9taXNlczogUHJvbWlzZTx2b2lkPltdID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcG9ydCBvZiB0aGlzLnBvcnRzKSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHBvcnQubmV4dFdyaXRlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFueShwcm9taXNlcyk7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGZvciAoY29uc3QgcG9ydCBvZiB0aGlzLnBvcnRzKVxuICAgICAgICAgICAgcG9ydC5jbGVhcigpO1xuICAgIH1cblxuICAgIGVtcHR5KCkge1xuICAgICAgICBmb3IgKGNvbnN0IHBvcnQgb2YgdGhpcy5wb3J0cykgXG4gICAgICAgICAgICBpZiAoIXBvcnQuZW1wdHkoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGhhc0l0ZW1zKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHBvcnQgb2YgdGhpcy5wb3J0cykgXG4gICAgICAgICAgICBpZiAocG9ydC5lbXB0eSgpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bGwoKSB7XG4gICAgICAgIGZvciAoY29uc3QgcG9ydCBvZiB0aGlzLnBvcnRzKVxuICAgICAgICAgICAgaWYgKCFwb3J0LmZ1bGwoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHBlZWsocHJlZGljYXRlOiAoZGF0YTogYW55KSA9PiBib29sZWFuID0gKCkgPT4gdHJ1ZSkge1xuICAgICAgICBmb3IgKGNvbnN0IHBvcnQgb2YgdGhpcy5wb3J0cykge1xuICAgICAgICAgICAgaWYgKHBvcnQucGVlaygpICE9IFwiTlVMTCBQT1JUIERBVEFcIiAmJiBwcmVkaWNhdGUocG9ydC5wZWVrKCkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBwb3J0LnBlZWsoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZWFkKHByZWRpY2F0ZTogKGRhdGE6IGFueSkgPT4gYm9vbGVhbiA9ICgpID0+IHRydWUpIHtcbiAgICAgICAgZm9yIChjb25zdCBwb3J0IG9mIHRoaXMucG9ydHMpIHtcbiAgICAgICAgICAgIGlmIChwb3J0LnBlZWsoKSAhPSBcIk5VTEwgUE9SVCBEQVRBXCIgJiYgcHJlZGljYXRlKHBvcnQucGVlaygpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9ydC5yZWFkKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufSJdfQ==