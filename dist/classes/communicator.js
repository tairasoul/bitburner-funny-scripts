import Multiport from "/classes/multiport";
export default class Communicator {
    ns;
    requests;
    responses;
    constructor(ns) {
        this.ns = ns;
        this.requests = new Multiport(ns, 1, 100);
        this.responses = new Multiport(ns, 101, 10000);
    }
    async assignPorts(ports) {
        const message = {
            pid: this.ns.pid,
            ports,
            request: "assign"
        };
        this.requests.write(message);
        return await this.AwaitResponse();
    }
    unassignPorts(ports) {
        const message = {
            pid: this.ns.pid,
            ports,
            request: "unassign"
        };
        this.requests.write(message);
    }
    async assignFirstAvailable(amount) {
        const message = {
            pid: this.ns.pid,
            request: "assignAvailable",
            portAmount: amount
        };
        this.requests.write(message);
        return await this.AwaitResponse();
    }
    async AwaitResponse() {
        while (true) {
            await this.ns.sleep(1);
            if (this.responses.peek((data) => this.isForThisPID(data))) {
                return JSON.parse(this.responses.read((data) => this.isForThisPID(data)));
            }
        }
    }
    isForThisPID(data) {
        const parsed = JSON.parse(data);
        return parsed.pid == this.ns.pid;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbXVuaWNhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsYXNzZXMvY29tbXVuaWNhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLG9CQUFvQixDQUFDO0FBa0IzQyxNQUFNLENBQUMsT0FBTyxPQUFPLFlBQVk7SUFDckIsRUFBRSxDQUFRO0lBQ1YsUUFBUSxDQUFZO0lBQ3BCLFNBQVMsQ0FBWTtJQUM3QixZQUFZLEVBQVM7UUFDakIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQWU7UUFDN0IsTUFBTSxPQUFPLEdBQW1CO1lBQzVCLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7WUFDaEIsS0FBSztZQUNMLE9BQU8sRUFBRSxRQUFRO1NBQ3BCLENBQUE7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixPQUFPLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBZTtRQUN6QixNQUFNLE9BQU8sR0FBbUI7WUFDNUIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRztZQUNoQixLQUFLO1lBQ0wsT0FBTyxFQUFFLFVBQVU7U0FDdEIsQ0FBQTtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxLQUFLLENBQUMsb0JBQW9CLENBQUMsTUFBYztRQUNyQyxNQUFNLE9BQU8sR0FBbUI7WUFDNUIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRztZQUNoQixPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLFVBQVUsRUFBRSxNQUFNO1NBQ3JCLENBQUE7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixPQUFPLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBa0MsQ0FBQztJQUN0RSxDQUFDO0lBRU8sS0FBSyxDQUFDLGFBQWE7UUFDdkIsT0FBTyxJQUFJLEVBQUU7WUFDVCxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtnQkFDeEQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQW9CLENBQUM7YUFDaEc7U0FDSjtJQUNMLENBQUM7SUFFTyxZQUFZLENBQUMsSUFBWTtRQUM3QixNQUFNLE1BQU0sR0FBb0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxPQUFPLE1BQU0sQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7SUFDckMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5zIGZyb20gXCJAbnNcIjtcbmltcG9ydCBNdWx0aXBvcnQgZnJvbSBcIi9jbGFzc2VzL211bHRpcG9ydFwiO1xuaW1wb3J0IHsgSGFuZGxlck1lc3NhZ2UgfSBmcm9tIFwiL2NsYXNzZXMvcG9ydC1yZWdpc3RyeVwiO1xuXG50eXBlIFJlc3BvbnNlTWVzc2FnZSA9IHtcbiAgICBwaWQ6IG51bWJlcjtcbiAgICByZXN1bHQ6IFwiYXNzaWduZWRcIlxufSB8IHtcbiAgICBwaWQ6IG51bWJlcjtcbiAgICByZXN1bHQ6IFwiY291bGRudCBhc3NpZ25cIjtcbiAgICBvd25lZF9ieTogbnVtYmVyW107XG59XG5cbnR5cGUgQXNzaWduZWRBdmFpbGFibGUgPSB7XG4gICAgcGlkOiBudW1iZXI7XG4gICAgcmVzdWx0OiBcImFzc2lnbmVkQXZhaWxhYmxlXCI7XG4gICAgYXNzaWduZWRQb3J0czogbnVtYmVyW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbW11bmljYXRvciB7XG4gICAgcHJpdmF0ZSBuczogbnMuTlM7XG4gICAgcHJpdmF0ZSByZXF1ZXN0czogTXVsdGlwb3J0O1xuICAgIHByaXZhdGUgcmVzcG9uc2VzOiBNdWx0aXBvcnQ7XG4gICAgY29uc3RydWN0b3IobnM6IG5zLk5TKSB7XG4gICAgICAgIHRoaXMubnMgPSBucztcbiAgICAgICAgdGhpcy5yZXF1ZXN0cyA9IG5ldyBNdWx0aXBvcnQobnMsIDEsIDEwMCk7XG4gICAgICAgIHRoaXMucmVzcG9uc2VzID0gbmV3IE11bHRpcG9ydChucywgMTAxLCAxMDAwMCk7XG4gICAgfVxuXG4gICAgYXN5bmMgYXNzaWduUG9ydHMocG9ydHM6IG51bWJlcltdKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IEhhbmRsZXJNZXNzYWdlID0ge1xuICAgICAgICAgICAgcGlkOiB0aGlzLm5zLnBpZCxcbiAgICAgICAgICAgIHBvcnRzLFxuICAgICAgICAgICAgcmVxdWVzdDogXCJhc3NpZ25cIlxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVxdWVzdHMud3JpdGUobWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLkF3YWl0UmVzcG9uc2UoKTtcbiAgICB9XG5cbiAgICB1bmFzc2lnblBvcnRzKHBvcnRzOiBudW1iZXJbXSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlOiBIYW5kbGVyTWVzc2FnZSA9IHtcbiAgICAgICAgICAgIHBpZDogdGhpcy5ucy5waWQsXG4gICAgICAgICAgICBwb3J0cyxcbiAgICAgICAgICAgIHJlcXVlc3Q6IFwidW5hc3NpZ25cIlxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVxdWVzdHMud3JpdGUobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgYXNzaWduRmlyc3RBdmFpbGFibGUoYW1vdW50OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZTogSGFuZGxlck1lc3NhZ2UgPSB7XG4gICAgICAgICAgICBwaWQ6IHRoaXMubnMucGlkLFxuICAgICAgICAgICAgcmVxdWVzdDogXCJhc3NpZ25BdmFpbGFibGVcIixcbiAgICAgICAgICAgIHBvcnRBbW91bnQ6IGFtb3VudFxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVxdWVzdHMud3JpdGUobWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLkF3YWl0UmVzcG9uc2UoKSBhcyB1bmtub3duIGFzIEFzc2lnbmVkQXZhaWxhYmxlO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgQXdhaXRSZXNwb25zZSgpIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubnMuc2xlZXAoMSk7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXNwb25zZXMucGVlaygoZGF0YSkgPT4gdGhpcy5pc0ZvclRoaXNQSUQoZGF0YSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5yZXNwb25zZXMucmVhZCgoZGF0YSkgPT4gdGhpcy5pc0ZvclRoaXNQSUQoZGF0YSkpKSBhcyBSZXNwb25zZU1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGlzRm9yVGhpc1BJRChkYXRhOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkOiBSZXNwb25zZU1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICByZXR1cm4gcGFyc2VkLnBpZCA9PSB0aGlzLm5zLnBpZDtcbiAgICB9XG59Il19