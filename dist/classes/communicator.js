import Multiport from "/classes/multiport";
export default class Communicator {
    ns;
    requests;
    responses;
    constructor(ns) {
        this.ns = ns;
        this.requests = new Multiport(ns, 1, 100);
        this.responses = new Multiport(ns, 101, 10000);
    }
    async assignPorts(ports) {
        const message = {
            pid: this.ns.pid,
            ports,
            request: "assign"
        };
        this.requests.write(message);
        return await this.AwaitResponse();
    }
    unassignPorts(ports) {
        const message = {
            pid: this.ns.pid,
            ports,
            request: "unassign"
        };
        this.requests.write(message);
    }
    async assignFirstAvailable(amount) {
        const message = {
            pid: this.ns.pid,
            request: "assignAvailable",
            portAmount: amount
        };
        this.requests.write(message);
        return await this.AwaitResponse();
    }
    async AwaitResponse() {
        while (true) {
            await this.responses.nextWrite();
            if (this.responses.peek((data) => this.isForThisPID(data))) {
                return JSON.parse(this.responses.read((data) => this.isForThisPID(data)));
            }
        }
    }
    isForThisPID(data) {
        const parsed = JSON.parse(data);
        return parsed.pid == this.ns.pid;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbXVuaWNhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsYXNzZXMvY29tbXVuaWNhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLG9CQUFvQixDQUFDO0FBa0IzQyxNQUFNLENBQUMsT0FBTyxPQUFPLFlBQVk7SUFDckIsRUFBRSxDQUFRO0lBQ1YsUUFBUSxDQUFZO0lBQ3BCLFNBQVMsQ0FBWTtJQUM3QixZQUFZLEVBQVM7UUFDakIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQWU7UUFDN0IsTUFBTSxPQUFPLEdBQW1CO1lBQzVCLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7WUFDaEIsS0FBSztZQUNMLE9BQU8sRUFBRSxRQUFRO1NBQ3BCLENBQUE7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixPQUFPLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBZTtRQUN6QixNQUFNLE9BQU8sR0FBbUI7WUFDNUIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRztZQUNoQixLQUFLO1lBQ0wsT0FBTyxFQUFFLFVBQVU7U0FDdEIsQ0FBQTtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxLQUFLLENBQUMsb0JBQW9CLENBQUMsTUFBYztRQUNyQyxNQUFNLE9BQU8sR0FBbUI7WUFDNUIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRztZQUNoQixPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLFVBQVUsRUFBRSxNQUFNO1NBQ3JCLENBQUE7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixPQUFPLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBa0MsQ0FBQztJQUN0RSxDQUFDO0lBRU8sS0FBSyxDQUFDLGFBQWE7UUFDdkIsT0FBTyxJQUFJLEVBQUU7WUFDVCxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDakMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUN4RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBb0IsQ0FBQzthQUNoRztTQUNKO0lBQ0wsQ0FBQztJQUVPLFlBQVksQ0FBQyxJQUFZO1FBQzdCLE1BQU0sTUFBTSxHQUFvQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELE9BQU8sTUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUNyQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbnMgZnJvbSBcIkBuc1wiO1xuaW1wb3J0IE11bHRpcG9ydCBmcm9tIFwiL2NsYXNzZXMvbXVsdGlwb3J0XCI7XG5pbXBvcnQgeyBIYW5kbGVyTWVzc2FnZSB9IGZyb20gXCIvY2xhc3Nlcy9wb3J0LXJlZ2lzdHJ5XCI7XG5cbnR5cGUgUmVzcG9uc2VNZXNzYWdlID0ge1xuICAgIHBpZDogbnVtYmVyO1xuICAgIHJlc3VsdDogXCJhc3NpZ25lZFwiXG59IHwge1xuICAgIHBpZDogbnVtYmVyO1xuICAgIHJlc3VsdDogXCJjb3VsZG50IGFzc2lnblwiO1xuICAgIG93bmVkX2J5OiBudW1iZXJbXTtcbn1cblxudHlwZSBBc3NpZ25lZEF2YWlsYWJsZSA9IHtcbiAgICBwaWQ6IG51bWJlcjtcbiAgICByZXN1bHQ6IFwiYXNzaWduZWRBdmFpbGFibGVcIjtcbiAgICBhc3NpZ25lZFBvcnRzOiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbXVuaWNhdG9yIHtcbiAgICBwcml2YXRlIG5zOiBucy5OUztcbiAgICBwcml2YXRlIHJlcXVlc3RzOiBNdWx0aXBvcnQ7XG4gICAgcHJpdmF0ZSByZXNwb25zZXM6IE11bHRpcG9ydDtcbiAgICBjb25zdHJ1Y3RvcihuczogbnMuTlMpIHtcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLnJlcXVlc3RzID0gbmV3IE11bHRpcG9ydChucywgMSwgMTAwKTtcbiAgICAgICAgdGhpcy5yZXNwb25zZXMgPSBuZXcgTXVsdGlwb3J0KG5zLCAxMDEsIDEwMDAwKTtcbiAgICB9XG5cbiAgICBhc3luYyBhc3NpZ25Qb3J0cyhwb3J0czogbnVtYmVyW10pIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZTogSGFuZGxlck1lc3NhZ2UgPSB7XG4gICAgICAgICAgICBwaWQ6IHRoaXMubnMucGlkLFxuICAgICAgICAgICAgcG9ydHMsXG4gICAgICAgICAgICByZXF1ZXN0OiBcImFzc2lnblwiXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0cy53cml0ZShtZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuQXdhaXRSZXNwb25zZSgpO1xuICAgIH1cblxuICAgIHVuYXNzaWduUG9ydHMocG9ydHM6IG51bWJlcltdKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IEhhbmRsZXJNZXNzYWdlID0ge1xuICAgICAgICAgICAgcGlkOiB0aGlzLm5zLnBpZCxcbiAgICAgICAgICAgIHBvcnRzLFxuICAgICAgICAgICAgcmVxdWVzdDogXCJ1bmFzc2lnblwiXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0cy53cml0ZShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBhc3luYyBhc3NpZ25GaXJzdEF2YWlsYWJsZShhbW91bnQ6IG51bWJlcikge1xuICAgICAgICBjb25zdCBtZXNzYWdlOiBIYW5kbGVyTWVzc2FnZSA9IHtcbiAgICAgICAgICAgIHBpZDogdGhpcy5ucy5waWQsXG4gICAgICAgICAgICByZXF1ZXN0OiBcImFzc2lnbkF2YWlsYWJsZVwiLFxuICAgICAgICAgICAgcG9ydEFtb3VudDogYW1vdW50XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0cy53cml0ZShtZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuQXdhaXRSZXNwb25zZSgpIGFzIHVua25vd24gYXMgQXNzaWduZWRBdmFpbGFibGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBBd2FpdFJlc3BvbnNlKCkge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXNwb25zZXMubmV4dFdyaXRlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXNwb25zZXMucGVlaygoZGF0YSkgPT4gdGhpcy5pc0ZvclRoaXNQSUQoZGF0YSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5yZXNwb25zZXMucmVhZCgoZGF0YSkgPT4gdGhpcy5pc0ZvclRoaXNQSUQoZGF0YSkpKSBhcyBSZXNwb25zZU1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGlzRm9yVGhpc1BJRChkYXRhOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkOiBSZXNwb25zZU1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICByZXR1cm4gcGFyc2VkLnBpZCA9PSB0aGlzLm5zLnBpZDtcbiAgICB9XG59Il19