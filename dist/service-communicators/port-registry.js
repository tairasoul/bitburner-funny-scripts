import Multiport from "/general/multiport";
export default class PortCommunicator {
    ns;
    requests;
    responses;
    constructor(ns) {
        this.ns = ns;
        this.requests = new Multiport(ns, { start: 1, end: 100 });
        this.responses = new Multiport(ns, { start: 101, end: 200 });
    }
    async assignPorts(ports) {
        const message = {
            pid: this.ns.pid,
            ports,
            request: "assign"
        };
        this.requests.writeEmpty(message);
        return await this.AwaitResponse();
    }
    unassignPorts(ports) {
        const message = {
            pid: this.ns.pid,
            ports,
            request: "unassign"
        };
        this.requests.writeEmpty(message);
    }
    async assignFirstAvailable(amount) {
        const message = {
            pid: this.ns.pid,
            request: "assignAvailable",
            portAmount: amount
        };
        this.requests.writeEmpty(message);
        return await this.AwaitResponse();
    }
    async AwaitResponse() {
        while (true) {
            await this.responses.nextWrite();
            if (this.responses.peek((data) => this.isForThisPID(data))) {
                return JSON.parse(this.responses.read((data) => this.isForThisPID(data)));
            }
        }
    }
    isForThisPID(data) {
        const parsed = JSON.parse(data);
        return parsed.pid == this.ns.pid;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydC1yZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlLWNvbW11bmljYXRvcnMvcG9ydC1yZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFNBQVMsTUFBTSxvQkFBb0IsQ0FBQztBQWtCM0MsTUFBTSxDQUFDLE9BQU8sT0FBTyxnQkFBZ0I7SUFDekIsRUFBRSxDQUFRO0lBQ1YsUUFBUSxDQUFZO0lBQ3BCLFNBQVMsQ0FBWTtJQUM3QixZQUFZLEVBQVM7UUFDakIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQWU7UUFDN0IsTUFBTSxPQUFPLEdBQW1CO1lBQzVCLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7WUFDaEIsS0FBSztZQUNMLE9BQU8sRUFBRSxRQUFRO1NBQ3BCLENBQUE7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsQyxPQUFPLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBZTtRQUN6QixNQUFNLE9BQU8sR0FBbUI7WUFDNUIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRztZQUNoQixLQUFLO1lBQ0wsT0FBTyxFQUFFLFVBQVU7U0FDdEIsQ0FBQTtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxLQUFLLENBQUMsb0JBQW9CLENBQUMsTUFBYztRQUNyQyxNQUFNLE9BQU8sR0FBbUI7WUFDNUIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRztZQUNoQixPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLFVBQVUsRUFBRSxNQUFNO1NBQ3JCLENBQUE7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsQyxPQUFPLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBa0MsQ0FBQztJQUN0RSxDQUFDO0lBRU8sS0FBSyxDQUFDLGFBQWE7UUFDdkIsT0FBTyxJQUFJLEVBQUU7WUFDVCxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDakMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUN4RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBb0IsQ0FBQzthQUNoRztTQUNKO0lBQ0wsQ0FBQztJQUVPLFlBQVksQ0FBQyxJQUFZO1FBQzdCLE1BQU0sTUFBTSxHQUFvQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELE9BQU8sTUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUNyQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbnMgZnJvbSBcIkBuc1wiO1xuaW1wb3J0IE11bHRpcG9ydCBmcm9tIFwiL2dlbmVyYWwvbXVsdGlwb3J0XCI7XG5pbXBvcnQgeyBIYW5kbGVyTWVzc2FnZSB9IGZyb20gXCIvc2VydmljZXMvcG9ydC1yZWdpc3RyeVwiO1xuXG50eXBlIFJlc3BvbnNlTWVzc2FnZSA9IHtcbiAgICBwaWQ6IG51bWJlcjtcbiAgICByZXN1bHQ6IFwiYXNzaWduZWRcIlxufSB8IHtcbiAgICBwaWQ6IG51bWJlcjtcbiAgICByZXN1bHQ6IFwiY291bGRudCBhc3NpZ25cIjtcbiAgICBvd25lZF9ieTogbnVtYmVyW107XG59XG5cbnR5cGUgQXNzaWduZWRBdmFpbGFibGUgPSB7XG4gICAgcGlkOiBudW1iZXI7XG4gICAgcmVzdWx0OiBcImFzc2lnbmVkQXZhaWxhYmxlXCI7XG4gICAgYXNzaWduZWRQb3J0czogbnVtYmVyW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcnRDb21tdW5pY2F0b3Ige1xuICAgIHByaXZhdGUgbnM6IG5zLk5TO1xuICAgIHByaXZhdGUgcmVxdWVzdHM6IE11bHRpcG9ydDtcbiAgICBwcml2YXRlIHJlc3BvbnNlczogTXVsdGlwb3J0O1xuICAgIGNvbnN0cnVjdG9yKG5zOiBucy5OUykge1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIHRoaXMucmVxdWVzdHMgPSBuZXcgTXVsdGlwb3J0KG5zLCB7c3RhcnQ6IDEsIGVuZDogMTAwfSk7XG4gICAgICAgIHRoaXMucmVzcG9uc2VzID0gbmV3IE11bHRpcG9ydChucywge3N0YXJ0OiAxMDEsIGVuZDogMjAwfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgYXNzaWduUG9ydHMocG9ydHM6IG51bWJlcltdKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IEhhbmRsZXJNZXNzYWdlID0ge1xuICAgICAgICAgICAgcGlkOiB0aGlzLm5zLnBpZCxcbiAgICAgICAgICAgIHBvcnRzLFxuICAgICAgICAgICAgcmVxdWVzdDogXCJhc3NpZ25cIlxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVxdWVzdHMud3JpdGVFbXB0eShtZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuQXdhaXRSZXNwb25zZSgpO1xuICAgIH1cblxuICAgIHVuYXNzaWduUG9ydHMocG9ydHM6IG51bWJlcltdKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IEhhbmRsZXJNZXNzYWdlID0ge1xuICAgICAgICAgICAgcGlkOiB0aGlzLm5zLnBpZCxcbiAgICAgICAgICAgIHBvcnRzLFxuICAgICAgICAgICAgcmVxdWVzdDogXCJ1bmFzc2lnblwiXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0cy53cml0ZUVtcHR5KG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGFzeW5jIGFzc2lnbkZpcnN0QXZhaWxhYmxlKGFtb3VudDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IEhhbmRsZXJNZXNzYWdlID0ge1xuICAgICAgICAgICAgcGlkOiB0aGlzLm5zLnBpZCxcbiAgICAgICAgICAgIHJlcXVlc3Q6IFwiYXNzaWduQXZhaWxhYmxlXCIsXG4gICAgICAgICAgICBwb3J0QW1vdW50OiBhbW91bnRcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcXVlc3RzLndyaXRlRW1wdHkobWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLkF3YWl0UmVzcG9uc2UoKSBhcyB1bmtub3duIGFzIEFzc2lnbmVkQXZhaWxhYmxlO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgQXdhaXRSZXNwb25zZSgpIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVzcG9uc2VzLm5leHRXcml0ZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzcG9uc2VzLnBlZWsoKGRhdGEpID0+IHRoaXMuaXNGb3JUaGlzUElEKGRhdGEpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMucmVzcG9uc2VzLnJlYWQoKGRhdGEpID0+IHRoaXMuaXNGb3JUaGlzUElEKGRhdGEpKSkgYXMgUmVzcG9uc2VNZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0ZvclRoaXNQSUQoZGF0YTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZDogUmVzcG9uc2VNZXNzYWdlID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZC5waWQgPT0gdGhpcy5ucy5waWQ7XG4gICAgfVxufSJdfQ==