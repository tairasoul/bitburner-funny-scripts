import Multiport from "/general/multiport";
export default class RamnetComms {
    ns;
    requests;
    responses;
    constructor(ns) {
        this.ns = ns;
        this.requests = new Multiport(ns, { start: 201, end: 300 });
        this.responses = new Multiport(ns, { start: 301, end: 400 });
    }
    async assignJob(job) {
        this.requests.writeEmpty({
            pid: this.ns.pid,
            message: "assign",
            job
        });
        const ret = await this.AwaitResponse();
        return ret;
    }
    async finishJob(job) {
        this.requests.writeEmpty({
            pid: this.ns.pid,
            message: "finish",
            job
        });
        const ret = await this.AwaitResponse();
        return ret;
    }
    async getBlock(server) {
        this.requests.writeEmpty({
            pid: this.ns.pid,
            message: "getBlock",
            block: server
        });
        const ret = await this.AwaitResponse();
        return ret;
    }
    async hasBlock(server) {
        this.requests.writeEmpty({
            pid: this.ns.pid,
            message: "hasBlock",
            block: server
        });
        const ret = await this.AwaitResponse();
        return ret.result;
    }
    async get(property) {
        this.requests.writeEmpty({
            pid: this.ns.pid,
            message: "get",
            value: property
        });
        const ret = await this.AwaitResponse();
        switch (property) {
            case "clone":
                return ret;
            case "maxBlockSize":
                return ret;
            case "maxRam":
                return ret;
            case "totalRam":
                return ret;
        }
    }
    update() {
        this.requests.writeEmpty({
            message: "updateRamnet"
        });
    }
    async AwaitResponse() {
        while (true) {
            await this.responses.nextWrite();
            if (this.responses.peek((data) => this.isForThisPID(data))) {
                return JSON.parse(this.responses.read((data) => this.isForThisPID(data)));
            }
        }
    }
    isForThisPID(data) {
        const parsed = JSON.parse(data);
        return parsed.pid == this.ns.pid;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFtbmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZpY2UtY29tbXVuaWNhdG9ycy9yYW1uZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sb0JBQW9CLENBQUM7QUFJM0MsTUFBTSxDQUFDLE9BQU8sT0FBTyxXQUFXO0lBQ3BCLEVBQUUsQ0FBUTtJQUNWLFFBQVEsQ0FBWTtJQUNwQixTQUFTLENBQVk7SUFDN0IsWUFBWSxFQUFTO1FBQ2pCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFRO1FBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUNwQjtZQUNJLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7WUFDaEIsT0FBTyxFQUFFLFFBQVE7WUFDakIsR0FBRztTQUNOLENBQ0osQ0FBQTtRQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sR0FBc0MsQ0FBQztJQUNsRCxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFRO1FBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUNwQjtZQUNJLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7WUFDaEIsT0FBTyxFQUFFLFFBQVE7WUFDakIsR0FBRztTQUNOLENBQ0osQ0FBQTtRQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sR0FBc0MsQ0FBQztJQUNsRCxDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFjO1FBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUNwQjtZQUNJLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7WUFDaEIsT0FBTyxFQUFFLFVBQVU7WUFDbkIsS0FBSyxFQUFFLE1BQU07U0FDaEIsQ0FDSixDQUFBO1FBQ0QsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkMsT0FBTyxHQUFxQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQWM7UUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQ3BCO1lBQ0ksR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRztZQUNoQixPQUFPLEVBQUUsVUFBVTtZQUNuQixLQUFLLEVBQUUsTUFBTTtTQUNoQixDQUNKLENBQUE7UUFDRCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQW9DLENBQUM7UUFDekUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQTBEO1FBQ2hFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUNwQjtZQUNJLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7WUFDaEIsT0FBTyxFQUFFLEtBQUs7WUFDZCxLQUFLLEVBQUUsUUFBUTtTQUNsQixDQUNKLENBQUE7UUFDRCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QyxRQUFRLFFBQVEsRUFBRTtZQUNkLEtBQUssT0FBTztnQkFDUixPQUFPLEdBQWtDLENBQUM7WUFDOUMsS0FBSyxjQUFjO2dCQUNmLE9BQU8sR0FBeUMsQ0FBQztZQUNyRCxLQUFLLFFBQVE7Z0JBQ1QsT0FBTyxHQUFtQyxDQUFDO1lBQy9DLEtBQUssVUFBVTtnQkFDWCxPQUFPLEdBQXFDLENBQUM7U0FDcEQ7SUFDTCxDQUFDO0lBRUQsTUFBTTtRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUNwQjtZQUNJLE9BQU8sRUFBRSxjQUFjO1NBQzFCLENBQ0osQ0FBQTtJQUNMLENBQUM7SUFFTyxLQUFLLENBQUMsYUFBYTtRQUN2QixPQUFPLElBQUksRUFBRTtZQUNULE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtZQUNoQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDN0U7U0FDSjtJQUNMLENBQUM7SUFFTyxZQUFZLENBQUMsSUFBWTtRQUM3QixNQUFNLE1BQU0sR0FBbUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRSxPQUFPLE1BQU0sQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7SUFDckMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5zIGZyb20gXCJAbnNcIjtcbmltcG9ydCBNdWx0aXBvcnQgZnJvbSBcIi9nZW5lcmFsL211bHRpcG9ydFwiO1xuaW1wb3J0ICogYXMgUmFtbmV0UmVzcG9uc2VzIGZyb20gXCIvc2VydmljZXMvcmFtbmV0LXNlcnZpY2VcIjtcbmltcG9ydCB7IEpvYiB9IGZyb20gXCIvZ2VuZXJhbC9yYW1uZXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFtbmV0Q29tbXMge1xuICAgIHByaXZhdGUgbnM6IG5zLk5TO1xuICAgIHByaXZhdGUgcmVxdWVzdHM6IE11bHRpcG9ydDtcbiAgICBwcml2YXRlIHJlc3BvbnNlczogTXVsdGlwb3J0O1xuICAgIGNvbnN0cnVjdG9yKG5zOiBucy5OUykge1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIHRoaXMucmVxdWVzdHMgPSBuZXcgTXVsdGlwb3J0KG5zLCB7c3RhcnQ6IDIwMSwgZW5kOiAzMDB9KTtcbiAgICAgICAgdGhpcy5yZXNwb25zZXMgPSBuZXcgTXVsdGlwb3J0KG5zLCB7c3RhcnQ6IDMwMSwgZW5kOiA0MDB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBhc3NpZ25Kb2Ioam9iOiBKb2IpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0cy53cml0ZUVtcHR5KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBpZDogdGhpcy5ucy5waWQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJhc3NpZ25cIixcbiAgICAgICAgICAgICAgICBqb2JcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBjb25zdCByZXQgPSBhd2FpdCB0aGlzLkF3YWl0UmVzcG9uc2UoKTtcbiAgICAgICAgcmV0dXJuIHJldCBhcyBSYW1uZXRSZXNwb25zZXMuYXNzaWduSm9iUmVzdWx0O1xuICAgIH1cblxuICAgIGFzeW5jIGZpbmlzaEpvYihqb2I6IEpvYikge1xuICAgICAgICB0aGlzLnJlcXVlc3RzLndyaXRlRW1wdHkoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGlkOiB0aGlzLm5zLnBpZCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcImZpbmlzaFwiLFxuICAgICAgICAgICAgICAgIGpvYlxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGNvbnN0IHJldCA9IGF3YWl0IHRoaXMuQXdhaXRSZXNwb25zZSgpO1xuICAgICAgICByZXR1cm4gcmV0IGFzIFJhbW5ldFJlc3BvbnNlcy5maW5pc2hKb2JSZXN1bHQ7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QmxvY2soc2VydmVyOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0cy53cml0ZUVtcHR5KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBpZDogdGhpcy5ucy5waWQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJnZXRCbG9ja1wiLFxuICAgICAgICAgICAgICAgIGJsb2NrOiBzZXJ2ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBjb25zdCByZXQgPSBhd2FpdCB0aGlzLkF3YWl0UmVzcG9uc2UoKTtcbiAgICAgICAgcmV0dXJuIHJldCBhcyBSYW1uZXRSZXNwb25zZXMuZ2V0QmxvY2tSZXN1bHQ7XG4gICAgfVxuXG4gICAgYXN5bmMgaGFzQmxvY2soc2VydmVyOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0cy53cml0ZUVtcHR5KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBpZDogdGhpcy5ucy5waWQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJoYXNCbG9ja1wiLFxuICAgICAgICAgICAgICAgIGJsb2NrOiBzZXJ2ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBjb25zdCByZXQgPSBhd2FpdCB0aGlzLkF3YWl0UmVzcG9uc2UoKSBhcyBSYW1uZXRSZXNwb25zZXMuaGFzQmxvY2tSZXN1bHQ7XG4gICAgICAgIHJldHVybiByZXQucmVzdWx0O1xuICAgIH1cblxuICAgIGFzeW5jIGdldChwcm9wZXJ0eTogXCJ0b3RhbFJhbVwiIHwgXCJtYXhSYW1cIiB8IFwibWF4QmxvY2tTaXplXCIgfCBcImNsb25lXCIpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0cy53cml0ZUVtcHR5KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBpZDogdGhpcy5ucy5waWQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJnZXRcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogcHJvcGVydHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBjb25zdCByZXQgPSBhd2FpdCB0aGlzLkF3YWl0UmVzcG9uc2UoKTtcbiAgICAgICAgc3dpdGNoIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgY2FzZSBcImNsb25lXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldCBhcyBSYW1uZXRSZXNwb25zZXMuY2xvbmVSZXN1bHQ7XG4gICAgICAgICAgICBjYXNlIFwibWF4QmxvY2tTaXplXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldCBhcyBSYW1uZXRSZXNwb25zZXMubWF4QmxvY2tTaXplUmVzdWx0O1xuICAgICAgICAgICAgY2FzZSBcIm1heFJhbVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXQgYXMgUmFtbmV0UmVzcG9uc2VzLm1heFJhbVJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgXCJ0b3RhbFJhbVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXQgYXMgUmFtbmV0UmVzcG9uc2VzLnRvdGFsUmFtUmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgICB0aGlzLnJlcXVlc3RzLndyaXRlRW1wdHkoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJ1cGRhdGVSYW1uZXRcIlxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBBd2FpdFJlc3BvbnNlKCkge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXNwb25zZXMubmV4dFdyaXRlKClcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3BvbnNlcy5wZWVrKChkYXRhKSA9PiB0aGlzLmlzRm9yVGhpc1BJRChkYXRhKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLnJlc3BvbnNlcy5yZWFkKChkYXRhKSA9PiB0aGlzLmlzRm9yVGhpc1BJRChkYXRhKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0ZvclRoaXNQSUQoZGF0YTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZDogUmFtbmV0UmVzcG9uc2VzLlJhbW5ldFJlc3BvbnNlID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZC5waWQgPT0gdGhpcy5ucy5waWQ7XG4gICAgfVxufSJdfQ==