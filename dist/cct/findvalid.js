// taken from https://github.com/alainbryden/bitburner-scripts/blob/main/Tasks/contractor.js.solver.js
export function findValid(data) {
    const num = data[0];
    const target = data[1];
    // @ts-ignore
    function helper(res, path, num, target, pos, evaluated, multed) {
        if (pos === num.length) {
            if (target === evaluated) {
                res.push(path);
            }
            return;
        }
        for (let i = pos; i < num.length; ++i) {
            if (i != pos && num[pos] == '0') {
                break;
            }
            const cur = parseInt(num.substring(pos, i + 1));
            if (pos === 0) {
                helper(res, path + cur, num, target, i + 1, cur, cur);
            }
            else {
                helper(res, path + '+' + cur, num, target, i + 1, evaluated + cur, cur);
                helper(res, path + '-' + cur, num, target, i + 1, evaluated - cur, -cur);
                helper(res, path + '*' + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);
            }
        }
    }
    if (num == null || num.length === 0) {
        return [];
    }
    // @ts-ignore
    const result = [];
    // @ts-ignore
    helper(result, '', num, target, 0, 0, 0);
    // @ts-ignore
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZHZhbGlkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NjdC9maW5kdmFsaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0dBQXNHO0FBRXRHLE1BQU0sVUFBVSxTQUFTLENBQUMsSUFBUztJQUMvQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDbkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRXRCLGFBQWE7SUFDYixTQUFTLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNO1FBQzFELElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDcEIsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUN0QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQ2pCO1lBQ0QsT0FBTTtTQUNUO1FBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUU7Z0JBQzdCLE1BQUs7YUFDUjtZQUNELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMvQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7Z0JBQ1gsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7YUFDeEQ7aUJBQU07Z0JBQ0gsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBUyxHQUFHLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDdkUsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBUyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUN4RSxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxHQUFHLEVBQUUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO2FBQ3JHO1NBQ0o7SUFDTCxDQUFDO0lBRUQsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ2pDLE9BQU8sRUFBRSxDQUFBO0tBQ1o7SUFDRCxhQUFhO0lBQ2IsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFBO0lBQ2pCLGFBQWE7SUFDYixNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDeEMsYUFBYTtJQUNiLE9BQU8sTUFBTSxDQUFBO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFpbmJyeWRlbi9iaXRidXJuZXItc2NyaXB0cy9ibG9iL21haW4vVGFza3MvY29udHJhY3Rvci5qcy5zb2x2ZXIuanNcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRWYWxpZChkYXRhOiBhbnkpIHtcbiAgICBjb25zdCBudW0gPSBkYXRhWzBdXG4gICAgY29uc3QgdGFyZ2V0ID0gZGF0YVsxXVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZ1bmN0aW9uIGhlbHBlcihyZXMsIHBhdGgsIG51bSwgdGFyZ2V0LCBwb3MsIGV2YWx1YXRlZCwgbXVsdGVkKSB7XG4gICAgICAgIGlmIChwb3MgPT09IG51bS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IGV2YWx1YXRlZCkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHBhdGgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gcG9zOyBpIDwgbnVtLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPSBwb3MgJiYgbnVtW3Bvc10gPT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGN1ciA9IHBhcnNlSW50KG51bS5zdWJzdHJpbmcocG9zLCBpICsgMSkpXG4gICAgICAgICAgICBpZiAocG9zID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaGVscGVyKHJlcywgcGF0aCArIGN1ciwgbnVtLCB0YXJnZXQsIGkgKyAxLCBjdXIsIGN1cilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGVscGVyKHJlcywgcGF0aCArICcrJyArIGN1ciwgbnVtLCB0YXJnZXQsIGkgKyAxLCBldmFsdWF0ZWQgKyBjdXIsIGN1cilcbiAgICAgICAgICAgICAgICBoZWxwZXIocmVzLCBwYXRoICsgJy0nICsgY3VyLCBudW0sIHRhcmdldCwgaSArIDEsIGV2YWx1YXRlZCAtIGN1ciwgLWN1cilcbiAgICAgICAgICAgICAgICBoZWxwZXIocmVzLCBwYXRoICsgJyonICsgY3VyLCBudW0sIHRhcmdldCwgaSArIDEsIGV2YWx1YXRlZCAtIG11bHRlZCArIG11bHRlZCAqIGN1ciwgbXVsdGVkICogY3VyKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG51bSA9PSBudWxsIHx8IG51bS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCByZXN1bHQgPSBbXVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBoZWxwZXIocmVzdWx0LCAnJywgbnVtLCB0YXJnZXQsIDAsIDAsIDApXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiByZXN1bHRcbn0iXX0=