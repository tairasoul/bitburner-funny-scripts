// taken from https://github.com/alainbryden/bitburner-scripts/blob/main/Tasks/contractor.js.solver.js
export function compressLZ(plain) {
    let cur_state = Array.from(Array(10), () => Array(10).fill(null));
    let new_state = Array.from(Array(10), () => Array(10));
    // @ts-ignore
    function set(state, i, j, str) {
        const current = state[i][j];
        if (current == null || str.length < current.length) {
            state[i][j] = str;
        }
        else if (str.length === current.length && Math.random() < 0.5) {
            // if two strings are the same length, pick randomly so that
            // we generate more possible inputs to Compression II
            state[i][j] = str;
        }
    }
    // initial state is a literal of length 1
    cur_state[0][1] = "";
    for (let i = 1; i < plain.length; ++i) {
        for (const row of new_state) {
            row.fill(null);
        }
        const c = plain[i];
        // handle literals
        for (let length = 1; length <= 9; ++length) {
            const string = cur_state[0][length];
            if (string == null) {
                continue;
            }
            if (length < 9) {
                // extend current literal
                set(new_state, 0, length + 1, string);
            }
            else {
                // start new literal
                set(new_state, 0, 1, string + "9" + plain.substring(i - 9, i) + "0");
            }
            for (let offset = 1; offset <= Math.min(9, i); ++offset) {
                if (plain[i - offset] === c) {
                    // start new backreference
                    set(new_state, offset, 1, string + length + plain.substring(i - length, i));
                }
            }
        }
        // handle backreferences
        for (let offset = 1; offset <= 9; ++offset) {
            for (let length = 1; length <= 9; ++length) {
                const string = cur_state[offset][length];
                if (string == null) {
                    continue;
                }
                if (plain[i - offset] === c) {
                    if (length < 9) {
                        // extend current backreference
                        set(new_state, offset, length + 1, string);
                    }
                    else {
                        // start new backreference
                        set(new_state, offset, 1, string + "9" + offset + "0");
                    }
                }
                // start new literal
                set(new_state, 0, 1, string + length + offset);
                // end current backreference and start new backreference
                for (let new_offset = 1; new_offset <= Math.min(9, i); ++new_offset) {
                    if (plain[i - new_offset] === c) {
                        set(new_state, new_offset, 1, string + length + offset + "0");
                    }
                }
            }
        }
        const tmp_state = new_state;
        new_state = cur_state;
        cur_state = tmp_state;
    }
    let result = null;
    for (let len = 1; len <= 9; ++len) {
        let string = cur_state[0][len];
        if (string == null) {
            continue;
        }
        string += len + plain.substring(plain.length - len, plain.length);
        if (result == null || string.length < result.length) {
            result = string;
        }
        else if (string.length == result.length && Math.random() < 0.5) {
            result = string;
        }
    }
    for (let offset = 1; offset <= 9; ++offset) {
        for (let len = 1; len <= 9; ++len) {
            let string = cur_state[offset][len];
            if (string == null) {
                continue;
            }
            string += len + "" + offset;
            if (result == null || string.length < result.length) {
                result = string;
            }
            else if (string.length == result.length && Math.random() < 0.5) {
                result = string;
            }
        }
    }
    // @ts-ignore
    return result ?? "";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHJlc3NMWi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jY3QvY29tcHJlc3NMWi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzR0FBc0c7QUFFdEcsTUFBTSxVQUFVLFVBQVUsQ0FBQyxLQUFhO0lBQ3BDLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsRSxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV2RCxhQUFhO0lBQ2IsU0FBUyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRztRQUN6QixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxPQUFPLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNoRCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ3JCO2FBQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsRUFBRTtZQUM3RCw0REFBNEQ7WUFDNUQscURBQXFEO1lBQ3JELEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7U0FDckI7SUFDTCxDQUFDO0lBRUQseUNBQXlDO0lBQ3pDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENB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QUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRTtZQUMvQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEMsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO2dCQUNoQixTQUFTO2FBQ1o7WUFFRCxNQUFNLElBQUksR0FBRyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUM7WUFDNUIsSUFBSSxNQUFNLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRTtnQkFDakQsTUFBTSxHQUFHLE1BQU0sQ0FBQzthQUNuQjtpQkFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxFQUFFO2dCQUM5RCxNQUFNLEdBQUcsTUFBTSxDQUFDO2FBQ25CO1NBQ0o7S0FDSjtJQUVELGFBQWE7SUFDYixPQUFPLE1BQU0sSUFBSSxFQUFFLENBQUM7QUFDeEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FsYWluYnJ5ZGVuL2JpdGJ1cm5lci1zY3JpcHRzL2Jsb2IvbWFpbi9UYXNrcy9jb250cmFjdG9yLmpzLnNvbHZlci5qc1xuXG5leHBvcnQgZnVuY3Rpb24gY29tcHJlc3NMWihwbGFpbjogc3RyaW5nKSB7XG4gICAgbGV0IGN1cl9zdGF0ZSA9IEFycmF5LmZyb20oQXJyYXkoMTApLCAoKSA9PiBBcnJheSgxMCkuZmlsbChudWxsKSk7XG4gICAgbGV0IG5ld19zdGF0ZSA9IEFycmF5LmZyb20oQXJyYXkoMTApLCAoKSA9PiBBcnJheSgxMCkpO1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZ1bmN0aW9uIHNldChzdGF0ZSwgaSwgaiwgc3RyKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBzdGF0ZVtpXVtqXTtcbiAgICAgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCB8fCBzdHIubGVuZ3RoIDwgY3VycmVudC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN0YXRlW2ldW2pdID0gc3RyO1xuICAgICAgICB9IGVsc2UgaWYgKHN0ci5sZW5ndGggPT09IGN1cnJlbnQubGVuZ3RoICYmIE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcbiAgICAgICAgICAgIC8vIGlmIHR3byBzdHJpbmdzIGFyZSB0aGUgc2FtZSBsZW5ndGgsIHBpY2sgcmFuZG9tbHkgc28gdGhhdFxuICAgICAgICAgICAgLy8gd2UgZ2VuZXJhdGUgbW9yZSBwb3NzaWJsZSBpbnB1dHMgdG8gQ29tcHJlc3Npb24gSUlcbiAgICAgICAgICAgIHN0YXRlW2ldW2pdID0gc3RyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaW5pdGlhbCBzdGF0ZSBpcyBhIGxpdGVyYWwgb2YgbGVuZ3RoIDFcbiAgICBjdXJfc3RhdGVbMF1bMV0gPSBcIlwiO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBwbGFpbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiBuZXdfc3RhdGUpIHtcbiAgICAgICAgICAgIHJvdy5maWxsKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGMgPSBwbGFpbltpXTtcblxuICAgICAgICAvLyBoYW5kbGUgbGl0ZXJhbHNcbiAgICAgICAgZm9yIChsZXQgbGVuZ3RoID0gMTsgbGVuZ3RoIDw9IDk7ICsrbGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmcgPSBjdXJfc3RhdGVbMF1bbGVuZ3RoXTtcbiAgICAgICAgICAgIGlmIChzdHJpbmcgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobGVuZ3RoIDwgOSkge1xuICAgICAgICAgICAgICAgIC8vIGV4dGVuZCBjdXJyZW50IGxpdGVyYWxcbiAgICAgICAgICAgICAgICBzZXQobmV3X3N0YXRlLCAwLCBsZW5ndGggKyAxLCBzdHJpbmcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBuZXcgbGl0ZXJhbFxuICAgICAgICAgICAgICAgIHNldChuZXdfc3RhdGUsIDAsIDEsIHN0cmluZyArIFwiOVwiICsgcGxhaW4uc3Vic3RyaW5nKGkgLSA5LCBpKSArIFwiMFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgb2Zmc2V0ID0gMTsgb2Zmc2V0IDw9IE1hdGgubWluKDksIGkpOyArK29mZnNldCkge1xuICAgICAgICAgICAgICAgIGlmIChwbGFpbltpIC0gb2Zmc2V0XSA9PT0gYykge1xuICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCBuZXcgYmFja3JlZmVyZW5jZVxuICAgICAgICAgICAgICAgICAgICBzZXQobmV3X3N0YXRlLCBvZmZzZXQsIDEsIHN0cmluZyArIGxlbmd0aCArIHBsYWluLnN1YnN0cmluZyhpIC0gbGVuZ3RoLCBpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIGJhY2tyZWZlcmVuY2VzXG4gICAgICAgIGZvciAobGV0IG9mZnNldCA9IDE7IG9mZnNldCA8PSA5OyArK29mZnNldCkge1xuICAgICAgICAgICAgZm9yIChsZXQgbGVuZ3RoID0gMTsgbGVuZ3RoIDw9IDk7ICsrbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nID0gY3VyX3N0YXRlW29mZnNldF1bbGVuZ3RoXTtcbiAgICAgICAgICAgICAgICBpZiAoc3RyaW5nID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHBsYWluW2kgLSBvZmZzZXRdID09PSBjKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPCA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBleHRlbmQgY3VycmVudCBiYWNrcmVmZXJlbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQobmV3X3N0YXRlLCBvZmZzZXQsIGxlbmd0aCArIDEsIHN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCBuZXcgYmFja3JlZmVyZW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0KG5ld19zdGF0ZSwgb2Zmc2V0LCAxLCBzdHJpbmcgKyBcIjlcIiArIG9mZnNldCArIFwiMFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IG5ldyBsaXRlcmFsXG4gICAgICAgICAgICAgICAgc2V0KG5ld19zdGF0ZSwgMCwgMSwgc3RyaW5nICsgbGVuZ3RoICsgb2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgIC8vIGVuZCBjdXJyZW50IGJhY2tyZWZlcmVuY2UgYW5kIHN0YXJ0IG5ldyBiYWNrcmVmZXJlbmNlXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbmV3X29mZnNldCA9IDE7IG5ld19vZmZzZXQgPD0gTWF0aC5taW4oOSwgaSk7ICsrbmV3X29mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGxhaW5baSAtIG5ld19vZmZzZXRdID09PSBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQobmV3X3N0YXRlLCBuZXdfb2Zmc2V0LCAxLCBzdHJpbmcgKyBsZW5ndGggKyBvZmZzZXQgKyBcIjBcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0bXBfc3RhdGUgPSBuZXdfc3RhdGU7XG4gICAgICAgIG5ld19zdGF0ZSA9IGN1cl9zdGF0ZTtcbiAgICAgICAgY3VyX3N0YXRlID0gdG1wX3N0YXRlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBudWxsO1xuXG4gICAgZm9yIChsZXQgbGVuID0gMTsgbGVuIDw9IDk7ICsrbGVuKSB7XG4gICAgICAgIGxldCBzdHJpbmcgPSBjdXJfc3RhdGVbMF1bbGVuXTtcbiAgICAgICAgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0cmluZyArPSBsZW4gKyBwbGFpbi5zdWJzdHJpbmcocGxhaW4ubGVuZ3RoIC0gbGVuLCBwbGFpbi5sZW5ndGgpO1xuICAgICAgICBpZiAocmVzdWx0ID09IG51bGwgfHwgc3RyaW5nLmxlbmd0aCA8IHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHN0cmluZztcbiAgICAgICAgfSBlbHNlIGlmIChzdHJpbmcubGVuZ3RoID09IHJlc3VsdC5sZW5ndGggJiYgTWF0aC5yYW5kb20oKSA8IDAuNSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgb2Zmc2V0ID0gMTsgb2Zmc2V0IDw9IDk7ICsrb2Zmc2V0KSB7XG4gICAgICAgIGZvciAobGV0IGxlbiA9IDE7IGxlbiA8PSA5OyArK2xlbikge1xuICAgICAgICAgICAgbGV0IHN0cmluZyA9IGN1cl9zdGF0ZVtvZmZzZXRdW2xlbl07XG4gICAgICAgICAgICBpZiAoc3RyaW5nID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RyaW5nICs9IGxlbiArIFwiXCIgKyBvZmZzZXQ7XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09IG51bGwgfHwgc3RyaW5nLmxlbmd0aCA8IHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzdHJpbmc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmluZy5sZW5ndGggPT0gcmVzdWx0Lmxlbmd0aCAmJiBNYXRoLnJhbmRvbSgpIDwgMC41KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc3RyaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiByZXN1bHQgPz8gXCJcIjtcbn0iXX0=