export function generateIPAddresses(s) {
    const result = [];
    const generateIPAddressesRecursively = (remaining, octets, count) => {
        if (count === 4) {
            if (remaining === '') {
                result.push(octets.join('.'));
            }
            return;
        }
        for (let i = 1; i <= 3 && i <= remaining.length; i++) {
            const octetStr = remaining.substring(0, i);
            const octet = parseInt(octetStr);
            if (octet >= 0 && octet <= 255 && !(octetStr.length > 1 && octetStr.startsWith('0'))) {
                generateIPAddressesRecursively(remaining.substring(i), [...octets, octetStr], count + 1);
            }
        }
    };
    generateIPAddressesRecursively(s, [], 0);
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVJUEFkZHJlc3Nlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jY3QvZ2VuZXJhdGVJUEFkZHJlc3Nlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFVBQVUsbUJBQW1CLENBQUMsQ0FBUztJQUN6QyxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFFNUIsTUFBTSw4QkFBOEIsR0FBRyxDQUFDLFNBQWlCLEVBQUUsTUFBZ0IsRUFBRSxLQUFhLEVBQUUsRUFBRTtRQUMxRixJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFDYixJQUFJLFNBQVMsS0FBSyxFQUFFLEVBQUU7Z0JBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsT0FBTztTQUNWO1FBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsRCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMzQyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFakMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDbEYsOEJBQThCLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLFFBQVEsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM1RjtTQUNKO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsOEJBQThCLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QyxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlSVBBZGRyZXNzZXMoczogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgY29uc3QgZ2VuZXJhdGVJUEFkZHJlc3Nlc1JlY3Vyc2l2ZWx5ID0gKHJlbWFpbmluZzogc3RyaW5nLCBvY3RldHM6IHN0cmluZ1tdLCBjb3VudDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChjb3VudCA9PT0gNCkge1xuICAgICAgICAgICAgaWYgKHJlbWFpbmluZyA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvY3RldHMuam9pbignLicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDMgJiYgaSA8PSByZW1haW5pbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG9jdGV0U3RyID0gcmVtYWluaW5nLnN1YnN0cmluZygwLCBpKTtcbiAgICAgICAgICAgIGNvbnN0IG9jdGV0ID0gcGFyc2VJbnQob2N0ZXRTdHIpO1xuXG4gICAgICAgICAgICBpZiAob2N0ZXQgPj0gMCAmJiBvY3RldCA8PSAyNTUgJiYgIShvY3RldFN0ci5sZW5ndGggPiAxICYmIG9jdGV0U3RyLnN0YXJ0c1dpdGgoJzAnKSkpIHtcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUlQQWRkcmVzc2VzUmVjdXJzaXZlbHkocmVtYWluaW5nLnN1YnN0cmluZyhpKSwgWy4uLm9jdGV0cywgb2N0ZXRTdHJdLCBjb3VudCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGdlbmVyYXRlSVBBZGRyZXNzZXNSZWN1cnNpdmVseShzLCBbXSwgMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn0iXX0=