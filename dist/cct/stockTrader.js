// taken from https://github.com/alainbryden/bitburner-scripts/blob/main/Tasks/contractor.js.solver.js
export function stock1(data) {
    let maxCur = 0;
    let maxSoFar = 0;
    for (let i = 1; i < data.length; ++i) {
        maxCur = Math.max(0, (maxCur += data[i] - data[i - 1]));
        maxSoFar = Math.max(maxCur, maxSoFar);
    }
    return maxSoFar.toString();
}
export function stock2(data) {
    let profit = 0;
    for (let p = 1; p < data.length; ++p) {
        profit += Math.max(data[p] - data[p - 1], 0);
    }
    return profit.toString();
}
export function stock3(data) {
    let hold1 = Number.MIN_SAFE_INTEGER;
    let hold2 = Number.MIN_SAFE_INTEGER;
    let release1 = 0;
    let release2 = 0;
    for (const price of data) {
        release2 = Math.max(release2, hold2 + price);
        hold2 = Math.max(hold2, release1 - price);
        release1 = Math.max(release1, hold1 + price);
        hold1 = Math.max(hold1, price * -1);
    }
    return release2.toString();
}
export function stock4(data) {
    const k = data[0];
    const prices = data[1];
    const len = prices.length;
    if (len < 2) {
        return 0;
    }
    if (k > len / 2) {
        let res = 0;
        for (let i = 1; i < len; ++i) {
            res += Math.max(prices[i] - prices[i - 1], 0);
        }
        return res;
    }
    const hold = [];
    const rele = [];
    hold.length = k + 1;
    rele.length = k + 1;
    for (let i = 0; i <= k; ++i) {
        hold[i] = Number.MIN_SAFE_INTEGER;
        rele[i] = 0;
    }
    let cur;
    for (let i = 0; i < len; ++i) {
        cur = prices[i];
        for (let j = k; j > 0; --j) {
            rele[j] = Math.max(rele[j], hold[j] + cur);
            hold[j] = Math.max(hold[j], rele[j - 1] - cur);
        }
    }
    return rele[k];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2tUcmFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2N0L3N0b2NrVHJhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNHQUFzRztBQUV0RyxNQUFNLFVBQVUsTUFBTSxDQUFDLElBQVM7SUFDNUIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFBO0lBQ2QsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFBO0lBQ2hCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ2xDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdkQsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0tBQ3hDO0lBQ0QsT0FBTyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUE7QUFDOUIsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsSUFBUztJQUM1QixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUE7SUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtRQUNsQyxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtLQUMvQztJQUNELE9BQU8sTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFBO0FBQzVCLENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFDLElBQVM7SUFDNUIsSUFBSSxLQUFLLEdB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QUMsQ0FBQyxDQUFDLENBQUE7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FsYWluYnJ5ZGVuL2JpdGJ1cm5lci1zY3JpcHRzL2Jsb2IvbWFpbi9UYXNrcy9jb250cmFjdG9yLmpzLnNvbHZlci5qc1xuXG5leHBvcnQgZnVuY3Rpb24gc3RvY2sxKGRhdGE6IGFueSkge1xuICAgIGxldCBtYXhDdXIgPSAwXG4gICAgbGV0IG1heFNvRmFyID0gMFxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuICAgICAgICBtYXhDdXIgPSBNYXRoLm1heCgwLCAobWF4Q3VyICs9IGRhdGFbaV0gLSBkYXRhW2kgLSAxXSkpXG4gICAgICAgIG1heFNvRmFyID0gTWF0aC5tYXgobWF4Q3VyLCBtYXhTb0ZhcilcbiAgICB9XG4gICAgcmV0dXJuIG1heFNvRmFyLnRvU3RyaW5nKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b2NrMihkYXRhOiBhbnkpIHtcbiAgICBsZXQgcHJvZml0ID0gMFxuICAgIGZvciAobGV0IHAgPSAxOyBwIDwgZGF0YS5sZW5ndGg7ICsrcCkge1xuICAgICAgICBwcm9maXQgKz0gTWF0aC5tYXgoZGF0YVtwXSAtIGRhdGFbcCAtIDFdLCAwKVxuICAgIH1cbiAgICByZXR1cm4gcHJvZml0LnRvU3RyaW5nKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b2NrMyhkYXRhOiBhbnkpIHtcbiAgICBsZXQgaG9sZDEgPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxuICAgIGxldCBob2xkMiA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG4gICAgbGV0IHJlbGVhc2UxID0gMFxuICAgIGxldCByZWxlYXNlMiA9IDBcbiAgICBmb3IgKGNvbnN0IHByaWNlIG9mIGRhdGEpIHtcbiAgICAgICAgcmVsZWFzZTIgPSBNYXRoLm1heChyZWxlYXNlMiwgaG9sZDIgKyBwcmljZSlcbiAgICAgICAgaG9sZDIgPSBNYXRoLm1heChob2xkMiwgcmVsZWFzZTEgLSBwcmljZSlcbiAgICAgICAgcmVsZWFzZTEgPSBNYXRoLm1heChyZWxlYXNlMSwgaG9sZDEgKyBwcmljZSlcbiAgICAgICAgaG9sZDEgPSBNYXRoLm1heChob2xkMSwgcHJpY2UgKiAtMSlcbiAgICB9XG4gICAgcmV0dXJuIHJlbGVhc2UyLnRvU3RyaW5nKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b2NrNChkYXRhOiBhbnkpIHtcbiAgICBjb25zdCBrID0gZGF0YVswXVxuICAgIGNvbnN0IHByaWNlcyA9IGRhdGFbMV1cbiAgICBjb25zdCBsZW4gPSBwcmljZXMubGVuZ3RoXG4gICAgaWYgKGxlbiA8IDIpIHtcbiAgICAgICAgcmV0dXJuIDBcbiAgICB9XG4gICAgaWYgKGsgPiBsZW4gLyAyKSB7XG4gICAgICAgIGxldCByZXMgPSAwXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIHJlcyArPSBNYXRoLm1heChwcmljZXNbaV0gLSBwcmljZXNbaSAtIDFdLCAwKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNcbiAgICB9XG4gICAgY29uc3QgaG9sZCA9IFtdXG4gICAgY29uc3QgcmVsZSA9IFtdXG4gICAgaG9sZC5sZW5ndGggPSBrICsgMVxuICAgIHJlbGUubGVuZ3RoID0gayArIDFcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBrOyArK2kpIHtcbiAgICAgICAgaG9sZFtpXSA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG4gICAgICAgIHJlbGVbaV0gPSAwXG4gICAgfVxuICAgIGxldCBjdXJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIGN1ciA9IHByaWNlc1tpXVxuICAgICAgICBmb3IgKGxldCBqID0gazsgaiA+IDA7IC0taikge1xuICAgICAgICAgICAgcmVsZVtqXSA9IE1hdGgubWF4KHJlbGVbal0sIGhvbGRbal0gKyBjdXIpXG4gICAgICAgICAgICBob2xkW2pdID0gTWF0aC5tYXgoaG9sZFtqXSwgcmVsZVtqIC0gMV0gLSBjdXIpXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlbGVba11cbn0iXX0=