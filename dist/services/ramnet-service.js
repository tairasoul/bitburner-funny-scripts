import RamNet from "/general/ramnet";
import Multiport from "/general/multiport";
class RamnetService {
    #ns;
    #requests;
    #responses;
    ramnet;
    constructor(ns, requests, responses) {
        this.#ns = ns;
        this.#requests = requests;
        this.#responses = responses;
        this.ramnet = new RamNet(ns);
    }
    async handleRequests() {
        while (true) {
            await this.#ns.sleep(1);
            if (!this.#requests.empty()) {
                await this.handleMessage(JSON.parse(this.#requests.read()));
            }
        }
    }
    async handleMessage(message) {
        switch (message.message) {
            case "get":
                switch (message.value) {
                    case "totalRam":
                        this.#responses.writeEmpty({
                            pid: message.pid,
                            totalRam: this.ramnet.totalRam
                        });
                        break;
                    case "maxRam":
                        this.#responses.writeEmpty({
                            pid: message.pid,
                            maxRam: this.ramnet.maxRam
                        });
                        break;
                    case "maxBlockSize":
                        this.#responses.writeEmpty({
                            pid: message.pid,
                            maxBlockSize: this.ramnet.maxBlockSize
                        });
                        break;
                    case "clone":
                        this.#responses.writeEmpty({
                            pid: message.pid,
                            clone: this.ramnet.clone
                        });
                        break;
                }
                break;
            case "assign":
                this.ramnet.assign(message.job);
                this.#responses.writeEmpty({
                    pid: message.pid,
                    result: "assignedJob",
                    jobAssigned: message.job
                });
                break;
            case "finish":
                this.ramnet.finish(message.job);
                this.#responses.writeEmpty({
                    pid: message.pid,
                    result: "finishedJob",
                    jobFinished: message.job
                });
                break;
            case "getBlock":
                this.#responses.writeEmpty({
                    pid: message.pid,
                    block: this.ramnet.getBlock(message.block)
                });
                break;
            case "hasBlock":
                this.#responses.writeEmpty({
                    pid: message.pid,
                    result: this.ramnet.hasBlock(message.block)
                });
                break;
            case "updateRamnet":
                await this.ramnet.update();
                break;
        }
    }
}
export async function main(ns) {
    ns.disableLog("ALL");
    const requests = new Multiport(ns, { start: 201, end: 300 });
    const responses = new Multiport(ns, { start: 301, end: 400 });
    const service = new RamnetService(ns, requests, responses);
    await service.ramnet.init();
    await service.handleRequests();
}
//# sourceMappingURL=data:application/json;base64,