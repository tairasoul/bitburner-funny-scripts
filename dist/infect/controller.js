import Communicator from "/port-registry/classes/communicator";
export async function main(ns) {
    ns.disableLog("ALL");
    const targetServer = ns.args[0];
    const portComms = new Communicator(ns);
    const portUsed = (await portComms.assignFirstAvailable(1)).assignedPorts[0];
    ns.atExit(() => {
        portComms.unassignPorts([portUsed]);
        ns.rm(`/lock/controllers/${targetServer}.txt`, "home");
    });
    const port = ns.getPortHandle(portUsed);
    port.clear();
    await port.write(targetServer);
    const grow = "/infect/worms/grow.js";
    const hack = "/infect/worms/hack.js";
    const weaken = "/infect/worms/weaken.js";
    const minMoney = ns.getServerMoneyAvailable(targetServer);
    while (true) {
        await ns.sleep(1);
        if (ns.getServerMoneyAvailable(targetServer) < minMoney) {
            ns.print(`Growing ${targetServer}'s money.`);
            while (true) {
                await port.write(targetServer);
                await ns.sleep(1);
                await deployScript(ns, grow, targetServer, portUsed);
                await port.nextWrite();
                port.clear();
                if (ns.getServerMoneyAvailable(targetServer) > minMoney * 2)
                    break;
            }
        }
        if (ns.getServerSecurityLevel(targetServer) > ns.getServerMinSecurityLevel(targetServer) * 1.5) {
            ns.print(`Weakening ${targetServer}.`);
            while (true) {
                await port.write(targetServer);
                await ns.sleep(1);
                await deployScript(ns, weaken, targetServer, portUsed);
                await port.nextWrite();
                port.clear();
                if (ns.getServerSecurityLevel(targetServer) <= ns.getServerMinSecurityLevel(targetServer))
                    break;
            }
        }
        ns.print(`Hacking ${targetServer}.`);
        while (true) {
            await port.write(targetServer);
            await ns.sleep(1);
            await deployScript(ns, hack, targetServer, portUsed);
            await port.nextWrite();
            port.clear();
            if (ns.getServerSecurityLevel(targetServer) > ns.getServerMinSecurityLevel(targetServer) * 1.5)
                break;
            if (ns.getServerMoneyAvailable(targetServer) < minMoney * 2)
                break;
        }
    }
}
async function deployScript(ns, script, server, ...args) {
    const scriptRam = ns.getScriptRam(script, "home");
    const available = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);
    const threads = Math.floor(available / scriptRam);
    if (!ns.fileExists(script, server))
        ns.scp(script, server, "home");
    ns.exec(script, server, threads, ...args);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmZlY3QvY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFlBQVksTUFBTSxxQ0FBcUMsQ0FBQztBQUUvRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDcEIsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUMxQyxNQUFNLFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVFLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1gsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFDbkMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsWUFBWSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNiLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUM5QixNQUFNLElBQUksR0FBRyx1QkFBdUIsQ0FBQztJQUNyQyxNQUFNLElBQUksR0FBRyx1QkFBdUIsQ0FBQztJQUNyQyxNQUFNLE1BQU0sR0FBRyx5QkFBeUIsQ0FBQztJQUN6QyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFD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RUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1FBQzlCLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBucyBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgQ29tbXVuaWNhdG9yIGZyb20gXCIvcG9ydC1yZWdpc3RyeS9jbGFzc2VzL2NvbW11bmljYXRvclwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogbnMuTlMpIHtcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpXG4gICAgY29uc3QgdGFyZ2V0U2VydmVyID0gbnMuYXJnc1swXSBhcyBzdHJpbmc7XG4gICAgY29uc3QgcG9ydENvbW1zID0gbmV3IENvbW11bmljYXRvcihucyk7XG4gICAgY29uc3QgcG9ydFVzZWQgPSAoYXdhaXQgcG9ydENvbW1zLmFzc2lnbkZpcnN0QXZhaWxhYmxlKDEpKS5hc3NpZ25lZFBvcnRzWzBdO1xuICAgIG5zLmF0RXhpdCgoKSA9PiB7XG4gICAgICAgIHBvcnRDb21tcy51bmFzc2lnblBvcnRzKFtwb3J0VXNlZF0pXG4gICAgICAgIG5zLnJtKGAvbG9jay9jb250cm9sbGVycy8ke3RhcmdldFNlcnZlcn0udHh0YCwgXCJob21lXCIpO1xuICAgIH0pO1xuICAgIGNvbnN0IHBvcnQgPSBucy5nZXRQb3J0SGFuZGxlKHBvcnRVc2VkKTtcbiAgICBwb3J0LmNsZWFyKCk7XG4gICAgYXdhaXQgcG9ydC53cml0ZSh0YXJnZXRTZXJ2ZXIpXG4gICAgY29uc3QgZ3JvdyA9IFwiL2luZmVjdC93b3Jtcy9ncm93LmpzXCI7XG4gICAgY29uc3QgaGFjayA9IFwiL2luZmVjdC93b3Jtcy9oYWNrLmpzXCI7XG4gICAgY29uc3Qgd2Vha2VuID0gXCIvaW5mZWN0L3dvcm1zL3dlYWtlbi5qc1wiO1xuICAgIGNvbnN0IG1pbk1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0U2VydmVyKTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBhd2FpdCBucy5zbGVlcCgxKTtcbiAgICAgICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldFNlcnZlcikgPCBtaW5Nb25leSkge1xuICAgICAgICAgICAgbnMucHJpbnQoYEdyb3dpbmcgJHt0YXJnZXRTZXJ2ZXJ9J3MgbW9uZXkuYCk7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHBvcnQud3JpdGUodGFyZ2V0U2VydmVyKVxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDEpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGRlcGxveVNjcmlwdChucywgZ3JvdywgdGFyZ2V0U2VydmVyLCBwb3J0VXNlZCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgcG9ydC5uZXh0V3JpdGUoKTtcbiAgICAgICAgICAgICAgICBwb3J0LmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldFNlcnZlcikgPiBtaW5Nb25leSAqIDIpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgPiBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKiAxLjUpIHtcbiAgICAgICAgICAgIG5zLnByaW50KGBXZWFrZW5pbmcgJHt0YXJnZXRTZXJ2ZXJ9LmApO1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBwb3J0LndyaXRlKHRhcmdldFNlcnZlcilcbiAgICAgICAgICAgICAgICBhd2FpdCBucy5zbGVlcCgxKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBkZXBsb3lTY3JpcHQobnMsIHdlYWtlbiwgdGFyZ2V0U2VydmVyLCBwb3J0VXNlZCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgcG9ydC5uZXh0V3JpdGUoKTtcbiAgICAgICAgICAgICAgICBwb3J0LmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSA8PSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5zLnByaW50KGBIYWNraW5nICR7dGFyZ2V0U2VydmVyfS5gKTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGF3YWl0IHBvcnQud3JpdGUodGFyZ2V0U2VydmVyKVxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMSk7XG4gICAgICAgICAgICBhd2FpdCBkZXBsb3lTY3JpcHQobnMsIGhhY2ssIHRhcmdldFNlcnZlciwgcG9ydFVzZWQpO1xuICAgICAgICAgICAgYXdhaXQgcG9ydC5uZXh0V3JpdGUoKTtcbiAgICAgICAgICAgIHBvcnQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgPiBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKiAxLjUpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0U2VydmVyKSA8IG1pbk1vbmV5ICogMilcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVwbG95U2NyaXB0KG5zOiBucy5OUywgc2NyaXB0OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGNvbnN0IHNjcmlwdFJhbSA9IG5zLmdldFNjcmlwdFJhbShzY3JpcHQsIFwiaG9tZVwiKTtcbiAgICBjb25zdCBhdmFpbGFibGUgPSBucy5nZXRTZXJ2ZXJNYXhSYW0oc2VydmVyKSAtIG5zLmdldFNlcnZlclVzZWRSYW0oc2VydmVyKTtcbiAgICBjb25zdCB0aHJlYWRzID0gTWF0aC5mbG9vcihhdmFpbGFibGUgLyBzY3JpcHRSYW0pO1xuICAgIGlmICghbnMuZmlsZUV4aXN0cyhzY3JpcHQsIHNlcnZlcikpXG4gICAgICAgIG5zLnNjcChzY3JpcHQsIHNlcnZlciwgXCJob21lXCIpO1xuICAgIG5zLmV4ZWMoc2NyaXB0LCBzZXJ2ZXIsIHRocmVhZHMsIC4uLmFyZ3MpO1xufSJdfQ==