import Communicator from "/service-communicators/port-registry";
export async function main(ns) {
    //ns.disableLog("ALL")
    const targetServer = ns.args[0];
    const commsPort = ns.args[1];
    const comms = ns.getPortHandle(commsPort);
    await comms.nextWrite();
    const controllerAmount = comms.peek();
    const portComms = new Communicator(ns);
    const ports = (await portComms.assignFirstAvailable(2));
    const serverData = ports.assignedPorts[0];
    const returnData = ports.assignedPorts[1];
    ns.atExit(() => {
        portComms.unassignPorts(ports.assignedPorts);
        ns.rm(`/lock/controllers/${targetServer}.txt`, "home");
    });
    const port = ns.getPortHandle(serverData);
    port.clear();
    port.write(targetServer);
    await ns.sleep(50);
    const returnPort = ns.getPortHandle(returnData);
    const grow = "/infect/worms/grow.js";
    const hack = "/infect/worms/hack.js";
    const weaken = "/infect/worms/weaken.js";
    const ram = (ns.getServerMaxRam("Controller-Worms") / controllerAmount) * 0.945;
    ns.scp([grow, hack, weaken], "Controller-Worms", "home");
    const minMoney = ns.getServerMaxMoney(targetServer) * 0.5;
    while (true) {
        await ns.sleep(1);
        if (ns.getServerMoneyAvailable(targetServer) < minMoney) {
            while (true) {
                await deployScript(ns, grow, "Controller-Worms", ram, serverData, returnData);
                await returnPort.nextWrite();
                returnPort.clear();
                if (ns.getServerMoneyAvailable(targetServer) > minMoney * 2)
                    break;
            }
        }
        if (ns.getServerSecurityLevel(targetServer) > ns.getServerMinSecurityLevel(targetServer) * 1.5) {
            while (true) {
                await deployScript(ns, weaken, "Controller-Worms", ram, serverData, returnData);
                await returnPort.nextWrite();
                returnPort.clear();
                if (ns.getServerSecurityLevel(targetServer) <= ns.getServerMinSecurityLevel(targetServer))
                    break;
            }
        }
        while (true) {
            await deployScript(ns, hack, "Controller-Worms", ram, serverData, returnData);
            await returnPort.nextWrite();
            returnPort.clear();
            if (ns.getServerSecurityLevel(targetServer) > ns.getServerMinSecurityLevel(targetServer) * 1.5)
                break;
            if (ns.getServerMoneyAvailable(targetServer) < minMoney * 2)
                break;
        }
    }
}
async function deployScript(ns, script, server, maxRam, ...args) {
    const scriptRam = ns.getScriptRam(script, "home");
    const threads = Math.floor(maxRam / scriptRam);
    ns.exec(script, server, threads, ...args);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmZlY3QvY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFlBQVksTUFBTSxzQ0FBc0MsQ0FBQztBQUVoRSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLHNCQUFzQjtJQUN0QixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQyxNQUFNLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN4QixNQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQVksQ0FBQztJQUNoRCxNQUFNLFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxNQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1gsU0FBUyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDNUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsWUFBWSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsYUFBYSxD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LE1BQU0sQ0FBQyxDQUFDO0lBQ2xELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5zIGZyb20gXCJAbnNcIjtcbmltcG9ydCBDb21tdW5pY2F0b3IgZnJvbSBcIi9zZXJ2aWNlLWNvbW11bmljYXRvcnMvcG9ydC1yZWdpc3RyeVwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogbnMuTlMpIHtcbiAgICAvL25zLmRpc2FibGVMb2coXCJBTExcIilcbiAgICBjb25zdCB0YXJnZXRTZXJ2ZXIgPSBucy5hcmdzWzBdIGFzIHN0cmluZztcbiAgICBjb25zdCBjb21tc1BvcnQgPSBucy5hcmdzWzFdIGFzIG51bWJlcjtcbiAgICBjb25zdCBjb21tcyA9IG5zLmdldFBvcnRIYW5kbGUoY29tbXNQb3J0KTtcbiAgICBhd2FpdCBjb21tcy5uZXh0V3JpdGUoKTtcbiAgICBjb25zdCBjb250cm9sbGVyQW1vdW50ID0gY29tbXMucGVlaygpIGFzIG51bWJlcjtcbiAgICBjb25zdCBwb3J0Q29tbXMgPSBuZXcgQ29tbXVuaWNhdG9yKG5zKTtcbiAgICBjb25zdCBwb3J0cyA9IChhd2FpdCBwb3J0Q29tbXMuYXNzaWduRmlyc3RBdmFpbGFibGUoMikpO1xuICAgIGNvbnN0IHNlcnZlckRhdGEgPSBwb3J0cy5hc3NpZ25lZFBvcnRzWzBdO1xuICAgIGNvbnN0IHJldHVybkRhdGEgPSBwb3J0cy5hc3NpZ25lZFBvcnRzWzFdO1xuICAgIG5zLmF0RXhpdCgoKSA9PiB7XG4gICAgICAgIHBvcnRDb21tcy51bmFzc2lnblBvcnRzKHBvcnRzLmFzc2lnbmVkUG9ydHMpXG4gICAgICAgIG5zLnJtKGAvbG9jay9jb250cm9sbGVycy8ke3RhcmdldFNlcnZlcn0udHh0YCwgXCJob21lXCIpO1xuICAgIH0pO1xuICAgIGNvbnN0IHBvcnQgPSBucy5nZXRQb3J0SGFuZGxlKHNlcnZlckRhdGEpO1xuICAgIHBvcnQuY2xlYXIoKTtcbiAgICBwb3J0LndyaXRlKHRhcmdldFNlcnZlcilcbiAgICBhd2FpdCBucy5zbGVlcCg1MCk7XG4gICAgY29uc3QgcmV0dXJuUG9ydCA9IG5zLmdldFBvcnRIYW5kbGUocmV0dXJuRGF0YSk7XG4gICAgY29uc3QgZ3JvdyA9IFwiL2luZmVjdC93b3Jtcy9ncm93LmpzXCI7XG4gICAgY29uc3QgaGFjayA9IFwiL2luZmVjdC93b3Jtcy9oYWNrLmpzXCI7XG4gICAgY29uc3Qgd2Vha2VuID0gXCIvaW5mZWN0L3dvcm1zL3dlYWtlbi5qc1wiO1xuICAgIGNvbnN0IHJhbSA9IChucy5nZXRTZXJ2ZXJNYXhSYW0oXCJDb250cm9sbGVyLVdvcm1zXCIpIC8gY29udHJvbGxlckFtb3VudCkgKiAwLjk0NTtcbiAgICBucy5zY3AoW2dyb3csIGhhY2ssIHdlYWtlbl0sIFwiQ29udHJvbGxlci1Xb3Jtc1wiLCBcImhvbWVcIilcbiAgICBjb25zdCBtaW5Nb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldFNlcnZlcikgKiAwLjU7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMSk7XG4gICAgICAgIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpIDwgbWluTW9uZXkpIHtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZGVwbG95U2NyaXB0KG5zLCBncm93LCBcIkNvbnRyb2xsZXItV29ybXNcIiwgcmFtLCBzZXJ2ZXJEYXRhLCByZXR1cm5EYXRhKTtcbiAgICAgICAgICAgICAgICBhd2FpdCByZXR1cm5Qb3J0Lm5leHRXcml0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVyblBvcnQuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0U2VydmVyKSA+IG1pbk1vbmV5ICogMilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSA+IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSAqIDEuNSkge1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBkZXBsb3lTY3JpcHQobnMsIHdlYWtlbiwgXCJDb250cm9sbGVyLVdvcm1zXCIsIHJhbSwgc2VydmVyRGF0YSwgcmV0dXJuRGF0YSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgcmV0dXJuUG9ydC5uZXh0V3JpdGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm5Qb3J0LmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSA8PSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBhd2FpdCBkZXBsb3lTY3JpcHQobnMsIGhhY2ssIFwiQ29udHJvbGxlci1Xb3Jtc1wiLCByYW0sIHNlcnZlckRhdGEsIHJldHVybkRhdGEpO1xuICAgICAgICAgICAgYXdhaXQgcmV0dXJuUG9ydC5uZXh0V3JpdGUoKTtcbiAgICAgICAgICAgIHJldHVyblBvcnQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgPiBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKiAxLjUpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0U2VydmVyKSA8IG1pbk1vbmV5ICogMilcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVwbG95U2NyaXB0KG5zOiBucy5OUywgc2NyaXB0OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nLCBtYXhSYW06IG51bWJlciwgLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCBzY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBcImhvbWVcIik7XG4gICAgY29uc3QgdGhyZWFkcyA9IE1hdGguZmxvb3IobWF4UmFtIC8gc2NyaXB0UmFtKTtcbiAgICBucy5leGVjKHNjcmlwdCwgc2VydmVyLCB0aHJlYWRzLCAuLi5hcmdzKTtcbn0iXX0=