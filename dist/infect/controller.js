import Communicator from "/port-registry/classes/communicator";
export async function main(ns) {
    //ns.disableLog("ALL")
    const targetServer = ns.args[0];
    const commsPort = ns.args[1];
    const comms = ns.getPortHandle(commsPort);
    await comms.nextWrite();
    const controllerAmount = comms.peek();
    const portComms = new Communicator(ns);
    const ports = (await portComms.assignFirstAvailable(2));
    const serverData = ports.assignedPorts[0];
    const returnData = ports.assignedPorts[1];
    ns.atExit(() => {
        portComms.unassignPorts(ports.assignedPorts);
        ns.rm(`/lock/controllers/${targetServer}.txt`, "home");
    });
    const port = ns.getPortHandle(serverData);
    port.clear();
    port.write(targetServer);
    await ns.sleep(50);
    const returnPort = ns.getPortHandle(returnData);
    const grow = "/infect/worms/grow.js";
    const hack = "/infect/worms/hack.js";
    const weaken = "/infect/worms/weaken.js";
    ns.scp([grow, hack, weaken], "Controller-Worms", "home");
    const minMoney = ns.getServerMoneyAvailable(targetServer);
    while (true) {
        await ns.sleep(1);
        if (ns.getServerMoneyAvailable(targetServer) < minMoney) {
            while (true) {
                await deployScript(ns, grow, "Controller-Worms", controllerAmount, serverData, returnData);
                await returnPort.nextWrite();
                returnPort.clear();
                if (ns.getServerMoneyAvailable(targetServer) > minMoney * 2)
                    break;
            }
        }
        if (ns.getServerSecurityLevel(targetServer) > ns.getServerMinSecurityLevel(targetServer) * 1.5) {
            while (true) {
                await deployScript(ns, weaken, "Controller-Worms", controllerAmount, serverData, returnData);
                await returnPort.nextWrite();
                returnPort.clear();
                if (ns.getServerSecurityLevel(targetServer) <= ns.getServerMinSecurityLevel(targetServer))
                    break;
            }
        }
        while (true) {
            await deployScript(ns, hack, "Controller-Worms", controllerAmount, serverData, returnData);
            await returnPort.nextWrite();
            returnPort.clear();
            if (ns.getServerSecurityLevel(targetServer) > ns.getServerMinSecurityLevel(targetServer) * 1.5)
                break;
            if (ns.getServerMoneyAvailable(targetServer) < minMoney * 2)
                break;
        }
    }
}
async function deployScript(ns, script, server, controllers, ...args) {
    const scriptRam = ns.getScriptRam(script, "home");
    const available = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);
    const threads = Math.floor(available / scriptRam / controllers);
    ns.exec(script, server, threads, ...args);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmZlY3QvY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFlBQVksTUFBTSxxQ0FBcUMsQ0FBQztBQUUvRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLHNCQUFzQjtJQUN0QixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQyxNQUFNLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN4QixNQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQVksQ0FBQztJQUNoRCxNQUFNLFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxNQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1gsU0FBUyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDNUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsWUFBWSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsYUFBYSxD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LE1BQU0sQ0FBQyxDQUFDO0lBQzNFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUMsQ0FBQztJQUNoRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBucyBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgQ29tbXVuaWNhdG9yIGZyb20gXCIvcG9ydC1yZWdpc3RyeS9jbGFzc2VzL2NvbW11bmljYXRvclwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogbnMuTlMpIHtcbiAgICAvL25zLmRpc2FibGVMb2coXCJBTExcIilcbiAgICBjb25zdCB0YXJnZXRTZXJ2ZXIgPSBucy5hcmdzWzBdIGFzIHN0cmluZztcbiAgICBjb25zdCBjb21tc1BvcnQgPSBucy5hcmdzWzFdIGFzIG51bWJlcjtcbiAgICBjb25zdCBjb21tcyA9IG5zLmdldFBvcnRIYW5kbGUoY29tbXNQb3J0KTtcbiAgICBhd2FpdCBjb21tcy5uZXh0V3JpdGUoKTtcbiAgICBjb25zdCBjb250cm9sbGVyQW1vdW50ID0gY29tbXMucGVlaygpIGFzIG51bWJlcjtcbiAgICBjb25zdCBwb3J0Q29tbXMgPSBuZXcgQ29tbXVuaWNhdG9yKG5zKTtcbiAgICBjb25zdCBwb3J0cyA9IChhd2FpdCBwb3J0Q29tbXMuYXNzaWduRmlyc3RBdmFpbGFibGUoMikpO1xuICAgIGNvbnN0IHNlcnZlckRhdGEgPSBwb3J0cy5hc3NpZ25lZFBvcnRzWzBdO1xuICAgIGNvbnN0IHJldHVybkRhdGEgPSBwb3J0cy5hc3NpZ25lZFBvcnRzWzFdO1xuICAgIG5zLmF0RXhpdCgoKSA9PiB7XG4gICAgICAgIHBvcnRDb21tcy51bmFzc2lnblBvcnRzKHBvcnRzLmFzc2lnbmVkUG9ydHMpXG4gICAgICAgIG5zLnJtKGAvbG9jay9jb250cm9sbGVycy8ke3RhcmdldFNlcnZlcn0udHh0YCwgXCJob21lXCIpO1xuICAgIH0pO1xuICAgIGNvbnN0IHBvcnQgPSBucy5nZXRQb3J0SGFuZGxlKHNlcnZlckRhdGEpO1xuICAgIHBvcnQuY2xlYXIoKTtcbiAgICBwb3J0LndyaXRlKHRhcmdldFNlcnZlcilcbiAgICBhd2FpdCBucy5zbGVlcCg1MCk7XG4gICAgY29uc3QgcmV0dXJuUG9ydCA9IG5zLmdldFBvcnRIYW5kbGUocmV0dXJuRGF0YSk7XG4gICAgY29uc3QgZ3JvdyA9IFwiL2luZmVjdC93b3Jtcy9ncm93LmpzXCI7XG4gICAgY29uc3QgaGFjayA9IFwiL2luZmVjdC93b3Jtcy9oYWNrLmpzXCI7XG4gICAgY29uc3Qgd2Vha2VuID0gXCIvaW5mZWN0L3dvcm1zL3dlYWtlbi5qc1wiO1xuICAgIG5zLnNjcChbZ3JvdywgaGFjaywgd2Vha2VuXSwgXCJDb250cm9sbGVyLVdvcm1zXCIsIFwiaG9tZVwiKVxuICAgIGNvbnN0IG1pbk1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0U2VydmVyKTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBhd2FpdCBucy5zbGVlcCgxKTtcbiAgICAgICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldFNlcnZlcikgPCBtaW5Nb25leSkge1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBkZXBsb3lTY3JpcHQobnMsIGdyb3csIFwiQ29udHJvbGxlci1Xb3Jtc1wiLCBjb250cm9sbGVyQW1vdW50LCBzZXJ2ZXJEYXRhLCByZXR1cm5EYXRhKTtcbiAgICAgICAgICAgICAgICBhd2FpdCByZXR1cm5Qb3J0Lm5leHRXcml0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVyblBvcnQuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0U2VydmVyKSA+IG1pbk1vbmV5ICogMilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSA+IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSAqIDEuNSkge1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBkZXBsb3lTY3JpcHQobnMsIHdlYWtlbiwgXCJDb250cm9sbGVyLVdvcm1zXCIsIGNvbnRyb2xsZXJBbW91bnQsIHNlcnZlckRhdGEsIHJldHVybkRhdGEpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHJldHVyblBvcnQubmV4dFdyaXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuUG9ydC5jbGVhcigpO1xuICAgICAgICAgICAgICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgPD0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXRTZXJ2ZXIpKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgYXdhaXQgZGVwbG95U2NyaXB0KG5zLCBoYWNrLCBcIkNvbnRyb2xsZXItV29ybXNcIiwgY29udHJvbGxlckFtb3VudCwgc2VydmVyRGF0YSwgcmV0dXJuRGF0YSk7XG4gICAgICAgICAgICBhd2FpdCByZXR1cm5Qb3J0Lm5leHRXcml0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuUG9ydC5jbGVhcigpO1xuICAgICAgICAgICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSA+IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSAqIDEuNSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpIDwgbWluTW9uZXkgKiAyKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBkZXBsb3lTY3JpcHQobnM6IG5zLk5TLCBzY3JpcHQ6IHN0cmluZywgc2VydmVyOiBzdHJpbmcsIGNvbnRyb2xsZXJzOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY29uc3Qgc2NyaXB0UmFtID0gbnMuZ2V0U2NyaXB0UmFtKHNjcmlwdCwgXCJob21lXCIpO1xuICAgIGNvbnN0IGF2YWlsYWJsZSA9IG5zLmdldFNlcnZlck1heFJhbShzZXJ2ZXIpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzZXJ2ZXIpO1xuICAgIGNvbnN0IHRocmVhZHMgPSBNYXRoLmZsb29yKGF2YWlsYWJsZSAvIHNjcmlwdFJhbSAvIGNvbnRyb2xsZXJzKTtcbiAgICBucy5leGVjKHNjcmlwdCwgc2VydmVyLCB0aHJlYWRzLCAuLi5hcmdzKTtcbn0iXX0=