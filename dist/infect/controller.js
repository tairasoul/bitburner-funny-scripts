import Communicator from "/port-registry/classes/communicator";
export async function main(ns) {
    ns.disableLog("ALL");
    const targetServer = ns.args[0];
    const portComms = new Communicator(ns);
    const portUsed = (await portComms.assignFirstAvailable(1)).assignedPorts[0];
    ns.atExit(() => {
        portComms.unassignPorts([portUsed]);
        ns.rm(`/lock/controllers/${targetServer}.txt`, "home");
    });
    const port = ns.getPortHandle(portUsed);
    port.clear();
    const grow = "/infect/worms/grow.js";
    const hack = "/infect/worms/hack.js";
    const weaken = "/infect/worms/weaken.js";
    const minMoney = ns.getServerMoneyAvailable(targetServer);
    while (true) {
        await ns.sleep(1);
        if (ns.getServerMoneyAvailable(targetServer) < minMoney) {
            ns.print(`Growing ${targetServer}'s money.`);
            while (true) {
                await port.write(targetServer);
                await ns.sleep(1);
                await deployScript(ns, grow, targetServer, portUsed);
                await port.nextWrite();
                port.clear();
                if (ns.getServerMoneyAvailable(targetServer) > minMoney * 2)
                    break;
            }
        }
        if (ns.getServerSecurityLevel(targetServer) > ns.getServerMinSecurityLevel(targetServer) * 1.5) {
            ns.print(`Weakening ${targetServer}.`);
            while (true) {
                await port.write(targetServer);
                await ns.sleep(1);
                await deployScript(ns, weaken, targetServer, portUsed);
                await port.nextWrite();
                port.clear();
                if (ns.getServerSecurityLevel(targetServer) <= ns.getServerMinSecurityLevel(targetServer))
                    break;
            }
        }
        ns.print(`Hacking ${targetServer}.`);
        while (true) {
            await port.write(targetServer);
            await ns.sleep(1);
            await deployScript(ns, hack, targetServer, portUsed);
            await port.nextWrite();
            port.clear();
            if (ns.getServerSecurityLevel(targetServer) > ns.getServerMinSecurityLevel(targetServer) * 1.5)
                break;
            if (ns.getServerMoneyAvailable(targetServer) < minMoney * 2)
                break;
        }
    }
}
async function deployScript(ns, script, server, ...args) {
    const scriptRam = ns.getScriptRam(script, "home");
    const available = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);
    const threads = Math.floor(available / scriptRam);
    if (!ns.fileExists(script, server))
        ns.scp(script, server, "home");
    ns.exec(script, server, threads, ...args);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmZlY3QvY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFlBQVksTUFBTSxxQ0FBcUMsQ0FBQztBQUUvRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDcEIsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUMxQyxNQUFNLFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVFLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1gsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFDbkMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsWUFBWSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNiLE1BQU0sSUFBSSxHQUFHLHVCQUF1QixDQUFDO0lBQ3JDLE1BQU0sSUFBSSxHQUFHLHVCQUF1QixDQUFDO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLHlCQUF5QixDQUFDO0lBQ3pDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxRCxPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FB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RUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5zIGZyb20gXCJAbnNcIjtcbmltcG9ydCBDb21tdW5pY2F0b3IgZnJvbSBcIi9wb3J0LXJlZ2lzdHJ5L2NsYXNzZXMvY29tbXVuaWNhdG9yXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBucy5OUykge1xuICAgIG5zLmRpc2FibGVMb2coXCJBTExcIilcbiAgICBjb25zdCB0YXJnZXRTZXJ2ZXIgPSBucy5hcmdzWzBdIGFzIHN0cmluZztcbiAgICBjb25zdCBwb3J0Q29tbXMgPSBuZXcgQ29tbXVuaWNhdG9yKG5zKTtcbiAgICBjb25zdCBwb3J0VXNlZCA9IChhd2FpdCBwb3J0Q29tbXMuYXNzaWduRmlyc3RBdmFpbGFibGUoMSkpLmFzc2lnbmVkUG9ydHNbMF07XG4gICAgbnMuYXRFeGl0KCgpID0+IHtcbiAgICAgICAgcG9ydENvbW1zLnVuYXNzaWduUG9ydHMoW3BvcnRVc2VkXSlcbiAgICAgICAgbnMucm0oYC9sb2NrL2NvbnRyb2xsZXJzLyR7dGFyZ2V0U2VydmVyfS50eHRgLCBcImhvbWVcIik7XG4gICAgfSk7XG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUocG9ydFVzZWQpO1xuICAgIHBvcnQuY2xlYXIoKTtcbiAgICBjb25zdCBncm93ID0gXCIvaW5mZWN0L3dvcm1zL2dyb3cuanNcIjtcbiAgICBjb25zdCBoYWNrID0gXCIvaW5mZWN0L3dvcm1zL2hhY2suanNcIjtcbiAgICBjb25zdCB3ZWFrZW4gPSBcIi9pbmZlY3Qvd29ybXMvd2Vha2VuLmpzXCI7XG4gICAgY29uc3QgbWluTW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDEpO1xuICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0U2VydmVyKSA8IG1pbk1vbmV5KSB7XG4gICAgICAgICAgICBucy5wcmludChgR3Jvd2luZyAke3RhcmdldFNlcnZlcn0ncyBtb25leS5gKTtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgcG9ydC53cml0ZSh0YXJnZXRTZXJ2ZXIpXG4gICAgICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgZGVwbG95U2NyaXB0KG5zLCBncm93LCB0YXJnZXRTZXJ2ZXIsIHBvcnRVc2VkKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBwb3J0Lm5leHRXcml0ZSgpO1xuICAgICAgICAgICAgICAgIHBvcnQuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0U2VydmVyKSA+IG1pbk1vbmV5ICogMilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSA+IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSAqIDEuNSkge1xuICAgICAgICAgICAgbnMucHJpbnQoYFdlYWtlbmluZyAke3RhcmdldFNlcnZlcn0uYCk7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHBvcnQud3JpdGUodGFyZ2V0U2VydmVyKVxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDEpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGRlcGxveVNjcmlwdChucywgd2Vha2VuLCB0YXJnZXRTZXJ2ZXIsIHBvcnRVc2VkKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBwb3J0Lm5leHRXcml0ZSgpO1xuICAgICAgICAgICAgICAgIHBvcnQuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBpZiAobnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXRTZXJ2ZXIpIDw9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbnMucHJpbnQoYEhhY2tpbmcgJHt0YXJnZXRTZXJ2ZXJ9LmApO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgYXdhaXQgcG9ydC53cml0ZSh0YXJnZXRTZXJ2ZXIpXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCgxKTtcbiAgICAgICAgICAgIGF3YWl0IGRlcGxveVNjcmlwdChucywgaGFjaywgdGFyZ2V0U2VydmVyLCBwb3J0VXNlZCk7XG4gICAgICAgICAgICBhd2FpdCBwb3J0Lm5leHRXcml0ZSgpO1xuICAgICAgICAgICAgcG9ydC5jbGVhcigpO1xuICAgICAgICAgICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSA+IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSAqIDEuNSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpIDwgbWluTW9uZXkgKiAyKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBkZXBsb3lTY3JpcHQobnM6IG5zLk5TLCBzY3JpcHQ6IHN0cmluZywgc2VydmVyOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY29uc3Qgc2NyaXB0UmFtID0gbnMuZ2V0U2NyaXB0UmFtKHNjcmlwdCwgXCJob21lXCIpO1xuICAgIGNvbnN0IGF2YWlsYWJsZSA9IG5zLmdldFNlcnZlck1heFJhbShzZXJ2ZXIpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzZXJ2ZXIpO1xuICAgIGNvbnN0IHRocmVhZHMgPSBNYXRoLmZsb29yKGF2YWlsYWJsZSAvIHNjcmlwdFJhbSk7XG4gICAgaWYgKCFucy5maWxlRXhpc3RzKHNjcmlwdCwgc2VydmVyKSlcbiAgICAgICAgbnMuc2NwKHNjcmlwdCwgc2VydmVyLCBcImhvbWVcIik7XG4gICAgbnMuZXhlYyhzY3JpcHQsIHNlcnZlciwgdGhyZWFkcywgLi4uYXJncyk7XG59Il19