import Communicator from "/port-registry/classes/communicator";
export async function main(ns) {
    //ns.disableLog("ALL")
    const targetServer = ns.args[0];
    const commsPort = ns.args[1];
    const comms = ns.getPortHandle(commsPort);
    await comms.nextWrite();
    const controllerAmount = comms.peek();
    const portComms = new Communicator(ns);
    const ports = (await portComms.assignFirstAvailable(2));
    const serverData = ports.assignedPorts[0];
    const returnData = ports.assignedPorts[1];
    ns.atExit(() => {
        portComms.unassignPorts(ports.assignedPorts);
        ns.rm(`/lock/controllers/${targetServer}.txt`, "home");
    });
    const port = ns.getPortHandle(serverData);
    port.clear();
    port.write(targetServer);
    await ns.sleep(50);
    const returnPort = ns.getPortHandle(returnData);
    const grow = "/infect/worms/grow.js";
    const hack = "/infect/worms/hack.js";
    const weaken = "/infect/worms/weaken.js";
    ns.scp([grow, hack, weaken], "Controller-Worms", "home");
    const minMoney = ns.getServerMoneyAvailable(targetServer);
    while (true) {
        await ns.sleep(1);
        if (ns.getServerMoneyAvailable(targetServer) < minMoney) {
            while (true) {
                await deployScript(ns, grow, "Controller-Worms", controllerAmount, serverData, returnData);
                await returnPort.nextWrite();
                returnPort.clear();
                if (ns.getServerMoneyAvailable(targetServer) > minMoney * 2)
                    break;
            }
        }
        if (ns.getServerSecurityLevel(targetServer) > ns.getServerMinSecurityLevel(targetServer) * 1.5) {
            while (true) {
                await deployScript(ns, weaken, "Controller-Worms", controllerAmount, serverData, returnData);
                await returnPort.nextWrite();
                returnPort.clear();
                if (ns.getServerSecurityLevel(targetServer) <= ns.getServerMinSecurityLevel(targetServer))
                    break;
            }
        }
        while (true) {
            await deployScript(ns, hack, "Controller-Worms", controllerAmount, serverData, returnData);
            await returnPort.nextWrite();
            returnPort.clear();
            if (ns.getServerSecurityLevel(targetServer) > ns.getServerMinSecurityLevel(targetServer) * 1.5)
                break;
            if (ns.getServerMoneyAvailable(targetServer) < minMoney * 2)
                break;
        }
    }
}
async function deployScript(ns, script, server, controllers, ...args) {
    // this is probably not as efficient as it could be, it doesnt seem to use more than half of the memory on the server
    const scriptRam = ns.getScriptRam(script, "home");
    const available = ns.getServerMaxRam(server) / controllers - ns.getServerUsedRam(server) / controllers;
    const threads = Math.floor(available / scriptRam);
    ns.exec(script, server, threads, ...args);
}
//# sourceMappingURL=data:application/json;base64,