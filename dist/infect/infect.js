import { mapServers, gainAccess } from "/infect/utils.js";
import Communicator from "/service-communicators/port-registry";
let pids = 0;
export async function main(ns) {
    pids = 0;
    const comms = new Communicator(ns);
    const mapped = await mapServers(ns);
    const infectedServers = new Set();
    const portsAssigned = await comms.assignFirstAvailable(1);
    const start = portsAssigned.assignedPorts[0];
    for (const server of mapped) {
        await infectServer(ns, server.name, infectedServers, start);
        await processServers(ns, server, infectedServers, start);
    }
    const elements = [];
    for (const value of infectedServers.values())
        elements.push(value);
    ns.toast(`hacked ${pids} servers!`, "info", 3000);
    ns.toast("completed processing of server list", "success", 2000);
    const portComms = ns.getPortHandle(start);
    await ns.sleep(1000);
    portComms.write(pids);
    await ns.sleep(20000);
    comms.unassignPorts([start]);
}
async function processServers(ns, map, infectedSet, commsStart) {
    for (const mapped of map.sub_servers) {
        await infectServer(ns, mapped.name, infectedSet, commsStart);
        await processServers(ns, mapped, infectedSet, commsStart);
    }
}
async function infectServer(ns, server, infectedSet, commsStart) {
    const script = "/infect/controller.js";
    const canHack = ns.getPlayer().skills.hacking >= ns.getServerRequiredHackingLevel(server);
    if (canHack) {
        const result = await gainAccess(ns, server);
        if (result.nuke) {
            ns.scp([script, "/general/multiport.js", "/service-communicators/port-registry.js", "/general/remote-file.js", "/service-communicators/ramnet.js", "/general/logs.js"], "Controller-Central", "home");
            ns.exec(script, "Controller-Central", undefined, server, commsStart);
            pids += 1;
            infectedSet.add(server);
        }
        else {
            ns.tprint(`could not gain access to ${server}`);
        }
    }
    else {
        ns.tprint(`cannot hack server ${server}, hacking skill ${ns.getPlayer().skills.hacking} is lower than required hacking skill ${ns.getServerRequiredHackingLevel(server)}!`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2luZmVjdC9pbmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUV0RSxPQUFPLFlBQVksTUFBTSxzQ0FBc0MsQ0FBQztBQUVoRSxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7QUFFYixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLElBQUksR0FBRyxDQUFDLENBQUM7SUFDVCxNQUFNLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQyxNQUFNLGVBQWUsR0FBZ0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUMvQyxNQUFNLGFBQWEsR0FBRyxNQUFNLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLEtBQUssTUFBTSxNQUFNLElBQUksTUFBTSxFQUFFO1FBQ3pCLE1BQU0sWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1RCxNQUFNLGNBQWMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUM1RDtJQUNELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNwQixLQUFLLE1BQU0sS0FBSyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUU7UUFDeEMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ2pELEVBQUUsQ0FBQyxLQUFLLENBQUMscUNBQXFDLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDekMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JCLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFFRCxLQUFLLFVBQVUsY0FBYyxDQUFDLEVBQVMsRUFBRSxHQUFlLEVBQUUsV0FBd0IsRUFBRSxVQUFrQjtJQUNsRyxLQUFLLE1BQU0sTUFBTSxJQUFJLEdBQUcsQ0FBQyxXQUFXLEVBQUU7UUFDbEMsTUFBTSxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzdELE1BQU0sY0FBYyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQzdEO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxZQUFZLENBQUMsRUFBUyxFQUFFLE1BQWMsRUFBRSxXQUF3QixFQUFFLFVBQWtCO0lBQy9GLE1BQU0sTUFBTSxHQUFHLHVCQUF1QixDQUFDO0lBQ3ZDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRixJQUFJLE9BQU8sRUFBRTtRQUNULE1BQU0sTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM1QyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDYixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLHVCQUF1QixFQUFFLHlDQUF5QyxFQUFFLHlCQUF5QixFQUFFLGtDQUFrQyxFQUFFLGtCQUFrQixDQUFDLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDck0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNyRSxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQ1YsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzQjthQUNJO1lBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUNuRDtLQUNKO1NBQ0k7UUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLHNCQUFzQixNQUFNLG1CQUFtQixFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8seUNBQXlDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDL0s7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwU2VydmVycywgZ2FpbkFjY2VzcywgU2VydmVySW5mbyB9IGZyb20gXCIvaW5mZWN0L3V0aWxzLmpzXCI7XG5pbXBvcnQgbnMgZnJvbSBcIkBuc1wiO1xuaW1wb3J0IENvbW11bmljYXRvciBmcm9tIFwiL3NlcnZpY2UtY29tbXVuaWNhdG9ycy9wb3J0LXJlZ2lzdHJ5XCI7XG5cbmxldCBwaWRzID0gMDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IG5zLk5TKSB7XG4gICAgcGlkcyA9IDA7XG4gICAgY29uc3QgY29tbXMgPSBuZXcgQ29tbXVuaWNhdG9yKG5zKTtcbiAgICBjb25zdCBtYXBwZWQgPSBhd2FpdCBtYXBTZXJ2ZXJzKG5zKTtcbiAgICBjb25zdCBpbmZlY3RlZFNlcnZlcnM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IHBvcnRzQXNzaWduZWQgPSBhd2FpdCBjb21tcy5hc3NpZ25GaXJzdEF2YWlsYWJsZSgxKTtcbiAgICBjb25zdCBzdGFydCA9IHBvcnRzQXNzaWduZWQuYXNzaWduZWRQb3J0c1swXTtcbiAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiBtYXBwZWQpIHtcbiAgICAgICAgYXdhaXQgaW5mZWN0U2VydmVyKG5zLCBzZXJ2ZXIubmFtZSwgaW5mZWN0ZWRTZXJ2ZXJzLCBzdGFydCk7XG4gICAgICAgIGF3YWl0IHByb2Nlc3NTZXJ2ZXJzKG5zLCBzZXJ2ZXIsIGluZmVjdGVkU2VydmVycywgc3RhcnQpO1xuICAgIH1cbiAgICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgaW5mZWN0ZWRTZXJ2ZXJzLnZhbHVlcygpKVxuICAgICAgICBlbGVtZW50cy5wdXNoKHZhbHVlKTtcbiAgICBucy50b2FzdChgaGFja2VkICR7cGlkc30gc2VydmVycyFgLCBcImluZm9cIiwgMzAwMClcbiAgICBucy50b2FzdChcImNvbXBsZXRlZCBwcm9jZXNzaW5nIG9mIHNlcnZlciBsaXN0XCIsIFwic3VjY2Vzc1wiLCAyMDAwKTtcbiAgICBjb25zdCBwb3J0Q29tbXMgPSBucy5nZXRQb3J0SGFuZGxlKHN0YXJ0KVxuICAgIGF3YWl0IG5zLnNsZWVwKDEwMDApO1xuICAgIHBvcnRDb21tcy53cml0ZShwaWRzKTtcbiAgICBhd2FpdCBucy5zbGVlcCgyMDAwMCk7XG4gICAgY29tbXMudW5hc3NpZ25Qb3J0cyhbc3RhcnRdKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc1NlcnZlcnMobnM6IG5zLk5TLCBtYXA6IFNlcnZlckluZm8sIGluZmVjdGVkU2V0OiBTZXQ8c3RyaW5nPiwgY29tbXNTdGFydDogbnVtYmVyKSB7XG4gICAgZm9yIChjb25zdCBtYXBwZWQgb2YgbWFwLnN1Yl9zZXJ2ZXJzKSB7XG4gICAgICAgIGF3YWl0IGluZmVjdFNlcnZlcihucywgbWFwcGVkLm5hbWUsIGluZmVjdGVkU2V0LCBjb21tc1N0YXJ0KTtcbiAgICAgICAgYXdhaXQgcHJvY2Vzc1NlcnZlcnMobnMsIG1hcHBlZCwgaW5mZWN0ZWRTZXQsIGNvbW1zU3RhcnQpO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5mZWN0U2VydmVyKG5zOiBucy5OUywgc2VydmVyOiBzdHJpbmcsIGluZmVjdGVkU2V0OiBTZXQ8c3RyaW5nPiwgY29tbXNTdGFydDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc2NyaXB0ID0gXCIvaW5mZWN0L2NvbnRyb2xsZXIuanNcIjtcbiAgICBjb25zdCBjYW5IYWNrID0gbnMuZ2V0UGxheWVyKCkuc2tpbGxzLmhhY2tpbmcgPj0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoc2VydmVyKTtcbiAgICBpZiAoY2FuSGFjaykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnYWluQWNjZXNzKG5zLCBzZXJ2ZXIpO1xuICAgICAgICBpZiAocmVzdWx0Lm51a2UpIHtcbiAgICAgICAgICAgIG5zLnNjcChbc2NyaXB0LCBcIi9nZW5lcmFsL211bHRpcG9ydC5qc1wiLCBcIi9zZXJ2aWNlLWNvbW11bmljYXRvcnMvcG9ydC1yZWdpc3RyeS5qc1wiLCBcIi9nZW5lcmFsL3JlbW90ZS1maWxlLmpzXCIsIFwiL3NlcnZpY2UtY29tbXVuaWNhdG9ycy9yYW1uZXQuanNcIiwgXCIvZ2VuZXJhbC9sb2dzLmpzXCJdLCBcIkNvbnRyb2xsZXItQ2VudHJhbFwiLCBcImhvbWVcIilcbiAgICAgICAgICAgIG5zLmV4ZWMoc2NyaXB0LCBcIkNvbnRyb2xsZXItQ2VudHJhbFwiLCB1bmRlZmluZWQsIHNlcnZlciwgY29tbXNTdGFydCk7XG4gICAgICAgICAgICBwaWRzICs9IDE7XG4gICAgICAgICAgICBpbmZlY3RlZFNldC5hZGQoc2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5zLnRwcmludChgY291bGQgbm90IGdhaW4gYWNjZXNzIHRvICR7c2VydmVyfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBucy50cHJpbnQoYGNhbm5vdCBoYWNrIHNlcnZlciAke3NlcnZlcn0sIGhhY2tpbmcgc2tpbGwgJHtucy5nZXRQbGF5ZXIoKS5za2lsbHMuaGFja2luZ30gaXMgbG93ZXIgdGhhbiByZXF1aXJlZCBoYWNraW5nIHNraWxsICR7bnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoc2VydmVyKX0hYCk7XG4gICAgfVxufSJdfQ==