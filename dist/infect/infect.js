import { mapServers, gainAccess } from "/infect/utils.js";
import Communicator from "/service-communicators/port-registry";
let pids = 0;
export async function main(ns) {
    pids = 0;
    const comms = new Communicator(ns);
    const mapped = await mapServers(ns);
    const infectedServers = new Set();
    const portsAssigned = await comms.assignFirstAvailable(1);
    const start = portsAssigned.assignedPorts[0];
    for (const server of mapped) {
        await infectServer(ns, server.name, infectedServers, start);
        await processServers(ns, server, infectedServers, start);
    }
    const elements = [];
    for (const value of infectedServers.values())
        elements.push(value);
    ns.toast(`hacked ${pids} servers: ${elements.join(", ")}`, "info", 3000);
    ns.toast("completed processing of server list", "success", 2000);
    const portComms = ns.getPortHandle(start);
    await ns.sleep(1000);
    portComms.write(pids);
    await ns.sleep(20000);
    comms.unassignPorts([start]);
}
async function processServers(ns, map, infectedSet, commsStart) {
    for (const mapped of map.sub_servers) {
        await infectServer(ns, mapped.name, infectedSet, commsStart);
        await processServers(ns, mapped, infectedSet, commsStart);
    }
}
async function infectServer(ns, server, infectedSet, commsStart) {
    const script = "/infect/controller.js";
    const canHack = ns.getPlayer().skills.hacking >= ns.getServerRequiredHackingLevel(server);
    if (canHack) {
        const result = await gainAccess(ns, server);
        if (result.nuke) {
            ns.scp([script, "/general/multiport.js", "/service-communicators/port-registry.js", "/general/remote-file.js", "/service-communicators/ramnet.js", "/general/logs.js"], "Controller-Central", "home");
            ns.exec(script, "Controller-Central", { temporary: true }, server, commsStart);
            pids += 1;
            infectedSet.add(server);
        }
        else {
            ns.tprint(`could not gain access to ${server}`);
        }
    }
    else {
        ns.tprint(`cannot hack server ${server}, hacking skill ${ns.getPlayer().skills.hacking} is lower than required hacking skill ${ns.getServerRequiredHackingLevel(server)}!`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2luZmVjdC9pbmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUV0RSxPQUFPLFlBQVksTUFBTSxzQ0FBc0MsQ0FBQztBQUVoRSxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7QUFFYixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLElBQUksR0FBRyxDQUFDLENBQUM7SUFDVCxNQUFNLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQyxNQUFNLGVBQWUsR0FBZ0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUMvQyxNQUFNLGFBQWEsR0FBRyxNQUFNLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLEtBQUssTUFBTSxNQUFNLElBQUksTUFBTSxFQUFFO1FBQ3pCLE1BQU0sWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1RCxNQUFNLGNBQWMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUM1RDtJQUNELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNwQixLQUFLLE1BQU0sS0FBSyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUU7UUFDeEMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxhQUFhLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDeEUsRUFBRSxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakUsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN6QyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckIsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUVELEtBQUssVUFBVSxjQUFjLENBQUMsRUFBUyxFQUFFLEdBQWUsRUFBRSxXQUF3QixFQUFFLFVBQWtCO0lBQ2xHLEtBQUssTUFBTSxNQUFNLElBQUksR0FBRyxDQUFDLFdBQVcsRUFBRTtRQUNsQyxNQUFNLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDN0QsTUFBTSxjQUFjLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDN0Q7QUFDTCxDQUFDO0FBRUQsS0FBSyxVQUFVLFlBQVksQ0FBQyxFQUFTLEVBQUUsTUFBYyxFQUFFLFdBQXdCLEVBQUUsVUFBa0I7SUFDL0YsTUFBTSxNQUFNLEdBQUcsdUJBQXVCLENBQUM7SUFDdkMsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFGLElBQUksT0FBTyxFQUFFO1FBQ1QsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtZQUNiLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsdUJBQXVCLEVBQUUseUNBQXlDLEVBQUUseUJBQXlCLEVBQUUsa0NBQWtDLEVBQUUsa0JBQWtCLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUNyTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDN0UsSUFBSSxJQUFJLENBQUMsQ0FBQztZQUNWLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0I7YUFDSTtZQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsNEJBQTRCLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDbkQ7S0FDSjtTQUNJO1FBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsTUFBTSxtQkFBbUIsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLHlDQUF5QyxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQy9LO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcFNlcnZlcnMsIGdhaW5BY2Nlc3MsIFNlcnZlckluZm8gfSBmcm9tIFwiL2luZmVjdC91dGlscy5qc1wiO1xuaW1wb3J0IG5zIGZyb20gXCJAbnNcIjtcbmltcG9ydCBDb21tdW5pY2F0b3IgZnJvbSBcIi9zZXJ2aWNlLWNvbW11bmljYXRvcnMvcG9ydC1yZWdpc3RyeVwiO1xuXG5sZXQgcGlkcyA9IDA7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBucy5OUykge1xuICAgIHBpZHMgPSAwO1xuICAgIGNvbnN0IGNvbW1zID0gbmV3IENvbW11bmljYXRvcihucyk7XG4gICAgY29uc3QgbWFwcGVkID0gYXdhaXQgbWFwU2VydmVycyhucyk7XG4gICAgY29uc3QgaW5mZWN0ZWRTZXJ2ZXJzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCBwb3J0c0Fzc2lnbmVkID0gYXdhaXQgY29tbXMuYXNzaWduRmlyc3RBdmFpbGFibGUoMSk7XG4gICAgY29uc3Qgc3RhcnQgPSBwb3J0c0Fzc2lnbmVkLmFzc2lnbmVkUG9ydHNbMF07XG4gICAgZm9yIChjb25zdCBzZXJ2ZXIgb2YgbWFwcGVkKSB7XG4gICAgICAgIGF3YWl0IGluZmVjdFNlcnZlcihucywgc2VydmVyLm5hbWUsIGluZmVjdGVkU2VydmVycywgc3RhcnQpO1xuICAgICAgICBhd2FpdCBwcm9jZXNzU2VydmVycyhucywgc2VydmVyLCBpbmZlY3RlZFNlcnZlcnMsIHN0YXJ0KTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGluZmVjdGVkU2VydmVycy52YWx1ZXMoKSlcbiAgICAgICAgZWxlbWVudHMucHVzaCh2YWx1ZSk7XG4gICAgbnMudG9hc3QoYGhhY2tlZCAke3BpZHN9IHNlcnZlcnM6ICR7ZWxlbWVudHMuam9pbihcIiwgXCIpfWAsIFwiaW5mb1wiLCAzMDAwKVxuICAgIG5zLnRvYXN0KFwiY29tcGxldGVkIHByb2Nlc3Npbmcgb2Ygc2VydmVyIGxpc3RcIiwgXCJzdWNjZXNzXCIsIDIwMDApO1xuICAgIGNvbnN0IHBvcnRDb21tcyA9IG5zLmdldFBvcnRIYW5kbGUoc3RhcnQpXG4gICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XG4gICAgcG9ydENvbW1zLndyaXRlKHBpZHMpO1xuICAgIGF3YWl0IG5zLnNsZWVwKDIwMDAwKTtcbiAgICBjb21tcy51bmFzc2lnblBvcnRzKFtzdGFydF0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwcm9jZXNzU2VydmVycyhuczogbnMuTlMsIG1hcDogU2VydmVySW5mbywgaW5mZWN0ZWRTZXQ6IFNldDxzdHJpbmc+LCBjb21tc1N0YXJ0OiBudW1iZXIpIHtcbiAgICBmb3IgKGNvbnN0IG1hcHBlZCBvZiBtYXAuc3ViX3NlcnZlcnMpIHtcbiAgICAgICAgYXdhaXQgaW5mZWN0U2VydmVyKG5zLCBtYXBwZWQubmFtZSwgaW5mZWN0ZWRTZXQsIGNvbW1zU3RhcnQpO1xuICAgICAgICBhd2FpdCBwcm9jZXNzU2VydmVycyhucywgbWFwcGVkLCBpbmZlY3RlZFNldCwgY29tbXNTdGFydCk7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBpbmZlY3RTZXJ2ZXIobnM6IG5zLk5TLCBzZXJ2ZXI6IHN0cmluZywgaW5mZWN0ZWRTZXQ6IFNldDxzdHJpbmc+LCBjb21tc1N0YXJ0OiBudW1iZXIpIHtcbiAgICBjb25zdCBzY3JpcHQgPSBcIi9pbmZlY3QvY29udHJvbGxlci5qc1wiO1xuICAgIGNvbnN0IGNhbkhhY2sgPSBucy5nZXRQbGF5ZXIoKS5za2lsbHMuaGFja2luZyA+PSBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzZXJ2ZXIpO1xuICAgIGlmIChjYW5IYWNrKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdhaW5BY2Nlc3MobnMsIHNlcnZlcik7XG4gICAgICAgIGlmIChyZXN1bHQubnVrZSkge1xuICAgICAgICAgICAgbnMuc2NwKFtzY3JpcHQsIFwiL2dlbmVyYWwvbXVsdGlwb3J0LmpzXCIsIFwiL3NlcnZpY2UtY29tbXVuaWNhdG9ycy9wb3J0LXJlZ2lzdHJ5LmpzXCIsIFwiL2dlbmVyYWwvcmVtb3RlLWZpbGUuanNcIiwgXCIvc2VydmljZS1jb21tdW5pY2F0b3JzL3JhbW5ldC5qc1wiLCBcIi9nZW5lcmFsL2xvZ3MuanNcIl0sIFwiQ29udHJvbGxlci1DZW50cmFsXCIsIFwiaG9tZVwiKVxuICAgICAgICAgICAgbnMuZXhlYyhzY3JpcHQsIFwiQ29udHJvbGxlci1DZW50cmFsXCIsIHt0ZW1wb3Jhcnk6IHRydWV9LCBzZXJ2ZXIsIGNvbW1zU3RhcnQpO1xuICAgICAgICAgICAgcGlkcyArPSAxO1xuICAgICAgICAgICAgaW5mZWN0ZWRTZXQuYWRkKHNlcnZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBucy50cHJpbnQoYGNvdWxkIG5vdCBnYWluIGFjY2VzcyB0byAke3NlcnZlcn1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbnMudHByaW50KGBjYW5ub3QgaGFjayBzZXJ2ZXIgJHtzZXJ2ZXJ9LCBoYWNraW5nIHNraWxsICR7bnMuZ2V0UGxheWVyKCkuc2tpbGxzLmhhY2tpbmd9IGlzIGxvd2VyIHRoYW4gcmVxdWlyZWQgaGFja2luZyBza2lsbCAke25zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlcil9IWApO1xuICAgIH1cbn0iXX0=