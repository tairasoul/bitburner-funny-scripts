import { mapServers, gainAccess } from "/infect/utils.js";
import Communicator from "/service-communicators/port-registry";
let pids = 0;
export async function main(ns) {
    pids = 0;
    const comms = new Communicator(ns);
    const mapped = await mapServers(ns);
    const infectedServers = new Set();
    const portsAssigned = await comms.assignFirstAvailable(1);
    const start = portsAssigned.assignedPorts[0];
    for (const server of mapped) {
        await infectServer(ns, server.name, infectedServers, start);
        await processServers(ns, server, infectedServers, start);
    }
    const elements = [];
    for (const value of infectedServers.values())
        elements.push(value);
    ns.toast(`hacked ${pids} servers: ${elements.join(", ")}`, "info", 3000);
    ns.toast("completed processing of server list", "success", 2000);
    const portComms = ns.getPortHandle(start);
    await ns.sleep(1000);
    portComms.write(pids);
    await ns.sleep(20000);
    comms.unassignPorts([start]);
}
async function processServers(ns, map, infectedSet, commsStart) {
    for (const mapped of map.sub_servers) {
        await infectServer(ns, mapped.name, infectedSet, commsStart);
        await processServers(ns, mapped, infectedSet, commsStart);
    }
}
async function infectServer(ns, server, infectedSet, commsStart) {
    const script = "/infect/controller.js";
    const canHack = ns.getPlayer().skills.hacking >= ns.getServerRequiredHackingLevel(server);
    if (canHack) {
        const result = await gainAccess(ns, server);
        if (result.nuke) {
            if (!ns.fileExists(`/lock/controllers/${server}.txt`)) {
                ns.scp([script, "/port-registry/classes/multiport.js", "/port-registry/classes/communicator.js", "/general/remote-file.js", "/general/logs.js"], "Controller-Central", "home");
                const pid = ns.exec(script, "Controller-Central", undefined, server, commsStart);
                pids += 1;
                ns.write(`/lock/controllers/${server}.txt`, JSON.stringify({ pid, server }));
            }
            infectedSet.add(server);
        }
        else {
            ns.tprint(`could not gain access to ${server}`);
        }
    }
    else {
        ns.tprint(`cannot hack server ${server}, hacking skill ${ns.getPlayer().skills.hacking} is lower than required hacking skill ${ns.getServerRequiredHackingLevel(server)}!`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2luZmVjdC9pbmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUV0RSxPQUFPLFlBQVksTUFBTSxzQ0FBc0MsQ0FBQztBQUVoRSxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7QUFFYixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLElBQUksR0FBRyxDQUFDLENBQUM7SUFDVCxNQUFNLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQyxNQUFNLGVBQWUsR0FBZ0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUMvQyxNQUFNLGFBQWEsR0FBRyxNQUFNLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLEtBQUssTUFBTSxNQUFNLElBQUksTUFBTSxFQUFFO1FBQ3pCLE1BQU0sWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1RCxNQUFNLGNBQWMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUM1RDtJQUNELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNwQixLQUFLLE1BQU0sS0FBSyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUU7UUFDeEMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxhQUFhLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDeEUsRUFBRSxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakUsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN6QyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckIsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUVELEtBQUssVUFBVSxjQUFjLENBQUMsRUFBUyxFQUFFLEdBQWUsRUFBRSxXQUF3QixFQUFFLFVBQWtCO0lBQ2xHLEtBQUssTUFBTSxNQUFNLElBQUksR0FBRyxDQUFDLFdBQVcsRUFBRTtRQUNsQyxNQUFNLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDN0QsTUFBTSxjQUFjLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDN0Q7QUFDTCxDQUFDO0FBRUQsS0FBSyxVQUFVLFlBQVksQ0FBQyxFQUFTLEVBQUUsTUFBYyxFQUFFLFdBQXdCLEVBQUUsVUFBa0I7SUFDL0YsTUFBTSxNQUFNLEdBQUcsdUJBQXVCLENBQUM7SUFDdkMsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFGLElBQUksT0FBTyxFQUFFO1FBQ1QsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHFCQUFxQixNQUFNLE1BQU0sQ0FBQyxFQUFFO2dCQUNuRCxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLHFDQUFxQyxFQUFFLHdDQUF3QyxFQUFFLHlCQUF5QixFQUFFLGtCQUFrQixDQUFDLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLENBQUE7Z0JBQzlLLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQ2pGLElBQUksSUFBSSxDQUFDLENBQUM7Z0JBQ1YsRUFBRSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsTUFBTSxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUM7YUFDOUU7WUFDRCxXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzNCO2FBQ0k7WUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLDRCQUE0QixNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQ25EO0tBQ0o7U0FDSTtRQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLE1BQU0sbUJBQW1CLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyx5Q0FBeUMsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMvSztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXBTZXJ2ZXJzLCBnYWluQWNjZXNzLCBTZXJ2ZXJJbmZvIH0gZnJvbSBcIi9pbmZlY3QvdXRpbHMuanNcIjtcbmltcG9ydCBucyBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgQ29tbXVuaWNhdG9yIGZyb20gXCIvc2VydmljZS1jb21tdW5pY2F0b3JzL3BvcnQtcmVnaXN0cnlcIjtcblxubGV0IHBpZHMgPSAwO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogbnMuTlMpIHtcbiAgICBwaWRzID0gMDtcbiAgICBjb25zdCBjb21tcyA9IG5ldyBDb21tdW5pY2F0b3IobnMpO1xuICAgIGNvbnN0IG1hcHBlZCA9IGF3YWl0IG1hcFNlcnZlcnMobnMpO1xuICAgIGNvbnN0IGluZmVjdGVkU2VydmVyczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgcG9ydHNBc3NpZ25lZCA9IGF3YWl0IGNvbW1zLmFzc2lnbkZpcnN0QXZhaWxhYmxlKDEpO1xuICAgIGNvbnN0IHN0YXJ0ID0gcG9ydHNBc3NpZ25lZC5hc3NpZ25lZFBvcnRzWzBdO1xuICAgIGZvciAoY29uc3Qgc2VydmVyIG9mIG1hcHBlZCkge1xuICAgICAgICBhd2FpdCBpbmZlY3RTZXJ2ZXIobnMsIHNlcnZlci5uYW1lLCBpbmZlY3RlZFNlcnZlcnMsIHN0YXJ0KTtcbiAgICAgICAgYXdhaXQgcHJvY2Vzc1NlcnZlcnMobnMsIHNlcnZlciwgaW5mZWN0ZWRTZXJ2ZXJzLCBzdGFydCk7XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBpbmZlY3RlZFNlcnZlcnMudmFsdWVzKCkpXG4gICAgICAgIGVsZW1lbnRzLnB1c2godmFsdWUpO1xuICAgIG5zLnRvYXN0KGBoYWNrZWQgJHtwaWRzfSBzZXJ2ZXJzOiAke2VsZW1lbnRzLmpvaW4oXCIsIFwiKX1gLCBcImluZm9cIiwgMzAwMClcbiAgICBucy50b2FzdChcImNvbXBsZXRlZCBwcm9jZXNzaW5nIG9mIHNlcnZlciBsaXN0XCIsIFwic3VjY2Vzc1wiLCAyMDAwKTtcbiAgICBjb25zdCBwb3J0Q29tbXMgPSBucy5nZXRQb3J0SGFuZGxlKHN0YXJ0KVxuICAgIGF3YWl0IG5zLnNsZWVwKDEwMDApO1xuICAgIHBvcnRDb21tcy53cml0ZShwaWRzKTtcbiAgICBhd2FpdCBucy5zbGVlcCgyMDAwMCk7XG4gICAgY29tbXMudW5hc3NpZ25Qb3J0cyhbc3RhcnRdKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc1NlcnZlcnMobnM6IG5zLk5TLCBtYXA6IFNlcnZlckluZm8sIGluZmVjdGVkU2V0OiBTZXQ8c3RyaW5nPiwgY29tbXNTdGFydDogbnVtYmVyKSB7XG4gICAgZm9yIChjb25zdCBtYXBwZWQgb2YgbWFwLnN1Yl9zZXJ2ZXJzKSB7XG4gICAgICAgIGF3YWl0IGluZmVjdFNlcnZlcihucywgbWFwcGVkLm5hbWUsIGluZmVjdGVkU2V0LCBjb21tc1N0YXJ0KTtcbiAgICAgICAgYXdhaXQgcHJvY2Vzc1NlcnZlcnMobnMsIG1hcHBlZCwgaW5mZWN0ZWRTZXQsIGNvbW1zU3RhcnQpO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5mZWN0U2VydmVyKG5zOiBucy5OUywgc2VydmVyOiBzdHJpbmcsIGluZmVjdGVkU2V0OiBTZXQ8c3RyaW5nPiwgY29tbXNTdGFydDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc2NyaXB0ID0gXCIvaW5mZWN0L2NvbnRyb2xsZXIuanNcIjtcbiAgICBjb25zdCBjYW5IYWNrID0gbnMuZ2V0UGxheWVyKCkuc2tpbGxzLmhhY2tpbmcgPj0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoc2VydmVyKTtcbiAgICBpZiAoY2FuSGFjaykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnYWluQWNjZXNzKG5zLCBzZXJ2ZXIpO1xuICAgICAgICBpZiAocmVzdWx0Lm51a2UpIHtcbiAgICAgICAgICAgIGlmICghbnMuZmlsZUV4aXN0cyhgL2xvY2svY29udHJvbGxlcnMvJHtzZXJ2ZXJ9LnR4dGApKSB7XG4gICAgICAgICAgICAgICAgbnMuc2NwKFtzY3JpcHQsIFwiL3BvcnQtcmVnaXN0cnkvY2xhc3Nlcy9tdWx0aXBvcnQuanNcIiwgXCIvcG9ydC1yZWdpc3RyeS9jbGFzc2VzL2NvbW11bmljYXRvci5qc1wiLCBcIi9nZW5lcmFsL3JlbW90ZS1maWxlLmpzXCIsIFwiL2dlbmVyYWwvbG9ncy5qc1wiXSwgXCJDb250cm9sbGVyLUNlbnRyYWxcIiwgXCJob21lXCIpXG4gICAgICAgICAgICAgICAgY29uc3QgcGlkID0gbnMuZXhlYyhzY3JpcHQsIFwiQ29udHJvbGxlci1DZW50cmFsXCIsIHVuZGVmaW5lZCwgc2VydmVyLCBjb21tc1N0YXJ0KTtcbiAgICAgICAgICAgICAgICBwaWRzICs9IDE7XG4gICAgICAgICAgICAgICAgbnMud3JpdGUoYC9sb2NrL2NvbnRyb2xsZXJzLyR7c2VydmVyfS50eHRgLCBKU09OLnN0cmluZ2lmeSh7cGlkLCBzZXJ2ZXJ9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbmZlY3RlZFNldC5hZGQoc2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5zLnRwcmludChgY291bGQgbm90IGdhaW4gYWNjZXNzIHRvICR7c2VydmVyfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBucy50cHJpbnQoYGNhbm5vdCBoYWNrIHNlcnZlciAke3NlcnZlcn0sIGhhY2tpbmcgc2tpbGwgJHtucy5nZXRQbGF5ZXIoKS5za2lsbHMuaGFja2luZ30gaXMgbG93ZXIgdGhhbiByZXF1aXJlZCBoYWNraW5nIHNraWxsICR7bnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoc2VydmVyKX0hYCk7XG4gICAgfVxufSJdfQ==