import { mapServers, gainAccess } from "/infect/utils.js";
export async function main(ns) {
    const mapped = await mapServers(ns);
    const infectedServers = new Set();
    for (const server of mapped) {
        await infectServer(ns, server.name, infectedServers);
        await processServers(ns, server, infectedServers);
    }
    const elements = [];
    for (const value of infectedServers.values())
        elements.push(value);
    ns.toast(`hacked servers: ${elements.join(", ")}`, "info", 3000);
    ns.toast("completed processing of server list", "success", 2000);
}
async function processServers(ns, map, infectedSet) {
    for (const mapped of map.sub_servers) {
        await infectServer(ns, mapped.name, infectedSet);
        await processServers(ns, mapped, infectedSet);
    }
}
async function infectServer(ns, server, infectedSet) {
    const script = "/infect/controller.js";
    const canHack = ns.getPlayer().skills.hacking >= ns.getServerRequiredHackingLevel(server);
    if (canHack) {
        const result = await gainAccess(ns, server);
        if (result.nuke) {
            if (!ns.fileExists(`/lock/controllers/${server}.txt`)) {
                ns.scp([script, "/port-registry/classes/multiport.js", "/port-registry/classes/communicator.js"], "Controller-Central");
                const pid = ns.exec(script, "Controller-Central", undefined, server);
                ns.write(`/lock/controllers/${server}.txt`, JSON.stringify({ pid, server }));
            }
            infectedSet.add(server);
        }
        else {
            ns.tprint(`could not gain access to ${server}`);
        }
    }
    else {
        ns.tprint(`cannot hack server ${server}, level ${ns.getPlayer().skills.hacking} is lower than ${ns.getServerRequiredHackingLevel(server)}!`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2luZmVjdC9pbmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUd0RSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sZUFBZSxHQUFnQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQy9DLEtBQUssTUFBTSxNQUFNLElBQUksTUFBTSxFQUFFO1FBQ3pCLE1BQU0sWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sY0FBYyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7S0FDckQ7SUFDRCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDcEIsS0FBSyxNQUFNLEtBQUssSUFBSSxlQUFlLENBQUMsTUFBTSxFQUFFO1FBQ3hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNoRSxFQUFFLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNyRSxDQUFDO0FBRUQsS0FBSyxVQUFVLGNBQWMsQ0FBQyxFQUFTLEVBQUUsR0FBZSxFQUFFLFdBQXdCO0lBQzlFLEtBQUssTUFBTSxNQUFNLElBQUksR0FBRyxDQUFDLFdBQVcsRUFBRTtRQUNsQyxNQUFNLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNqRCxNQUFNLGNBQWMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0tBQ2pEO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxZQUFZLENBQUMsRUFBUyxFQUFFLE1BQWMsRUFBRSxXQUF3QjtJQUMzRSxNQUFNLE1BQU0sR0FBRyx1QkFBdUIsQ0FBQztJQUN2QyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUYsSUFBSSxPQUFPLEVBQUU7UUFDVCxNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUMsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMscUJBQXFCLE1BQU0sTUFBTSxDQUFDLEVBQUU7Z0JBQ25ELEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUscUNBQXFDLEVBQUUsd0NBQXdDLENBQUMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFBO2dCQUN2SCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ3JFLEVBQUUsQ0FBQyxLQUFLLENBQUMscUJBQXFCLE1BQU0sTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxHQUFHLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzlFO1lBQ0QsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzQjthQUNJO1lBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUNuRDtLQUNKO1NBQ0k7UUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLHNCQUFzQixNQUFNLFdBQVcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLGtCQUFrQixFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2hKO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcFNlcnZlcnMsIGdhaW5BY2Nlc3MsIFNlcnZlckluZm8gfSBmcm9tIFwiL2luZmVjdC91dGlscy5qc1wiO1xuaW1wb3J0IG5zIGZyb20gXCJAbnNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IG5zLk5TKSB7XG4gICAgY29uc3QgbWFwcGVkID0gYXdhaXQgbWFwU2VydmVycyhucyk7XG4gICAgY29uc3QgaW5mZWN0ZWRTZXJ2ZXJzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiBtYXBwZWQpIHtcbiAgICAgICAgYXdhaXQgaW5mZWN0U2VydmVyKG5zLCBzZXJ2ZXIubmFtZSwgaW5mZWN0ZWRTZXJ2ZXJzKTtcbiAgICAgICAgYXdhaXQgcHJvY2Vzc1NlcnZlcnMobnMsIHNlcnZlciwgaW5mZWN0ZWRTZXJ2ZXJzKTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGluZmVjdGVkU2VydmVycy52YWx1ZXMoKSlcbiAgICAgICAgZWxlbWVudHMucHVzaCh2YWx1ZSk7XG4gICAgbnMudG9hc3QoYGhhY2tlZCBzZXJ2ZXJzOiAke2VsZW1lbnRzLmpvaW4oXCIsIFwiKX1gLCBcImluZm9cIiwgMzAwMClcbiAgICBucy50b2FzdChcImNvbXBsZXRlZCBwcm9jZXNzaW5nIG9mIHNlcnZlciBsaXN0XCIsIFwic3VjY2Vzc1wiLCAyMDAwKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc1NlcnZlcnMobnM6IG5zLk5TLCBtYXA6IFNlcnZlckluZm8sIGluZmVjdGVkU2V0OiBTZXQ8c3RyaW5nPikge1xuICAgIGZvciAoY29uc3QgbWFwcGVkIG9mIG1hcC5zdWJfc2VydmVycykge1xuICAgICAgICBhd2FpdCBpbmZlY3RTZXJ2ZXIobnMsIG1hcHBlZC5uYW1lLCBpbmZlY3RlZFNldCk7XG4gICAgICAgIGF3YWl0IHByb2Nlc3NTZXJ2ZXJzKG5zLCBtYXBwZWQsIGluZmVjdGVkU2V0KTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluZmVjdFNlcnZlcihuczogbnMuTlMsIHNlcnZlcjogc3RyaW5nLCBpbmZlY3RlZFNldDogU2V0PHN0cmluZz4pIHtcbiAgICBjb25zdCBzY3JpcHQgPSBcIi9pbmZlY3QvY29udHJvbGxlci5qc1wiO1xuICAgIGNvbnN0IGNhbkhhY2sgPSBucy5nZXRQbGF5ZXIoKS5za2lsbHMuaGFja2luZyA+PSBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzZXJ2ZXIpO1xuICAgIGlmIChjYW5IYWNrKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdhaW5BY2Nlc3MobnMsIHNlcnZlcik7XG4gICAgICAgIGlmIChyZXN1bHQubnVrZSkge1xuICAgICAgICAgICAgaWYgKCFucy5maWxlRXhpc3RzKGAvbG9jay9jb250cm9sbGVycy8ke3NlcnZlcn0udHh0YCkpIHtcbiAgICAgICAgICAgICAgICBucy5zY3AoW3NjcmlwdCwgXCIvcG9ydC1yZWdpc3RyeS9jbGFzc2VzL211bHRpcG9ydC5qc1wiLCBcIi9wb3J0LXJlZ2lzdHJ5L2NsYXNzZXMvY29tbXVuaWNhdG9yLmpzXCJdLCBcIkNvbnRyb2xsZXItQ2VudHJhbFwiKVxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoc2NyaXB0LCBcIkNvbnRyb2xsZXItQ2VudHJhbFwiLCB1bmRlZmluZWQsIHNlcnZlcik7XG4gICAgICAgICAgICAgICAgbnMud3JpdGUoYC9sb2NrL2NvbnRyb2xsZXJzLyR7c2VydmVyfS50eHRgLCBKU09OLnN0cmluZ2lmeSh7cGlkLCBzZXJ2ZXJ9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbmZlY3RlZFNldC5hZGQoc2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5zLnRwcmludChgY291bGQgbm90IGdhaW4gYWNjZXNzIHRvICR7c2VydmVyfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBucy50cHJpbnQoYGNhbm5vdCBoYWNrIHNlcnZlciAke3NlcnZlcn0sIGxldmVsICR7bnMuZ2V0UGxheWVyKCkuc2tpbGxzLmhhY2tpbmd9IGlzIGxvd2VyIHRoYW4gJHtucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzZXJ2ZXIpfSFgKTtcbiAgICB9XG59Il19