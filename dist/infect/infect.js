import { mapServers, gainAccess } from "/infect/utils.js";
import Communicator from "/port-registry/classes/communicator";
let pids = 0;
export async function main(ns) {
    pids = 0;
    const comms = new Communicator(ns);
    const mapped = await mapServers(ns);
    const infectedServers = new Set();
    const portsAssigned = await comms.assignFirstAvailable(1);
    const start = portsAssigned.assignedPorts[0];
    for (const server of mapped) {
        await infectServer(ns, server.name, infectedServers, start);
        await processServers(ns, server, infectedServers, start);
    }
    const elements = [];
    for (const value of infectedServers.values())
        elements.push(value);
    ns.toast(`hacked servers: ${elements.join(", ")}`, "info", 3000);
    ns.toast("completed processing of server list", "success", 2000);
    const portComms = ns.getPortHandle(start);
    await ns.sleep(1000);
    portComms.write(pids);
    await ns.sleep(20000);
    comms.unassignPorts([start]);
}
async function processServers(ns, map, infectedSet, commsStart) {
    for (const mapped of map.sub_servers) {
        await infectServer(ns, mapped.name, infectedSet, commsStart);
        await processServers(ns, mapped, infectedSet, commsStart);
    }
}
async function infectServer(ns, server, infectedSet, commsStart) {
    const script = "/infect/controller.js";
    const canHack = ns.getPlayer().skills.hacking >= ns.getServerRequiredHackingLevel(server);
    if (canHack) {
        const result = await gainAccess(ns, server);
        if (result.nuke) {
            if (!ns.fileExists(`/lock/controllers/${server}.txt`)) {
                ns.scp([script, "/port-registry/classes/multiport.js", "/port-registry/classes/communicator.js", "/general/remote-file.js", "/general/logs.js"], "Controller-Central", "home");
                const pid = ns.exec(script, "Controller-Central", undefined, server, commsStart);
                pids += 1;
                ns.write(`/lock/controllers/${server}.txt`, JSON.stringify({ pid, server }));
            }
            infectedSet.add(server);
        }
        else {
            ns.tprint(`could not gain access to ${server}`);
        }
    }
    else {
        ns.tprint(`cannot hack server ${server}, hacking skill ${ns.getPlayer().skills.hacking} is lower than required hacking skill ${ns.getServerRequiredHackingLevel(server)}!`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2luZmVjdC9pbmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUV0RSxPQUFPLFlBQVksTUFBTSxxQ0FBcUMsQ0FBQztBQUUvRCxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7QUFFYixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLElBQUksR0FBRyxDQUFDLENBQUM7SUFDVCxNQUFNLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQyxNQUFNLGVBQWUsR0FBZ0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUMvQyxNQUFNLGFBQWEsR0FBRyxNQUFNLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLEtBQUssTUFBTSxNQUFNLElBQUksTUFBTSxFQUFFO1FBQ3pCLE1BQU0sWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1RCxNQUFNLGNBQWMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUM1RDtJQUNELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNwQixLQUFLLE1BQU0sS0FBSyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUU7UUFDeEMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLG1CQUFtQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ2hFLEVBQUUsQ0FBQyxLQUFLLENBQUMscUNBQXFDLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDekMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JCLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFFRCxLQUFLLFVBQVUsY0FBYyxDQUFDLEVBQVMsRUFBRSxHQUFlLEVBQUUsV0FBd0IsRUFBRSxVQUFrQjtJQUNsRyxLQUFLLE1BQU0sTUFBTSxJQUFJLEdBQUcsQ0FBQyxXQUFXLEVBQUU7UUFDbEMsTUFBTSxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzdELE1BQU0sY0FBYyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQzdEO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxZQUFZLENBQUMsRUFBUyxFQUFFLE1BQWMsRUFBRSxXQUF3QixFQUFFLFVBQWtCO0lBQy9GLE1BQU0sTUFBTSxHQUFHLHVCQUF1QixDQUFDO0lBQ3ZDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRixJQUFJLE9BQU8sRUFBRTtRQUNULE1BQU0sTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM1QyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDYixJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsTUFBTSxNQUFNLENBQUMsRUFBRTtnQkFDbkQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxxQ0FBcUMsRUFBRSx3Q0FBd0MsRUFBRSx5QkFBeUIsRUFBRSxrQkFBa0IsQ0FBQyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxDQUFBO2dCQUM5SyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2dCQUNqRixJQUFJLElBQUksQ0FBQyxDQUFDO2dCQUNWLEVBQUUsQ0FBQyxLQUFLLENBQUMscUJBQXFCLE1BQU0sTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxHQUFHLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzlFO1lBQ0QsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzQjthQUNJO1lBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUNuRDtLQUNKO1NBQ0k7UUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLHNCQUFzQixNQUFNLG1CQUFtQixFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8seUNBQXlDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDL0s7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwU2VydmVycywgZ2FpbkFjY2VzcywgU2VydmVySW5mbyB9IGZyb20gXCIvaW5mZWN0L3V0aWxzLmpzXCI7XG5pbXBvcnQgbnMgZnJvbSBcIkBuc1wiO1xuaW1wb3J0IENvbW11bmljYXRvciBmcm9tIFwiL3BvcnQtcmVnaXN0cnkvY2xhc3Nlcy9jb21tdW5pY2F0b3JcIjtcblxubGV0IHBpZHMgPSAwO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogbnMuTlMpIHtcbiAgICBwaWRzID0gMDtcbiAgICBjb25zdCBjb21tcyA9IG5ldyBDb21tdW5pY2F0b3IobnMpO1xuICAgIGNvbnN0IG1hcHBlZCA9IGF3YWl0IG1hcFNlcnZlcnMobnMpO1xuICAgIGNvbnN0IGluZmVjdGVkU2VydmVyczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgcG9ydHNBc3NpZ25lZCA9IGF3YWl0IGNvbW1zLmFzc2lnbkZpcnN0QXZhaWxhYmxlKDEpO1xuICAgIGNvbnN0IHN0YXJ0ID0gcG9ydHNBc3NpZ25lZC5hc3NpZ25lZFBvcnRzWzBdO1xuICAgIGZvciAoY29uc3Qgc2VydmVyIG9mIG1hcHBlZCkge1xuICAgICAgICBhd2FpdCBpbmZlY3RTZXJ2ZXIobnMsIHNlcnZlci5uYW1lLCBpbmZlY3RlZFNlcnZlcnMsIHN0YXJ0KTtcbiAgICAgICAgYXdhaXQgcHJvY2Vzc1NlcnZlcnMobnMsIHNlcnZlciwgaW5mZWN0ZWRTZXJ2ZXJzLCBzdGFydCk7XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBpbmZlY3RlZFNlcnZlcnMudmFsdWVzKCkpXG4gICAgICAgIGVsZW1lbnRzLnB1c2godmFsdWUpO1xuICAgIG5zLnRvYXN0KGBoYWNrZWQgc2VydmVyczogJHtlbGVtZW50cy5qb2luKFwiLCBcIil9YCwgXCJpbmZvXCIsIDMwMDApXG4gICAgbnMudG9hc3QoXCJjb21wbGV0ZWQgcHJvY2Vzc2luZyBvZiBzZXJ2ZXIgbGlzdFwiLCBcInN1Y2Nlc3NcIiwgMjAwMCk7XG4gICAgY29uc3QgcG9ydENvbW1zID0gbnMuZ2V0UG9ydEhhbmRsZShzdGFydClcbiAgICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcbiAgICBwb3J0Q29tbXMud3JpdGUocGlkcyk7XG4gICAgYXdhaXQgbnMuc2xlZXAoMjAwMDApO1xuICAgIGNvbW1zLnVuYXNzaWduUG9ydHMoW3N0YXJ0XSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NTZXJ2ZXJzKG5zOiBucy5OUywgbWFwOiBTZXJ2ZXJJbmZvLCBpbmZlY3RlZFNldDogU2V0PHN0cmluZz4sIGNvbW1zU3RhcnQ6IG51bWJlcikge1xuICAgIGZvciAoY29uc3QgbWFwcGVkIG9mIG1hcC5zdWJfc2VydmVycykge1xuICAgICAgICBhd2FpdCBpbmZlY3RTZXJ2ZXIobnMsIG1hcHBlZC5uYW1lLCBpbmZlY3RlZFNldCwgY29tbXNTdGFydCk7XG4gICAgICAgIGF3YWl0IHByb2Nlc3NTZXJ2ZXJzKG5zLCBtYXBwZWQsIGluZmVjdGVkU2V0LCBjb21tc1N0YXJ0KTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluZmVjdFNlcnZlcihuczogbnMuTlMsIHNlcnZlcjogc3RyaW5nLCBpbmZlY3RlZFNldDogU2V0PHN0cmluZz4sIGNvbW1zU3RhcnQ6IG51bWJlcikge1xuICAgIGNvbnN0IHNjcmlwdCA9IFwiL2luZmVjdC9jb250cm9sbGVyLmpzXCI7XG4gICAgY29uc3QgY2FuSGFjayA9IG5zLmdldFBsYXllcigpLnNraWxscy5oYWNraW5nID49IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlcik7XG4gICAgaWYgKGNhbkhhY2spIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2FpbkFjY2Vzcyhucywgc2VydmVyKTtcbiAgICAgICAgaWYgKHJlc3VsdC5udWtlKSB7XG4gICAgICAgICAgICBpZiAoIW5zLmZpbGVFeGlzdHMoYC9sb2NrL2NvbnRyb2xsZXJzLyR7c2VydmVyfS50eHRgKSkge1xuICAgICAgICAgICAgICAgIG5zLnNjcChbc2NyaXB0LCBcIi9wb3J0LXJlZ2lzdHJ5L2NsYXNzZXMvbXVsdGlwb3J0LmpzXCIsIFwiL3BvcnQtcmVnaXN0cnkvY2xhc3Nlcy9jb21tdW5pY2F0b3IuanNcIiwgXCIvZ2VuZXJhbC9yZW1vdGUtZmlsZS5qc1wiLCBcIi9nZW5lcmFsL2xvZ3MuanNcIl0sIFwiQ29udHJvbGxlci1DZW50cmFsXCIsIFwiaG9tZVwiKVxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoc2NyaXB0LCBcIkNvbnRyb2xsZXItQ2VudHJhbFwiLCB1bmRlZmluZWQsIHNlcnZlciwgY29tbXNTdGFydCk7XG4gICAgICAgICAgICAgICAgcGlkcyArPSAxO1xuICAgICAgICAgICAgICAgIG5zLndyaXRlKGAvbG9jay9jb250cm9sbGVycy8ke3NlcnZlcn0udHh0YCwgSlNPTi5zdHJpbmdpZnkoe3BpZCwgc2VydmVyfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5mZWN0ZWRTZXQuYWRkKHNlcnZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBucy50cHJpbnQoYGNvdWxkIG5vdCBnYWluIGFjY2VzcyB0byAke3NlcnZlcn1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbnMudHByaW50KGBjYW5ub3QgaGFjayBzZXJ2ZXIgJHtzZXJ2ZXJ9LCBoYWNraW5nIHNraWxsICR7bnMuZ2V0UGxheWVyKCkuc2tpbGxzLmhhY2tpbmd9IGlzIGxvd2VyIHRoYW4gcmVxdWlyZWQgaGFja2luZyBza2lsbCAke25zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlcil9IWApO1xuICAgIH1cbn0iXX0=