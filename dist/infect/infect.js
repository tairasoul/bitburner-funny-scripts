import { mapServers, gainAccess } from "/infect/utils.js";
export async function main(ns) {
    const mapped = await mapServers(ns);
    const infectedServers = new Set();
    for (const server of mapped) {
        await infectServer(ns, server.name, infectedServers);
        await processServers(ns, server, infectedServers);
    }
    ns.toast("completed processing of server list", "success", 10000);
    await ns.sleep(1000);
    const elements = [];
    for (const value of infectedServers.values())
        elements.push(value);
    ns.toast(`hacked servers: ${elements.join(", ")}`, "success", 10000);
}
async function processServers(ns, map, infectedSet) {
    for (const mapped of map.sub_servers) {
        await infectServer(ns, mapped.name, infectedSet);
        await processServers(ns, mapped, infectedSet);
    }
}
async function infectServer(ns, server, infectedSet) {
    const script = "/infect/controller.js";
    const canHack = ns.getPlayer().skills.hacking >= ns.getServerRequiredHackingLevel(server);
    if (canHack) {
        const result = await gainAccess(ns, server);
        if (result.nuke) {
            if (!ns.fileExists(`/lock/controllers/${server}.txt`)) {
                ns.scp([script, "/port-registry/classes/multiport.js", "/port-registry/classes/communicator.js"], "Controller-Central");
                ns.exec(script, "Controller-Central", undefined, server);
                ns.write(`/lock/controllers/${server}.txt`, "lockfile.");
            }
            infectedSet.add(server);
        }
        else {
            ns.tprint(`could not gain access to ${server}`);
        }
    }
    else {
        ns.tprint(`cannot hack server ${server}, level ${ns.getPlayer().skills.hacking} is lower than ${ns.getServerRequiredHackingLevel(server)}!`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2luZmVjdC9pbmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUd0RSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sZUFBZSxHQUFnQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQy9DLEtBQUssTUFBTSxNQUFNLElBQUksTUFBTSxFQUFFO1FBQ3pCLE1BQU0sWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sY0FBYyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7S0FDckQ7SUFDRCxFQUFFLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLEtBQUssTUFBTSxLQUFLLElBQUksZUFBZSxDQUFDLE1BQU0sRUFBRTtRQUN4QyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDeEUsQ0FBQztBQUVELEtBQUssVUFBVSxjQUFjLENBQUMsRUFBUyxFQUFFLEdBQWUsRUFBRSxXQUF3QjtJQUM5RSxLQUFLLE1BQU0sTUFBTSxJQUFJLEdBQUcsQ0FBQyxXQUFXLEVBQUU7UUFDbEMsTUFBTSxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDakQsTUFBTSxjQUFjLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztLQUNqRDtBQUNMLENBQUM7QUFFRCxLQUFLLFVBQVUsWUFBWSxDQUFDLEVBQVMsRUFBRSxNQUFjLEVBQUUsV0FBd0I7SUFDM0UsTUFBTSxNQUFNLEdBQUcsdUJBQXVCLENBQUM7SUFDdkMsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFGLElBQUksT0FBTyxFQUFFO1FBQ1QsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHFCQUFxQixNQUFNLE1BQU0sQ0FBQyxFQUFFO2dCQUNuRCxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLHFDQUFxQyxFQUFFLHdDQUF3QyxDQUFDLEVBQUUsb0JBQW9CLENBQUMsQ0FBQTtnQkFDdkgsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBO2dCQUN4RCxFQUFFLENBQUMsS0FBSyxDQUFDLHFCQUFxQixNQUFNLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQTthQUMzRDtZQUNELFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0I7YUFDSTtZQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsNEJBQTRCLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDbkQ7S0FDSjtTQUNJO1FBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsTUFBTSxXQUFXLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxrQkFBa0IsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNoSjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXBTZXJ2ZXJzLCBnYWluQWNjZXNzLCBTZXJ2ZXJJbmZvIH0gZnJvbSBcIi9pbmZlY3QvdXRpbHMuanNcIjtcbmltcG9ydCBucyBmcm9tIFwiQG5zXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBucy5OUykge1xuICAgIGNvbnN0IG1hcHBlZCA9IGF3YWl0IG1hcFNlcnZlcnMobnMpO1xuICAgIGNvbnN0IGluZmVjdGVkU2VydmVyczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gICAgZm9yIChjb25zdCBzZXJ2ZXIgb2YgbWFwcGVkKSB7XG4gICAgICAgIGF3YWl0IGluZmVjdFNlcnZlcihucywgc2VydmVyLm5hbWUsIGluZmVjdGVkU2VydmVycyk7XG4gICAgICAgIGF3YWl0IHByb2Nlc3NTZXJ2ZXJzKG5zLCBzZXJ2ZXIsIGluZmVjdGVkU2VydmVycyk7XG4gICAgfVxuICAgIG5zLnRvYXN0KFwiY29tcGxldGVkIHByb2Nlc3Npbmcgb2Ygc2VydmVyIGxpc3RcIiwgXCJzdWNjZXNzXCIsIDEwMDAwKTtcbiAgICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcbiAgICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgaW5mZWN0ZWRTZXJ2ZXJzLnZhbHVlcygpKVxuICAgICAgICBlbGVtZW50cy5wdXNoKHZhbHVlKTtcbiAgICBucy50b2FzdChgaGFja2VkIHNlcnZlcnM6ICR7ZWxlbWVudHMuam9pbihcIiwgXCIpfWAsIFwic3VjY2Vzc1wiLCAxMDAwMClcbn1cblxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc1NlcnZlcnMobnM6IG5zLk5TLCBtYXA6IFNlcnZlckluZm8sIGluZmVjdGVkU2V0OiBTZXQ8c3RyaW5nPikge1xuICAgIGZvciAoY29uc3QgbWFwcGVkIG9mIG1hcC5zdWJfc2VydmVycykge1xuICAgICAgICBhd2FpdCBpbmZlY3RTZXJ2ZXIobnMsIG1hcHBlZC5uYW1lLCBpbmZlY3RlZFNldCk7XG4gICAgICAgIGF3YWl0IHByb2Nlc3NTZXJ2ZXJzKG5zLCBtYXBwZWQsIGluZmVjdGVkU2V0KTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluZmVjdFNlcnZlcihuczogbnMuTlMsIHNlcnZlcjogc3RyaW5nLCBpbmZlY3RlZFNldDogU2V0PHN0cmluZz4pIHtcbiAgICBjb25zdCBzY3JpcHQgPSBcIi9pbmZlY3QvY29udHJvbGxlci5qc1wiO1xuICAgIGNvbnN0IGNhbkhhY2sgPSBucy5nZXRQbGF5ZXIoKS5za2lsbHMuaGFja2luZyA+PSBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzZXJ2ZXIpO1xuICAgIGlmIChjYW5IYWNrKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdhaW5BY2Nlc3MobnMsIHNlcnZlcik7XG4gICAgICAgIGlmIChyZXN1bHQubnVrZSkge1xuICAgICAgICAgICAgaWYgKCFucy5maWxlRXhpc3RzKGAvbG9jay9jb250cm9sbGVycy8ke3NlcnZlcn0udHh0YCkpIHtcbiAgICAgICAgICAgICAgICBucy5zY3AoW3NjcmlwdCwgXCIvcG9ydC1yZWdpc3RyeS9jbGFzc2VzL211bHRpcG9ydC5qc1wiLCBcIi9wb3J0LXJlZ2lzdHJ5L2NsYXNzZXMvY29tbXVuaWNhdG9yLmpzXCJdLCBcIkNvbnRyb2xsZXItQ2VudHJhbFwiKVxuICAgICAgICAgICAgICAgIG5zLmV4ZWMoc2NyaXB0LCBcIkNvbnRyb2xsZXItQ2VudHJhbFwiLCB1bmRlZmluZWQsIHNlcnZlcilcbiAgICAgICAgICAgICAgICBucy53cml0ZShgL2xvY2svY29udHJvbGxlcnMvJHtzZXJ2ZXJ9LnR4dGAsIFwibG9ja2ZpbGUuXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbmZlY3RlZFNldC5hZGQoc2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5zLnRwcmludChgY291bGQgbm90IGdhaW4gYWNjZXNzIHRvICR7c2VydmVyfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBucy50cHJpbnQoYGNhbm5vdCBoYWNrIHNlcnZlciAke3NlcnZlcn0sIGxldmVsICR7bnMuZ2V0UGxheWVyKCkuc2tpbGxzLmhhY2tpbmd9IGlzIGxvd2VyIHRoYW4gJHtucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzZXJ2ZXIpfSFgKTtcbiAgICB9XG59Il19