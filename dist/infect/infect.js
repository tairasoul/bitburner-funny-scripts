import { mapServers, gainAccess } from "/infect/utils.js";
import Communicator from "/service-communicators/port-registry";
let pids = 0;
export async function main(ns) {
    ns.rm("controller-data/controllers.txt", "Controller-Central");
    pids = 0;
    const comms = new Communicator(ns);
    const mapped = await mapServers(ns);
    const infectedServers = new Set();
    const portsAssigned = await comms.assignFirstAvailable(1);
    const start = portsAssigned.assignedPorts[0];
    for (const server of mapped) {
        await infectServer(ns, server.name, infectedServers, start);
        await processServers(ns, server, infectedServers, start);
    }
    const elements = [];
    for (const value of infectedServers.values())
        elements.push(value);
    ns.toast(`hacked ${pids} servers!`, "info", 3000);
    ns.toast("completed processing of server list", "success", 2000);
    const portComms = ns.getPortHandle(start);
    await ns.sleep(7500);
    portComms.write(pids);
    await ns.sleep(20000);
    comms.unassignPorts([start]);
}
async function processServers(ns, map, infectedSet, commsStart) {
    for (const mapped of map.sub_servers) {
        await infectServer(ns, mapped.name, infectedSet, commsStart);
        await processServers(ns, mapped, infectedSet, commsStart);
    }
}
async function infectServer(ns, server, infectedSet, commsStart) {
    const script = "/infect/controller.js";
    const canHack = ns.getPlayer().skills.hacking >= ns.getServerRequiredHackingLevel(server);
    if (canHack) {
        const result = await gainAccess(ns, server);
        if (result.nuke) {
            ns.scp([script, "/general/multiport.js", "/service-communicators/port-registry.js", "/general/remote-file.js", "/service-communicators/ramnet.js", "/general/logs.js"], "Controller-Central", "home");
            ns.exec(script, "Controller-Central", undefined, server, commsStart);
            pids += 1;
            infectedSet.add(server);
        }
        else {
            ns.tprint(`could not gain access to ${server}`);
        }
    }
    else {
        ns.tprint(`cannot hack server ${server}, hacking skill ${ns.getPlayer().skills.hacking} is lower than required hacking skill ${ns.getServerRequiredHackingLevel(server)}!`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2luZmVjdC9pbmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUV0RSxPQUFPLFlBQVksTUFBTSxzQ0FBc0MsQ0FBQztBQUVoRSxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7QUFFYixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFTO0lBQ2hDLEVBQUUsQ0FBQyxFQUFFLENBQUMsaUNBQWlDLEVBQUUsb0JBQW9CLENBQUMsQ0FBQTtJQUM5RCxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ1QsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEMsTUFBTSxlQUFlLEdBQWdCLElBQUksR0FBRyxFQUFFLENBQUM7SUFDL0MsTUFBTSxhQUFhLEdBQUcsTUFBTSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QyxLQUFLLE1BQU0sTUFBTSxJQUFJLE1BQU0sRUFBRTtRQUN6QixNQUFNLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUQsTUFBTSxjQUFjLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDNUQ7SUFDRCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDcEIsS0FBSyxNQUFNLEtBQUssSUFBSSxlQUFlLENBQUMsTUFBTSxFQUFFO1FBQ3hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNqRCxFQUFFLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRSxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3pDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQixTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRUQsS0FBSyxVQUFVLGNBQWMsQ0FBQyxFQUFTLEVBQUUsR0FBZSxFQUFFLFdBQXdCLEVBQUUsVUFBa0I7SUFDbEcsS0FBSyxNQUFNLE1BQU0sSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFO1FBQ2xDLE1BQU0sWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM3RCxNQUFNLGNBQWMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztLQUM3RDtBQUNMLENBQUM7QUFFRCxLQUFLLFVBQVUsWUFBWSxDQUFDLEVBQVMsRUFBRSxNQUFjLEVBQUUsV0FBd0IsRUFBRSxVQUFrQjtJQUMvRixNQUFNLE1BQU0sR0FBRyx1QkFBdUIsQ0FBQztJQUN2QyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUYsSUFBSSxPQUFPLEVBQUU7UUFDVCxNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUMsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ2IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSx1QkFBdUIsRUFBRSx5Q0FBeUMsRUFBRSx5QkFBeUIsRUFBRSxrQ0FBa0MsRUFBRSxrQkFBa0IsQ0FBQyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxDQUFBO1lBQ3JNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDckUsSUFBSSxJQUFJLENBQUMsQ0FBQztZQUNWLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0I7YUFDSTtZQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsNEJBQTRCLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDbkQ7S0FDSjtTQUNJO1FBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsTUFBTSxtQkFBbUIsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLHlDQUF5QyxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQy9LO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcFNlcnZlcnMsIGdhaW5BY2Nlc3MsIFNlcnZlckluZm8gfSBmcm9tIFwiL2luZmVjdC91dGlscy5qc1wiO1xuaW1wb3J0IG5zIGZyb20gXCJAbnNcIjtcbmltcG9ydCBDb21tdW5pY2F0b3IgZnJvbSBcIi9zZXJ2aWNlLWNvbW11bmljYXRvcnMvcG9ydC1yZWdpc3RyeVwiO1xuXG5sZXQgcGlkcyA9IDA7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBucy5OUykge1xuICAgIG5zLnJtKFwiY29udHJvbGxlci1kYXRhL2NvbnRyb2xsZXJzLnR4dFwiLCBcIkNvbnRyb2xsZXItQ2VudHJhbFwiKVxuICAgIHBpZHMgPSAwO1xuICAgIGNvbnN0IGNvbW1zID0gbmV3IENvbW11bmljYXRvcihucyk7XG4gICAgY29uc3QgbWFwcGVkID0gYXdhaXQgbWFwU2VydmVycyhucyk7XG4gICAgY29uc3QgaW5mZWN0ZWRTZXJ2ZXJzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCBwb3J0c0Fzc2lnbmVkID0gYXdhaXQgY29tbXMuYXNzaWduRmlyc3RBdmFpbGFibGUoMSk7XG4gICAgY29uc3Qgc3RhcnQgPSBwb3J0c0Fzc2lnbmVkLmFzc2lnbmVkUG9ydHNbMF07XG4gICAgZm9yIChjb25zdCBzZXJ2ZXIgb2YgbWFwcGVkKSB7XG4gICAgICAgIGF3YWl0IGluZmVjdFNlcnZlcihucywgc2VydmVyLm5hbWUsIGluZmVjdGVkU2VydmVycywgc3RhcnQpO1xuICAgICAgICBhd2FpdCBwcm9jZXNzU2VydmVycyhucywgc2VydmVyLCBpbmZlY3RlZFNlcnZlcnMsIHN0YXJ0KTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGluZmVjdGVkU2VydmVycy52YWx1ZXMoKSlcbiAgICAgICAgZWxlbWVudHMucHVzaCh2YWx1ZSk7XG4gICAgbnMudG9hc3QoYGhhY2tlZCAke3BpZHN9IHNlcnZlcnMhYCwgXCJpbmZvXCIsIDMwMDApXG4gICAgbnMudG9hc3QoXCJjb21wbGV0ZWQgcHJvY2Vzc2luZyBvZiBzZXJ2ZXIgbGlzdFwiLCBcInN1Y2Nlc3NcIiwgMjAwMCk7XG4gICAgY29uc3QgcG9ydENvbW1zID0gbnMuZ2V0UG9ydEhhbmRsZShzdGFydClcbiAgICBhd2FpdCBucy5zbGVlcCg3NTAwKTtcbiAgICBwb3J0Q29tbXMud3JpdGUocGlkcyk7XG4gICAgYXdhaXQgbnMuc2xlZXAoMjAwMDApO1xuICAgIGNvbW1zLnVuYXNzaWduUG9ydHMoW3N0YXJ0XSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NTZXJ2ZXJzKG5zOiBucy5OUywgbWFwOiBTZXJ2ZXJJbmZvLCBpbmZlY3RlZFNldDogU2V0PHN0cmluZz4sIGNvbW1zU3RhcnQ6IG51bWJlcikge1xuICAgIGZvciAoY29uc3QgbWFwcGVkIG9mIG1hcC5zdWJfc2VydmVycykge1xuICAgICAgICBhd2FpdCBpbmZlY3RTZXJ2ZXIobnMsIG1hcHBlZC5uYW1lLCBpbmZlY3RlZFNldCwgY29tbXNTdGFydCk7XG4gICAgICAgIGF3YWl0IHByb2Nlc3NTZXJ2ZXJzKG5zLCBtYXBwZWQsIGluZmVjdGVkU2V0LCBjb21tc1N0YXJ0KTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluZmVjdFNlcnZlcihuczogbnMuTlMsIHNlcnZlcjogc3RyaW5nLCBpbmZlY3RlZFNldDogU2V0PHN0cmluZz4sIGNvbW1zU3RhcnQ6IG51bWJlcikge1xuICAgIGNvbnN0IHNjcmlwdCA9IFwiL2luZmVjdC9jb250cm9sbGVyLmpzXCI7XG4gICAgY29uc3QgY2FuSGFjayA9IG5zLmdldFBsYXllcigpLnNraWxscy5oYWNraW5nID49IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlcik7XG4gICAgaWYgKGNhbkhhY2spIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2FpbkFjY2Vzcyhucywgc2VydmVyKTtcbiAgICAgICAgaWYgKHJlc3VsdC5udWtlKSB7XG4gICAgICAgICAgICBucy5zY3AoW3NjcmlwdCwgXCIvZ2VuZXJhbC9tdWx0aXBvcnQuanNcIiwgXCIvc2VydmljZS1jb21tdW5pY2F0b3JzL3BvcnQtcmVnaXN0cnkuanNcIiwgXCIvZ2VuZXJhbC9yZW1vdGUtZmlsZS5qc1wiLCBcIi9zZXJ2aWNlLWNvbW11bmljYXRvcnMvcmFtbmV0LmpzXCIsIFwiL2dlbmVyYWwvbG9ncy5qc1wiXSwgXCJDb250cm9sbGVyLUNlbnRyYWxcIiwgXCJob21lXCIpXG4gICAgICAgICAgICBucy5leGVjKHNjcmlwdCwgXCJDb250cm9sbGVyLUNlbnRyYWxcIiwgdW5kZWZpbmVkLCBzZXJ2ZXIsIGNvbW1zU3RhcnQpO1xuICAgICAgICAgICAgcGlkcyArPSAxO1xuICAgICAgICAgICAgaW5mZWN0ZWRTZXQuYWRkKHNlcnZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBucy50cHJpbnQoYGNvdWxkIG5vdCBnYWluIGFjY2VzcyB0byAke3NlcnZlcn1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbnMudHByaW50KGBjYW5ub3QgaGFjayBzZXJ2ZXIgJHtzZXJ2ZXJ9LCBoYWNraW5nIHNraWxsICR7bnMuZ2V0UGxheWVyKCkuc2tpbGxzLmhhY2tpbmd9IGlzIGxvd2VyIHRoYW4gcmVxdWlyZWQgaGFja2luZyBza2lsbCAke25zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlcil9IWApO1xuICAgIH1cbn0iXX0=