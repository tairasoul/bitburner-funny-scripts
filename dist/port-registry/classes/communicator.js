import Multiport from "/port-registry/classes/multiport";
export default class Communicator {
    ns;
    requests;
    responses;
    constructor(ns) {
        this.ns = ns;
        this.requests = new Multiport(ns, 1, 100);
        this.responses = new Multiport(ns, 101, 10000);
    }
    async assignPorts(ports) {
        const message = {
            pid: this.ns.pid,
            ports,
            request: "assign"
        };
        this.requests.write(message);
        return await this.AwaitResponse();
    }
    unassignPorts(ports) {
        const message = {
            pid: this.ns.pid,
            ports,
            request: "unassign"
        };
        this.requests.write(message);
    }
    async assignFirstAvailable(amount) {
        const message = {
            pid: this.ns.pid,
            request: "assignAvailable",
            portAmount: amount
        };
        this.requests.write(message);
        return await this.AwaitResponse();
    }
    async AwaitResponse() {
        while (true) {
            await this.responses.nextWrite();
            if (this.responses.peek((data) => this.isForThisPID(data))) {
                return JSON.parse(this.responses.read((data) => this.isForThisPID(data)));
            }
        }
    }
    isForThisPID(data) {
        const parsed = JSON.parse(data);
        return parsed.pid == this.ns.pid;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbXVuaWNhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BvcnQtcmVnaXN0cnkvY2xhc3Nlcy9jb21tdW5pY2F0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sa0NBQWtDLENBQUM7QUFrQnpELE1BQU0sQ0FBQyxPQUFPLE9BQU8sWUFBWTtJQUNyQixFQUFFLENBQVE7SUFDVixRQUFRLENBQVk7SUFDcEIsU0FBUyxDQUFZO0lBQzdCLFlBQVksRUFBUztRQUNqQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBZTtRQUM3QixNQUFNLE9BQU8sR0FBbUI7WUFDNUIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRztZQUNoQixLQUFLO1lBQ0wsT0FBTyxFQUFFLFFBQVE7U0FDcEIsQ0FBQTtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdCLE9BQU8sTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFlO1FBQ3pCLE1BQU0sT0FBTyxHQUFtQjtZQUM1QixHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHO1lBQ2hCLEtBQUs7WUFDTCxPQUFPLEVBQUUsVUFBVTtTQUN0QixDQUFBO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxNQUFjO1FBQ3JDLE1BQU0sT0FBTyxHQUFtQjtZQUM1QixHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHO1lBQ2hCLE9BQU8sRUFBRSxpQkFBaUI7WUFDMUIsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQTtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdCLE9BQU8sTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFrQyxDQUFDO0lBQ3RFLENBQUM7SUFFTyxLQUFLLENBQUMsYUFBYTtRQUN2QixPQUFPLElBQUksRUFBRTtZQUNULE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNqQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFvQixDQUFDO2FBQ2hHO1NBQ0o7SUFDTCxDQUFDO0lBRU8sWUFBWSxDQUFDLElBQVk7UUFDN0IsTUFBTSxNQUFNLEdBQW9CLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsT0FBTyxNQUFNLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ3JDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBucyBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgTXVsdGlwb3J0IGZyb20gXCIvcG9ydC1yZWdpc3RyeS9jbGFzc2VzL211bHRpcG9ydFwiO1xuaW1wb3J0IHsgSGFuZGxlck1lc3NhZ2UgfSBmcm9tIFwiL3BvcnQtcmVnaXN0cnkvY2xhc3Nlcy9wb3J0LXJlZ2lzdHJ5XCI7XG5cbnR5cGUgUmVzcG9uc2VNZXNzYWdlID0ge1xuICAgIHBpZDogbnVtYmVyO1xuICAgIHJlc3VsdDogXCJhc3NpZ25lZFwiXG59IHwge1xuICAgIHBpZDogbnVtYmVyO1xuICAgIHJlc3VsdDogXCJjb3VsZG50IGFzc2lnblwiO1xuICAgIG93bmVkX2J5OiBudW1iZXJbXTtcbn1cblxudHlwZSBBc3NpZ25lZEF2YWlsYWJsZSA9IHtcbiAgICBwaWQ6IG51bWJlcjtcbiAgICByZXN1bHQ6IFwiYXNzaWduZWRBdmFpbGFibGVcIjtcbiAgICBhc3NpZ25lZFBvcnRzOiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbXVuaWNhdG9yIHtcbiAgICBwcml2YXRlIG5zOiBucy5OUztcbiAgICBwcml2YXRlIHJlcXVlc3RzOiBNdWx0aXBvcnQ7XG4gICAgcHJpdmF0ZSByZXNwb25zZXM6IE11bHRpcG9ydDtcbiAgICBjb25zdHJ1Y3RvcihuczogbnMuTlMpIHtcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLnJlcXVlc3RzID0gbmV3IE11bHRpcG9ydChucywgMSwgMTAwKTtcbiAgICAgICAgdGhpcy5yZXNwb25zZXMgPSBuZXcgTXVsdGlwb3J0KG5zLCAxMDEsIDEwMDAwKTtcbiAgICB9XG5cbiAgICBhc3luYyBhc3NpZ25Qb3J0cyhwb3J0czogbnVtYmVyW10pIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZTogSGFuZGxlck1lc3NhZ2UgPSB7XG4gICAgICAgICAgICBwaWQ6IHRoaXMubnMucGlkLFxuICAgICAgICAgICAgcG9ydHMsXG4gICAgICAgICAgICByZXF1ZXN0OiBcImFzc2lnblwiXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0cy53cml0ZShtZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuQXdhaXRSZXNwb25zZSgpO1xuICAgIH1cblxuICAgIHVuYXNzaWduUG9ydHMocG9ydHM6IG51bWJlcltdKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IEhhbmRsZXJNZXNzYWdlID0ge1xuICAgICAgICAgICAgcGlkOiB0aGlzLm5zLnBpZCxcbiAgICAgICAgICAgIHBvcnRzLFxuICAgICAgICAgICAgcmVxdWVzdDogXCJ1bmFzc2lnblwiXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0cy53cml0ZShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBhc3luYyBhc3NpZ25GaXJzdEF2YWlsYWJsZShhbW91bnQ6IG51bWJlcikge1xuICAgICAgICBjb25zdCBtZXNzYWdlOiBIYW5kbGVyTWVzc2FnZSA9IHtcbiAgICAgICAgICAgIHBpZDogdGhpcy5ucy5waWQsXG4gICAgICAgICAgICByZXF1ZXN0OiBcImFzc2lnbkF2YWlsYWJsZVwiLFxuICAgICAgICAgICAgcG9ydEFtb3VudDogYW1vdW50XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0cy53cml0ZShtZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuQXdhaXRSZXNwb25zZSgpIGFzIHVua25vd24gYXMgQXNzaWduZWRBdmFpbGFibGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBBd2FpdFJlc3BvbnNlKCkge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXNwb25zZXMubmV4dFdyaXRlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXNwb25zZXMucGVlaygoZGF0YSkgPT4gdGhpcy5pc0ZvclRoaXNQSUQoZGF0YSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5yZXNwb25zZXMucmVhZCgoZGF0YSkgPT4gdGhpcy5pc0ZvclRoaXNQSUQoZGF0YSkpKSBhcyBSZXNwb25zZU1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGlzRm9yVGhpc1BJRChkYXRhOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkOiBSZXNwb25zZU1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICByZXR1cm4gcGFyc2VkLnBpZCA9PSB0aGlzLm5zLnBpZDtcbiAgICB9XG59Il19