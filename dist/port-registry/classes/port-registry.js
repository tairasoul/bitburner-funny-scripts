import Multiport from "/port-registry/classes/multiport";
// Classes
class MessageQueue {
    port;
    constructor(ns, start, end) {
        this.port = new Multiport(ns, start, end);
    }
    get requestAvailable() {
        return this.port.peek() != null;
    }
    async processRequest(reqProcessor) {
        const data = this.port.read();
        const parsed = JSON.parse(data);
        await reqProcessor(parsed);
    }
}
class PortHandler {
    ns;
    requests;
    responses;
    assigned = [];
    constructor(ns) {
        this.ns = ns;
        this.requests = new MessageQueue(ns, 1, 100);
        this.responses = new Multiport(ns, 101, 10000);
    }
    async startHandling() {
        while (true) {
            await this.ns.sleep(1);
            if (this.requests.requestAvailable) {
                await this.requests.processRequest(async (message) => await this.handleRequest(message));
            }
        }
    }
    async handleRequest(message) {
        switch (message.request) {
            case "assign":
                if (this.arePortsUnassigned(message.ports)) {
                    this.assigned.push({
                        pid: message.pid,
                        ports: message.ports
                    });
                    this.sendResponse({
                        pid: message.pid,
                        result: "assigned"
                    });
                }
                else {
                    const owners = [];
                    for (const port of message.ports) {
                        const owner = this.getOwnerOf(port);
                        if (owner) {
                            owners.push(owner);
                        }
                    }
                    this.sendResponse({
                        pid: message.pid,
                        result: "couldnt assign",
                        owned_by: owners
                    });
                }
                break;
            case "unassign":
                const found = this.assigned.find((v) => {
                    let portsMatch = true;
                    message.ports.forEach((val) => {
                        if (!v.ports.includes(val)) {
                            portsMatch = false;
                        }
                    });
                    return portsMatch;
                });
                if (found) {
                    this.assigned = this.assigned.filter((v) => v != found);
                }
                break;
            case "assignAvailable":
                const availablePorts = [];
                let availableFound = 0;
                for (let i = 10001; i < 200000; i++) {
                    if (this.isPortUnassigned(i)) {
                        availablePorts.push(i);
                        availableFound++;
                    }
                    if (availableFound >= message.portAmount)
                        break;
                }
                this.assigned.push({
                    pid: message.pid,
                    ports: availablePorts
                });
                this.sendResponse({
                    result: "assignedAvailable",
                    pid: message.pid,
                    assignedPorts: availablePorts
                });
        }
    }
    getOwnerOf(port) {
        for (const assigned of this.assigned) {
            if (assigned.ports.includes(port))
                return assigned.pid;
        }
        return;
    }
    isPortUnassigned(port) {
        for (const assigned of this.assigned) {
            if (assigned.ports.includes(port)) {
                return false;
            }
        }
        return true;
    }
    getUnassignedPortsFromList(ports) {
        const unassigned = [];
        for (const port of ports) {
            if (this.isPortUnassigned(port))
                unassigned.push(port);
        }
        return unassigned;
    }
    arePortsUnassigned(ports) {
        for (const port of ports) {
            if (!this.isPortUnassigned(port))
                return false;
        }
        return true;
    }
    sendResponse(response) {
        this.responses.write(JSON.stringify(response), (_, port) => port.empty());
    }
}
// Main code
export async function main(ns) {
    ns.disableLog("ALL");
    const handler = new PortHandler(ns);
    await handler.startHandling();
}
//# sourceMappingURL=data:application/json;base64,