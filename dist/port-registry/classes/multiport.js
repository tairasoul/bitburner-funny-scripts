export default class Multiport {
    ports = [];
    constructor(ns, start, end) {
        for (let i = start; i <= end; i++) {
            this.ports.push(ns.getPortHandle(i));
        }
    }
    write(data, portPredicate = (_, __) => true) {
        const parsed = typeof data == "string" ? data : JSON.stringify(data);
        for (let i = 0; this.ports[i] != undefined; i++) {
            if (!this.ports[i].full() && portPredicate(i, this.ports[i])) {
                this.ports[i].write(parsed);
                break;
            }
        }
    }
    writeEmpty(data) {
        this.write(data, (_, port) => port.empty());
    }
    nextWrite() {
        const promises = [];
        for (const port of this.ports) {
            promises.push(port.nextWrite());
        }
        return Promise.any(promises);
    }
    clear() {
        for (const port of this.ports)
            port.clear();
    }
    empty() {
        for (const port of this.ports)
            if (!port.empty())
                return false;
        return true;
    }
    full() {
        for (const port of this.ports)
            if (!port.full())
                return false;
        return true;
    }
    peek(predicate = () => true) {
        for (const port of this.ports) {
            if (port.peek() != "NULL PORT DATA" && predicate(port.peek()))
                return port.peek();
        }
        return null;
    }
    read(predicate = () => true) {
        for (const port of this.ports) {
            if (port.peek() != "NULL PORT DATA" && predicate(port.peek()))
                return port.read();
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BvcnQtcmVnaXN0cnkvY2xhc3Nlcy9tdWx0aXBvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE9BQU8sT0FBTyxTQUFTO0lBQ2xCLEtBQUssR0FBdUIsRUFBRSxDQUFDO0lBQ3ZDLFlBQVksRUFBUyxFQUFFLEtBQWEsRUFBRSxHQUFXO1FBQzdDLEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFTLEVBQUUsZ0JBQXNFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSTtRQUNsRyxNQUFNLE1BQU0sR0FBRyxPQUFPLElBQUksSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM3QyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxhQUFhLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzVCLE1BQU07YUFDVDtTQUNKO0lBQ0wsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFTO1FBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELFNBQVM7UUFDTCxNQUFNLFFBQVEsR0FBb0IsRUFBRSxDQUFDO1FBQ3JDLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1NBQ25DO1FBQ0QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxLQUFLO1FBQ0QsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSztZQUN6QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELEtBQUs7UUFDRCxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLO1lBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNiLE9BQU8sS0FBSyxDQUFDO1FBQ3JCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFJO1FBQ0EsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDWixPQUFPLEtBQUssQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBSSxDQUFDLFlBQW9DLEdBQUcsRUFBRSxDQUFDLElBQUk7UUFDL0MsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzNCLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLGdCQUFnQixJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3pELE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUksQ0FBQyxZQUFvQyxHQUFHLEVBQUUsQ0FBQyxJQUFJO1FBQy9DLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUMzQixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxnQkFBZ0IsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN6RCxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMxQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBucyBmcm9tIFwiQG5zXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVsdGlwb3J0IHtcbiAgICBwcml2YXRlIHBvcnRzOiBucy5OZXRzY3JpcHRQb3J0W10gPSBbXTtcbiAgICBjb25zdHJ1Y3RvcihuczogbnMuTlMsIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5wb3J0cy5wdXNoKG5zLmdldFBvcnRIYW5kbGUoaSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgd3JpdGUoZGF0YTogYW55LCBwb3J0UHJlZGljYXRlOiAocG9ydE51bTogbnVtYmVyLCBwb3J0OiBucy5OZXRzY3JpcHRQb3J0KSA9PiBib29sZWFuID0gKF8sIF9fKSA9PiB0cnVlKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHR5cGVvZiBkYXRhID09IFwic3RyaW5nXCIgPyBkYXRhIDogSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyB0aGlzLnBvcnRzW2ldICE9IHVuZGVmaW5lZDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucG9ydHNbaV0uZnVsbCgpICYmIHBvcnRQcmVkaWNhdGUoaSwgdGhpcy5wb3J0c1tpXSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcnRzW2ldLndyaXRlKHBhcnNlZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB3cml0ZUVtcHR5KGRhdGE6IGFueSkge1xuICAgICAgICB0aGlzLndyaXRlKGRhdGEsIChfLCBwb3J0KSA9PiBwb3J0LmVtcHR5KCkpO1xuICAgIH1cblxuICAgIG5leHRXcml0ZSgpIHtcbiAgICAgICAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8dm9pZD5bXSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHBvcnQgb2YgdGhpcy5wb3J0cykge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChwb3J0Lm5leHRXcml0ZSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbnkocHJvbWlzZXMpO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHBvcnQgb2YgdGhpcy5wb3J0cylcbiAgICAgICAgICAgIHBvcnQuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBlbXB0eSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBwb3J0IG9mIHRoaXMucG9ydHMpIFxuICAgICAgICAgICAgaWYgKCFwb3J0LmVtcHR5KCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdWxsKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHBvcnQgb2YgdGhpcy5wb3J0cylcbiAgICAgICAgICAgIGlmICghcG9ydC5mdWxsKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwZWVrKHByZWRpY2F0ZTogKGRhdGE6IGFueSkgPT4gYm9vbGVhbiA9ICgpID0+IHRydWUpIHtcbiAgICAgICAgZm9yIChjb25zdCBwb3J0IG9mIHRoaXMucG9ydHMpIHtcbiAgICAgICAgICAgIGlmIChwb3J0LnBlZWsoKSAhPSBcIk5VTEwgUE9SVCBEQVRBXCIgJiYgcHJlZGljYXRlKHBvcnQucGVlaygpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9ydC5wZWVrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmVhZChwcmVkaWNhdGU6IChkYXRhOiBhbnkpID0+IGJvb2xlYW4gPSAoKSA9PiB0cnVlKSB7XG4gICAgICAgIGZvciAoY29uc3QgcG9ydCBvZiB0aGlzLnBvcnRzKSB7XG4gICAgICAgICAgICBpZiAocG9ydC5wZWVrKCkgIT0gXCJOVUxMIFBPUlQgREFUQVwiICYmIHByZWRpY2F0ZShwb3J0LnBlZWsoKSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvcnQucmVhZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn0iXX0=