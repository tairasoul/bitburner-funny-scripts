import { getReactKey } from "/react-handlers/get_react_key";
var sizes;
(function (sizes) {
    sizes[sizes["Smallest"] = 9] = "Smallest";
    sizes[sizes["Small"] = 16] = "Small";
    sizes[sizes["Medium"] = 25] = "Medium";
    sizes[sizes["Large"] = 36] = "Large";
})(sizes || (sizes = {}));
function turnIntoGrid(items) {
    const size = getSize(items);
    if (size != undefined) {
        return createGrid(items, size);
    }
    throw new Error(`Could not turn array of length ${items.length} into grid.`);
}
function createGrid(items, size) {
    const grid = [];
    const limit = size == sizes.Smallest ? 3 : size == sizes.Small ? 4 : size == sizes.Medium ? 5 : 6;
    console.log(limit);
    let index = 0;
    for (let i = 0; i < limit; i++) {
        grid.push([]);
        for (let j = 0; j < limit; j++) {
            grid[i].push(items[index]);
            index++;
        }
    }
    return grid;
}
function generateInstructions(currentPosition, targetPosition) {
    const instructions = [];
    let [currentRow, currentColumn] = currentPosition;
    const [targetRow, targetColumn] = targetPosition;
    while (currentRow !== targetRow || currentColumn !== targetColumn) {
        if (currentRow < targetRow) {
            instructions.push("s");
            currentRow++;
        }
        else if (currentRow > targetRow) {
            instructions.push("w");
            currentRow--;
        }
        if (currentColumn < targetColumn) {
            instructions.push("d");
            currentColumn++;
        }
        else if (currentColumn > targetColumn) {
            instructions.push("a");
            currentColumn--;
        }
    }
    instructions.push(" ");
    return instructions;
}
function getSize(items) {
    if (items.length == 6 * 6)
        return sizes.Large;
    if (items.length == 5 * 5)
        return sizes.Medium;
    if (items.length == 4 * 4)
        return sizes.Small;
    if (items.length == 3 * 3)
        return sizes.Smallest;
    return;
}
function findTarget(grid, target) {
    for (let i = 0; i < grid.length; i++) {
        for (let j = 0; j < grid[i].length; j++) {
            if (grid[i][j].textContent === target) {
                return [i, j];
            }
        }
    }
    return null;
}
export async function SolveSymbols(ns) {
    const doc = eval("document");
    const answerElement = doc.querySelector("#root > div.MuiBox-root > div > div > div:nth-child(3)");
    const targetElement = answerElement.querySelector("h5");
    const targets = targetElement.querySelectorAll("span");
    const symbolContainer = answerElement.querySelector("div");
    const symbols = symbolContainer.querySelectorAll("p");
    const grid = turnIntoGrid(Array.from(symbols));
    const reactKey = getReactKey(answerElement, "Props$");
    // @ts-ignore
    const keyDown = answerElement[reactKey].children[4].props.onKeyDown;
    let currentRow = 0;
    let currentColumn = 0;
    for (const target of targets) {
        await ns.sleep(200);
        const targetString = target.textContent.trim();
        const targetCoords = findTarget(grid, targetString);
        console.log(targetString);
        console.log(targetCoords);
        if (targetCoords) {
            const instructions = generateInstructions([currentRow, currentColumn], targetCoords);
            console.log([currentColumn, currentRow], targetCoords, instructions);
            currentRow = targetCoords[1];
            currentColumn = targetCoords[0];
            for (const instruction of instructions) {
                await ns.sleep(150);
                const event = {
                    preventDefault: () => { },
                    key: instruction,
                    isTrusted: true,
                    target: answerElement,
                    currentTarget: answerElement,
                    bubbles: true,
                    cancelable: true
                };
                keyDown(event);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,