import { getReactKey } from "/react-handlers/get_react_key";
var sizes;
(function (sizes) {
    sizes[sizes["Smallest"] = 9] = "Smallest";
    sizes[sizes["Small"] = 16] = "Small";
    sizes[sizes["Medium"] = 25] = "Medium";
    sizes[sizes["Large"] = 36] = "Large";
})(sizes || (sizes = {}));
function turnIntoGrid(items) {
    const size = getSize(items);
    console.log(size);
    if (size != undefined) {
        return createGrid(items, size);
    }
    throw new Error(`Could not turn array of length ${items.length} into grid.`);
}
function createGrid(items, size) {
    const grid = [];
    const limit = size == sizes.Smallest ? 3 : size == sizes.Small ? 4 : size == sizes.Medium ? 5 : 6;
    console.log(limit);
    let index = 0;
    for (let i = 0; i < limit; i++) {
        grid.push([]);
        for (let j = 0; j < limit; j++) {
            grid[i].push(items[index]);
            index++;
        }
    }
    return grid;
}
function generateInstructions(currentPosition, targetPosition) {
    const instructions = [];
    let [currentRow, currentColumn] = currentPosition;
    const [targetRow, targetColumn] = targetPosition;
    while (currentRow !== targetRow || currentColumn !== targetColumn) {
        if (currentRow < targetRow) {
            instructions.push("s");
            currentRow++;
        }
        else if (currentRow > targetRow) {
            instructions.push("w");
            currentRow--;
        }
        if (currentColumn < targetColumn) {
            instructions.push("d");
            currentColumn++;
        }
        else if (currentColumn > targetColumn) {
            instructions.push("a");
            currentColumn--;
        }
    }
    instructions.push(" ");
    return instructions;
}
function getSize(items) {
    if (items.length == 6 * 6)
        return sizes.Large;
    if (items.length == 5 * 5)
        return sizes.Medium;
    if (items.length == 4 * 4)
        return sizes.Small;
    if (items.length == 3 * 3)
        return sizes.Smallest;
    return;
}
function findPositions(grid, criteria) {
    const positions = [];
    for (let i = 0; i < grid.length; i++) {
        for (let j = 0; j < grid[i].length; j++) {
            if (criteria(grid[i][j])) {
                positions.push([i, j]);
            }
        }
    }
    return positions;
}
export async function SolveMinefield(ns) {
    const doc = eval("document");
    const answerElement = doc.querySelector("#root > div.MuiBox-root > div > div > div:nth-child(3)");
    const minefield = answerElement.querySelector("div");
    const mines = minefield.querySelectorAll("p");
    const grid = turnIntoGrid(Array.from(mines));
    console.log(grid);
    const positions = findPositions(grid, (elem) => elem.querySelector("svg") != null);
    const reactKey = getReactKey(answerElement, "Props$");
    // @ts-ignore
    const keyDown = answerElement[reactKey].children[2].props.onKeyDown;
    while (true) {
        await ns.sleep(1);
        if (answerElement.querySelector('h4').textContent?.trim() == "Mark all the mines!")
            break;
    }
    await ns.sleep(50);
    let current = [0, 0];
    for (const position of positions) {
        await ns.sleep(200);
        const instructions = generateInstructions(current, position);
        console.log(current, position, instructions);
        current = position;
        for (const instruction of instructions) {
            await ns.sleep(50);
            const event = {
                preventDefault: () => { },
                key: instruction,
                isTrusted: true,
                target: answerElement,
                currentTarget: answerElement,
                bubbles: true,
                cancelable: true
            };
            console.log(event);
            keyDown(event);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluZWZpZWxkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2luZmlsLWNoZWF0aW5nL2hhbmRsZXJzL21pbmVmaWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFNUQsSUFBSyxLQUtKO0FBTEQsV0FBSyxLQUFLO0lBQ04seUNBQWMsQ0FBQTtJQUNkLG9DQUFXLENBQUE7SUFDWCxzQ0FBWSxDQUFBO0lBQ1osb0NBQVcsQ0FBQTtBQUNmLENBQUMsRUFMSSxLQUFLLEtBQUwsS0FBSyxRQUtUO0FBRUQsU0FBUyxZQUFZLENBQUksS0FBVTtJQUMvQixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixJQUFJLElBQUksSUFBSSxTQUFTLEVBQUU7UUFDbkIsT0FBTyxVQUFVLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFBO0tBQ2pDO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsS0FBSyxDQUFDLE1BQU0sYUFBYSxDQUFDLENBQUM7QUFDakYsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFJLEtBQVUsRUFBRSxJQUFXO0lBQzFDLE1BQU0sSUFBSSxHQUFVLEVBQUUsQ0FBQztJQUN2QixNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDakcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNu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QyxDQUFDLENBQUM7SUFDdkMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDOUIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLE1BQU0sWUFBWSxHQUFHLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM3RCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUE7UUFDNUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUNuQixLQUFLLE1BQU0sV0FBVyxJQUFJLFlBQVksRUFBRTtZQUNwQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkIsTUFBTSxLQUFLLEdBQUc7Z0JBQ1YsY0FBYyxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7Z0JBQ3hCLEdBQUcsRUFBRSxXQUFXO2dCQUNoQixTQUFTLEVBQUUsSUFBSTtnQkFDZixNQUFNLEVBQUUsYUFBYTtnQkFDckIsYUFBYSxFQUFFLGFBQWE7Z0JBQzVCLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFVBQVUsRUFBRSxJQUFJO2FBQ25CLENBQUE7WUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25CLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNsQjtLQUNKO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgZ2V0UmVhY3RLZXkgfSBmcm9tIFwiL3JlYWN0LWhhbmRsZXJzL2dldF9yZWFjdF9rZXlcIjtcblxuZW51bSBzaXplcyB7XG4gICAgU21hbGxlc3QgPSAzKjMsXG4gICAgU21hbGwgPSA0KjQsXG4gICAgTWVkaXVtID0gNSo1LFxuICAgIExhcmdlID0gNio2XG59XG5cbmZ1bmN0aW9uIHR1cm5JbnRvR3JpZDxUPihpdGVtczogVFtdKSB7XG4gICAgY29uc3Qgc2l6ZSA9IGdldFNpemUoaXRlbXMpO1xuICAgIGNvbnNvbGUubG9nKHNpemUpO1xuICAgIGlmIChzaXplICE9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlR3JpZChpdGVtcywgc2l6ZSlcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgdHVybiBhcnJheSBvZiBsZW5ndGggJHtpdGVtcy5sZW5ndGh9IGludG8gZ3JpZC5gKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR3JpZDxUPihpdGVtczogVFtdLCBzaXplOiBzaXplcyk6IFRbXVtdIHtcbiAgICBjb25zdCBncmlkOiBUW11bXSA9IFtdO1xuICAgIGNvbnN0IGxpbWl0ID0gc2l6ZSA9PSBzaXplcy5TbWFsbGVzdCA/IDMgOiBzaXplID09IHNpemVzLlNtYWxsID8gNCA6IHNpemUgPT0gc2l6ZXMuTWVkaXVtID8gNSA6IDZcbiAgICBjb25zb2xlLmxvZyhsaW1pdCk7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbWl0OyBpKyspIHtcbiAgICAgICAgZ3JpZC5wdXNoKFtdKTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsaW1pdDsgaisrKSB7XG4gICAgICAgICAgICBncmlkW2ldLnB1c2goaXRlbXNbaW5kZXhdKTtcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGdyaWQ7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSW5zdHJ1Y3Rpb25zKGN1cnJlbnRQb3NpdGlvbjogW251bWJlciwgbnVtYmVyXSwgdGFyZ2V0UG9zaXRpb246IFtudW1iZXIsIG51bWJlcl0pOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgaW5zdHJ1Y3Rpb25zOiBzdHJpbmdbXSA9IFtdO1xuICAgIGxldCBbY3VycmVudFJvdywgY3VycmVudENvbHVtbl0gPSBjdXJyZW50UG9zaXRpb247XG4gICAgY29uc3QgW3RhcmdldFJvdywgdGFyZ2V0Q29sdW1uXSA9IHRhcmdldFBvc2l0aW9uO1xuXG4gICAgd2hpbGUgKGN1cnJlbnRSb3cgIT09IHRhcmdldFJvdyB8fCBjdXJyZW50Q29sdW1uICE9PSB0YXJnZXRDb2x1bW4pIHtcbiAgICAgICAgaWYgKGN1cnJlbnRSb3cgPCB0YXJnZXRSb3cpIHtcbiAgICAgICAgICAgIGluc3RydWN0aW9ucy5wdXNoKFwic1wiKTtcbiAgICAgICAgICAgIGN1cnJlbnRSb3crKztcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50Um93ID4gdGFyZ2V0Um93KSB7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbnMucHVzaChcIndcIik7XG4gICAgICAgICAgICBjdXJyZW50Um93LS07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudENvbHVtbiA8IHRhcmdldENvbHVtbikge1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zLnB1c2goXCJkXCIpO1xuICAgICAgICAgICAgY3VycmVudENvbHVtbisrO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRDb2x1bW4gPiB0YXJnZXRDb2x1bW4pIHtcbiAgICAgICAgICAgIGluc3RydWN0aW9ucy5wdXNoKFwiYVwiKTtcbiAgICAgICAgICAgIGN1cnJlbnRDb2x1bW4tLTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluc3RydWN0aW9ucy5wdXNoKFwiIFwiKTtcblxuICAgIHJldHVybiBpbnN0cnVjdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGdldFNpemUoaXRlbXM6IGFueVtdKSB7XG4gICAgaWYgKGl0ZW1zLmxlbmd0aCA9PSA2KjYpXG4gICAgICAgIHJldHVybiBzaXplcy5MYXJnZTtcbiAgICBpZiAoaXRlbXMubGVuZ3RoID09IDUqNSlcbiAgICAgICAgcmV0dXJuIHNpemVzLk1lZGl1bTtcbiAgICBpZiAoaXRlbXMubGVuZ3RoID09IDQqNClcbiAgICAgICAgcmV0dXJuIHNpemVzLlNtYWxsO1xuICAgIGlmIChpdGVtcy5sZW5ndGggPT0gMyozKVxuICAgICAgICByZXR1cm4gc2l6ZXMuU21hbGxlc3Q7XG4gICAgcmV0dXJuO1xufVxuXG5mdW5jdGlvbiBmaW5kUG9zaXRpb25zPFQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oZ3JpZDogVFtdW10sIGNyaXRlcmlhOiAoZWxlbWVudDogVCkgPT4gYm9vbGVhbik6IFtudW1iZXIsIG51bWJlcl1bXSB7XG4gICAgY29uc3QgcG9zaXRpb25zOiBbbnVtYmVyLCBudW1iZXJdW10gPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyaWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncmlkW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoY3JpdGVyaWEoZ3JpZFtpXVtqXSkpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChbaSwgal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwb3NpdGlvbnM7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBTb2x2ZU1pbmVmaWVsZChuczogTlMpIHtcbiAgICBjb25zdCBkb2MgPSBldmFsKFwiZG9jdW1lbnRcIikgYXMgRG9jdW1lbnQ7XG4gICAgY29uc3QgYW5zd2VyRWxlbWVudCA9IGRvYy5xdWVyeVNlbGVjdG9yKFwiI3Jvb3QgPiBkaXYuTXVpQm94LXJvb3QgPiBkaXYgPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDMpXCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IG1pbmVmaWVsZCA9IGFuc3dlckVsZW1lbnQucXVlcnlTZWxlY3RvcihcImRpdlwiKSBhcyBIVE1MRWxlbWVudDtcbiAgICBjb25zdCBtaW5lcyA9IG1pbmVmaWVsZC5xdWVyeVNlbGVjdG9yQWxsKFwicFwiKTtcbiAgICBjb25zdCBncmlkID0gdHVybkludG9HcmlkKEFycmF5LmZyb20obWluZXMpKTtcbiAgICBjb25zb2xlLmxvZyhncmlkKTtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBmaW5kUG9zaXRpb25zKGdyaWQsIChlbGVtKSA9PiBlbGVtLnF1ZXJ5U2VsZWN0b3IoXCJzdmdcIikgIT0gbnVsbCk7XG4gICAgY29uc3QgcmVhY3RLZXkgPSBnZXRSZWFjdEtleShhbnN3ZXJFbGVtZW50LCBcIlByb3BzJFwiKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qga2V5RG93biA9IGFuc3dlckVsZW1lbnRbcmVhY3RLZXldLmNoaWxkcmVuWzJdLnByb3BzLm9uS2V5RG93bjtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBhd2FpdCBucy5zbGVlcCgxKVxuICAgICAgICBpZiAoKGFuc3dlckVsZW1lbnQucXVlcnlTZWxlY3RvcignaDQnKSBhcyBIVE1MRWxlbWVudCkudGV4dENvbnRlbnQ/LnRyaW0oKSA9PSBcIk1hcmsgYWxsIHRoZSBtaW5lcyFcIilcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBcbiAgICBhd2FpdCBucy5zbGVlcCg1MCk7XG5cbiAgICBsZXQgY3VycmVudDogW251bWJlciwgbnVtYmVyXSA9IFswLCAwXTtcbiAgICBmb3IgKGNvbnN0IHBvc2l0aW9uIG9mIHBvc2l0aW9ucykge1xuICAgICAgICBhd2FpdCBucy5zbGVlcCgyMDApO1xuICAgICAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSBnZW5lcmF0ZUluc3RydWN0aW9ucyhjdXJyZW50LCBwb3NpdGlvbik7XG4gICAgICAgIGNvbnNvbGUubG9nKGN1cnJlbnQsIHBvc2l0aW9uLCBpbnN0cnVjdGlvbnMpXG4gICAgICAgIGN1cnJlbnQgPSBwb3NpdGlvbjtcbiAgICAgICAgZm9yIChjb25zdCBpbnN0cnVjdGlvbiBvZiBpbnN0cnVjdGlvbnMpIHtcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0ge1xuICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiAoKSA9PiB7fSxcbiAgICAgICAgICAgICAgICBrZXk6IGluc3RydWN0aW9uLFxuICAgICAgICAgICAgICAgIGlzVHJ1c3RlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGFuc3dlckVsZW1lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudFRhcmdldDogYW5zd2VyRWxlbWVudCxcbiAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2ZW50KTtcbiAgICAgICAgICAgIGtleURvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==