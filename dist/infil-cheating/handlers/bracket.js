import { getReactKey } from "/react-handlers/get_react_key";
export async function SolveBracket(ns) {
    const doc = eval("document");
    const answerElement = doc.querySelector("#root > div.MuiBox-root > div > div > div:nth-child(3)");
    const reactKey = getReactKey(answerElement, "Props$");
    // @ts-ignore
    const children = answerElement[reactKey].children;
    const text = children[1].props.children[0];
    console.log(text);
    const keyDown = children[2].props.onKeyDown;
    const brackets = text.split("").reverse();
    const associations = {
        "<": ">",
        "[": "]",
        "{": "}",
        "(": ")"
    };
    for (const bracket of brackets) {
        await ns.sleep(400);
        const associated = associations[bracket];
        const event = {
            preventDefault: () => { },
            key: associated,
            isTrusted: true,
            target: answerElement,
            currentTarget: answerElement,
            bubbles: true,
            cancelable: true,
        };
        console.log(event);
        keyDown(event);
        /*answerElement.dispatchEvent(
            new KeyboardEvent("keypress", {
                key: associated
            })
        )*/
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJhY2tldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbmZpbC1jaGVhdGluZy9oYW5kbGVycy9icmFja2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUU1RCxNQUFNLENBQUMsS0FBSyxVQUFVLFlBQVksQ0FBQyxFQUFNO0lBQ3JDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQztJQUN6QyxNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLHdEQUF3RCxDQUFnQixDQUFDO0lBQ2pILE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdEQsYUFBYTtJQUNiLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDbEQsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDckQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUM1QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBK0IsQ0FBQztJQUN2RSxNQUFNLFlBQVksR0FBRztRQUNqQixHQUFHLEVBQUUsR0FBRztRQUNSLEdBQUcsRUFBRSxHQUFHO1FBQ1IsR0FBRyxFQUFFLEdBQUc7UUFDUixHQUFHLEVBQUUsR0FBRztLQUNYLENBQUE7SUFDRCxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtRQUM1QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDbkIsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sS0FBSyxHQUFHO1lBQ1YsY0FBYyxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7WUFDeEIsR0FBRyxFQUFFLFVBQVU7WUFDZixTQUFTLEVBQUUsSUFBSTtZQUNmLE1BQU0sRUFBRSxhQUFhO1lBQ3JCLGFBQWEsRUFBRSxhQUFhO1lBQzVCLE9BQU8sRUFBRSxJQUFJO1lBQ2IsVUFBVSxFQUFFLElBQUk7U0FDbkIsQ0FBQztRQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2Y7Ozs7V0FJRztLQUNOO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgZ2V0UmVhY3RLZXkgfSBmcm9tIFwiL3JlYWN0LWhhbmRsZXJzL2dldF9yZWFjdF9rZXlcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFNvbHZlQnJhY2tldChuczogTlMpIHtcbiAgICBjb25zdCBkb2MgPSBldmFsKFwiZG9jdW1lbnRcIikgYXMgRG9jdW1lbnQ7XG4gICAgY29uc3QgYW5zd2VyRWxlbWVudCA9IGRvYy5xdWVyeVNlbGVjdG9yKFwiI3Jvb3QgPiBkaXYuTXVpQm94LXJvb3QgPiBkaXYgPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDMpXCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IHJlYWN0S2V5ID0gZ2V0UmVhY3RLZXkoYW5zd2VyRWxlbWVudCwgXCJQcm9wcyRcIik7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGNoaWxkcmVuID0gYW5zd2VyRWxlbWVudFtyZWFjdEtleV0uY2hpbGRyZW47XG4gICAgY29uc3QgdGV4dCA9IGNoaWxkcmVuWzFdLnByb3BzLmNoaWxkcmVuWzBdIGFzIHN0cmluZztcbiAgICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICBjb25zdCBrZXlEb3duID0gY2hpbGRyZW5bMl0ucHJvcHMub25LZXlEb3duO1xuICAgIGNvbnN0IGJyYWNrZXRzID0gdGV4dC5zcGxpdChcIlwiKS5yZXZlcnNlKCkgYXMgKFwiPFwiIHwgXCJbXCIgfCBcIntcIiB8IFwiKFwiKVtdO1xuICAgIGNvbnN0IGFzc29jaWF0aW9ucyA9IHtcbiAgICAgICAgXCI8XCI6IFwiPlwiLFxuICAgICAgICBcIltcIjogXCJdXCIsXG4gICAgICAgIFwie1wiOiBcIn1cIixcbiAgICAgICAgXCIoXCI6IFwiKVwiXG4gICAgfVxuICAgIGZvciAoY29uc3QgYnJhY2tldCBvZiBicmFja2V0cykge1xuICAgICAgICBhd2FpdCBucy5zbGVlcCg0MDApXG4gICAgICAgIGNvbnN0IGFzc29jaWF0ZWQgPSBhc3NvY2lhdGlvbnNbYnJhY2tldF07XG4gICAgICAgIGNvbnN0IGV2ZW50ID0ge1xuICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6ICgpID0+IHt9LFxuICAgICAgICAgICAga2V5OiBhc3NvY2lhdGVkLFxuICAgICAgICAgICAgaXNUcnVzdGVkOiB0cnVlLFxuICAgICAgICAgICAgdGFyZ2V0OiBhbnN3ZXJFbGVtZW50LFxuICAgICAgICAgICAgY3VycmVudFRhcmdldDogYW5zd2VyRWxlbWVudCxcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICBjb25zb2xlLmxvZyhldmVudCk7XG4gICAgICAgIGtleURvd24oZXZlbnQpO1xuICAgICAgICAvKmFuc3dlckVsZW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgIG5ldyBLZXlib2FyZEV2ZW50KFwia2V5cHJlc3NcIiwge1xuICAgICAgICAgICAgICAgIGtleTogYXNzb2NpYXRlZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKSovXG4gICAgfVxufSJdfQ==