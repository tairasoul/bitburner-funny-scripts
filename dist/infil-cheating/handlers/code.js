import { getReactKey } from "/react-handlers/get_react_key";
const arrows = {
    up: "↑",
    down: "↓",
    left: "←",
    right: "→"
};
var arrowKeys;
(function (arrowKeys) {
    arrowKeys["Up"] = "ArrowUp";
    arrowKeys["Down"] = "ArrowDown";
    arrowKeys["Left"] = "ArrowLeft";
    arrowKeys["Right"] = "ArrowRight";
})(arrowKeys || (arrowKeys = {}));
export async function SolveCode() {
    const doc = eval("document");
    const answerElement = doc.querySelector("#root > div.MuiBox-root > div > div > div:nth-child(3)");
    const arrowContainer = answerElement.querySelector("div");
    const arrowSpans = arrowContainer.querySelectorAll("span");
    const reactKey = getReactKey(answerElement, "Props$");
    // @ts-ignore
    const keyDown = answerElement[reactKey].children[2].props.onKeyDown;
    for (let i = 1; i <= arrowSpans.length; i++) {
        const selector = `:nth-child(${i})`;
        const arrowElement = arrowContainer.querySelector(selector);
        const text = arrowElement.textContent;
        switch (text) {
            case arrows.up:
                const upEvent = {
                    preventDefault: () => { },
                    key: arrowKeys.Up,
                    isTrusted: true,
                    target: answerElement,
                    currentTarget: answerElement,
                    bubbles: true,
                    cancelable: true
                };
                keyDown(upEvent);
                break;
            case arrows.down:
                const downEvent = {
                    preventDefault: () => { },
                    key: arrowKeys.Down,
                    isTrusted: true,
                    target: answerElement,
                    currentTarget: answerElement,
                    bubbles: true,
                    cancelable: true
                };
                keyDown(downEvent);
                break;
            case arrows.left:
                const leftEvent = {
                    preventDefault: () => { },
                    key: arrowKeys.Left,
                    isTrusted: true,
                    target: answerElement,
                    currentTarget: answerElement,
                    bubbles: true,
                    cancelable: true
                };
                keyDown(leftEvent);
                break;
            case arrows.right:
                const rightEvent = {
                    preventDefault: () => { },
                    key: arrowKeys.Right,
                    isTrusted: true,
                    target: answerElement,
                    currentTarget: answerElement,
                    bubbles: true,
                    cancelable: true
                };
                keyDown(rightEvent);
                break;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbmZpbC1jaGVhdGluZy9oYW5kbGVycy9jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUU1RCxNQUFNLE1BQU0sR0FBRztJQUNYLEVBQUUsRUFBRSxHQUFHO0lBQ1AsSUFBSSxFQUFFLEdBQUc7SUFDVCxJQUFJLEVBQUUsR0FBRztJQUNULEtBQUssRUFBRSxHQUFHO0NBQ2IsQ0FBQTtBQUVELElBQUssU0FLSjtBQUxELFdBQUssU0FBUztJQUNWLDJCQUFjLENBQUE7SUFDZCwrQkFBa0IsQ0FBQTtJQUNsQiwrQkFBa0IsQ0FBQTtJQUNsQixpQ0FBb0IsQ0FBQTtBQUN4QixDQUFDLEVBTEksU0FBUyxLQUFULFNBQVMsUUFLYjtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsU0FBUztJQUMzQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFhLENBQUM7SUFDekMsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyx3REFBd0QsQ0FBZ0IsQ0FBQztJQUNqSCxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBZ0IsQ0FBQztJQUN6RSxNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0QsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN0RCxhQUFhO0lBQ2IsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBQ3BFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUM7UUFDcEMsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQWdCLENBQUM7UUFDM0UsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLFdBQXFCLENBQUM7UUFDaEQsUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLE1BQU0sQ0FBQyxFQUFFO2dCQUNWLE1BQU0sT0FBTyxHQUFHO29CQUNaLGNBQWMsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDO29CQUN4QixHQUFHLEVBQUUsU0FBUyxDQUFDLEVBQUU7b0JBQ2pCLFNBQVMsRUFBRSxJQUFJO29CQUNmLE1BQU0sRUFBRSxhQUFhO29CQUNyQixhQUFhLEVBQUUsYUFBYTtvQkFDNUIsT0FBTyxFQUFFLElBQUk7b0JBQ2IsVUFBVSxFQUFFLElBQUk7aUJBQ25CLENBQUE7Z0JBQ0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNqQixNQUFNO1lBQ1YsS0FBSyxNQUFNLENBQUMsSUFBSTtnQkFDWixNQUFNLFNBQVMsR0FBRztvQkFDZCxjQUFjLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztvQkFDeEIsR0FBRyxFQUFFLFNBQVMsQ0FBQyxJQUFJO29CQUNuQixTQUFTLEVBQUUsSUFBSTtvQkFDZixNQUFNLEVBQUUsYUFBYTtvQkFDckIsYUFBYSxFQUFFLGFBQWE7b0JBQzVCLE9BQU8sRUFBRSxJQUFJO29CQUNiLFVBQVUsRUFBRSxJQUFJO2lCQUNuQixDQUFBO2dCQUNELE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtnQkFDbEIsTUFBTTtZQUNWLEtBQUssTUFBTSxDQUFDLElBQUk7Z0JBQ1osTUFBTSxTQUFTLEdBQUc7b0JBQ2QsY0FBYyxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7b0JBQ3hCLEdBQUcsRUFBRSxTQUFTLENBQUMsSUFBSTtvQkFDbkIsU0FBUyxFQUFFLElBQUk7b0JBQ2YsTUFBTSxFQUFFLGFBQWE7b0JBQ3JCLGFBQWEsRUFBRSxhQUFhO29CQUM1QixPQUFPLEVBQUUsSUFBSTtvQkFDYixVQUFVLEVBQUUsSUFBSTtpQkFDbkIsQ0FBQTtnQkFDRCxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7Z0JBQ2xCLE1BQU07WUFDVixLQUFLLE1BQU0sQ0FBQyxLQUFLO2dCQUNiLE1BQU0sVUFBVSxHQUFHO29CQUNmLGNBQWMsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDO29CQUN4QixHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUs7b0JBQ3BCLFNBQVMsRUFBRSxJQUFJO29CQUNmLE1BQU0sRUFBRSxhQUFhO29CQUNyQixhQUFhLEVBQUUsYUFBYTtvQkFDNUIsT0FBTyxFQUFFLElBQUk7b0JBQ2IsVUFBVSxFQUFFLElBQUk7aUJBQ25CLENBQUE7Z0JBQ0QsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO2dCQUNuQixNQUFNO1NBQ2I7S0FDSjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRSZWFjdEtleSB9IGZyb20gXCIvcmVhY3QtaGFuZGxlcnMvZ2V0X3JlYWN0X2tleVwiO1xuXG5jb25zdCBhcnJvd3MgPSB7XG4gICAgdXA6IFwi4oaRXCIsXG4gICAgZG93bjogXCLihpNcIixcbiAgICBsZWZ0OiBcIuKGkFwiLFxuICAgIHJpZ2h0OiBcIuKGklwiXG59XG5cbmVudW0gYXJyb3dLZXlzIHtcbiAgICBVcCA9IFwiQXJyb3dVcFwiLFxuICAgIERvd24gPSBcIkFycm93RG93blwiLFxuICAgIExlZnQgPSBcIkFycm93TGVmdFwiLFxuICAgIFJpZ2h0ID0gXCJBcnJvd1JpZ2h0XCJcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFNvbHZlQ29kZSgpIHtcbiAgICBjb25zdCBkb2MgPSBldmFsKFwiZG9jdW1lbnRcIikgYXMgRG9jdW1lbnQ7XG4gICAgY29uc3QgYW5zd2VyRWxlbWVudCA9IGRvYy5xdWVyeVNlbGVjdG9yKFwiI3Jvb3QgPiBkaXYuTXVpQm94LXJvb3QgPiBkaXYgPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDMpXCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGFycm93Q29udGFpbmVyID0gYW5zd2VyRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiZGl2XCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGFycm93U3BhbnMgPSBhcnJvd0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwic3BhblwiKTtcbiAgICBjb25zdCByZWFjdEtleSA9IGdldFJlYWN0S2V5KGFuc3dlckVsZW1lbnQsIFwiUHJvcHMkXCIpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBrZXlEb3duID0gYW5zd2VyRWxlbWVudFtyZWFjdEtleV0uY2hpbGRyZW5bMl0ucHJvcHMub25LZXlEb3duO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGFycm93U3BhbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBgOm50aC1jaGlsZCgke2l9KWA7XG4gICAgICAgIGNvbnN0IGFycm93RWxlbWVudCA9IGFycm93Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBjb25zdCB0ZXh0ID0gYXJyb3dFbGVtZW50LnRleHRDb250ZW50IGFzIHN0cmluZztcbiAgICAgICAgc3dpdGNoICh0ZXh0KSB7XG4gICAgICAgICAgICBjYXNlIGFycm93cy51cDpcbiAgICAgICAgICAgICAgICBjb25zdCB1cEV2ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogKCkgPT4ge30sXG4gICAgICAgICAgICAgICAgICAgIGtleTogYXJyb3dLZXlzLlVwLFxuICAgICAgICAgICAgICAgICAgICBpc1RydXN0ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogYW5zd2VyRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRhcmdldDogYW5zd2VyRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrZXlEb3duKHVwRXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhcnJvd3MuZG93bjpcbiAgICAgICAgICAgICAgICBjb25zdCBkb3duRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiAoKSA9PiB7fSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBhcnJvd0tleXMuRG93bixcbiAgICAgICAgICAgICAgICAgICAgaXNUcnVzdGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGFuc3dlckVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IGFuc3dlckVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAga2V5RG93bihkb3duRXZlbnQpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFycm93cy5sZWZ0OlxuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRFdmVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6ICgpID0+IHt9LFxuICAgICAgICAgICAgICAgICAgICBrZXk6IGFycm93S2V5cy5MZWZ0LFxuICAgICAgICAgICAgICAgICAgICBpc1RydXN0ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogYW5zd2VyRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRhcmdldDogYW5zd2VyRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrZXlEb3duKGxlZnRFdmVudClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYXJyb3dzLnJpZ2h0OlxuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0RXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiAoKSA9PiB7fSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBhcnJvd0tleXMuUmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGlzVHJ1c3RlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBhbnN3ZXJFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGFyZ2V0OiBhbnN3ZXJFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGtleURvd24ocmlnaHRFdmVudClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=