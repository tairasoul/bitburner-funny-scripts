import { getReactKey } from "/react-handlers/get_react_key";
export async function SolveBackwards() {
    const doc = eval("document");
    const mainWindow = doc.querySelector("#root > div.MuiBox-root > div > div:nth-child(3)")?.parentNode?.querySelector("div:nth-child(3)");
    const textElement = mainWindow.querySelector(":nth-child(2)");
    console.log(textElement);
    const inputHandler = mainWindow.querySelector(":nth-child(3)");
    const text = textElement.textContent.replace(/\s+/g, "").split("");
    console.log(text);
    const keyboardInputs = [];
    for (const char of text) {
        keyboardInputs.push({
            key: char,
            shiftKey: false,
            ctrlKey: false,
            altKey: false
        });
    }
    console.log(keyboardInputs);
    const props = getReactKey(inputHandler, "Props$");
    // @ts-ignore
    const elem = inputHandler[props];
    const child = elem.children[1].props;
    const keyDown = child.onKeyDown;
    for (const input of keyboardInputs) {
        keyDown({
            preventDefault: () => { },
            key: input.key,
            isTrusted: true,
            target: inputHandler,
            currentTarget: inputHandler,
            bubbles: true,
            cancelable: true
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja3dhcmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2luZmlsLWNoZWF0aW5nL2hhbmRsZXJzL2JhY2t3YXJkcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFNUQsTUFBTSxDQUFDLEtBQUssVUFBVSxjQUFjO0lBQ2hDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQztJQUN6QyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLGtEQUFrRCxDQUFDLEVBQUUsVUFBVSxFQUFFLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBbUIsQ0FBQztJQUMxSixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBZ0IsQ0FBQztJQUM3RSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFnQixDQUFDO0lBQzlFLE1BQU0sSUFBSSxHQUFJLFdBQVcsQ0FBQyxXQUFzQixDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9FLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEIsTUFBTSxjQUFjLEdBQXdFLEVBQUUsQ0FBQztJQUMvRixLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksRUFBRTtRQUNyQixjQUFjLENBQUMsSUFBSSxDQUNmO1lBQ0ksR0FBRyxFQUFFLElBQUk7WUFDVCxRQUFRLEVBQUUsS0FBSztZQUNmLE9BQU8sRUFBRSxLQUFLO1lBQ2QsTUFBTSxFQUFFLEtBQUs7U0FDaEIsQ0FDSixDQUFBO0tBQ0o7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQzNCLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbEQsYUFBYTtJQUNiLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNyQyxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBQ2hDLEtBQUssTUFBTSxLQUFLLElBQUksY0FBYyxFQUFFO1FBQ2hDLE9BQU8sQ0FBQztZQUNKLGNBQWMsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDO1lBQ3hCLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLFNBQVMsRUFBRSxJQUFJO1lBQ2YsTUFBTSxFQUFFLFlBQVk7WUFDcEIsYUFBYSxFQUFFLFlBQVk7WUFDM0IsT0FBTyxFQUFFLElBQUk7WUFDYixVQUFVLEVBQUUsSUFBSTtTQUNuQixDQUFDLENBQUE7S0FDTDtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRSZWFjdEtleSB9IGZyb20gXCIvcmVhY3QtaGFuZGxlcnMvZ2V0X3JlYWN0X2tleVwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gU29sdmVCYWNrd2FyZHMoKSB7XG4gICAgY29uc3QgZG9jID0gZXZhbChcImRvY3VtZW50XCIpIGFzIERvY3VtZW50O1xuICAgIGNvbnN0IG1haW5XaW5kb3cgPSBkb2MucXVlcnlTZWxlY3RvcihcIiNyb290ID4gZGl2Lk11aUJveC1yb290ID4gZGl2ID4gZGl2Om50aC1jaGlsZCgzKVwiKT8ucGFyZW50Tm9kZT8ucXVlcnlTZWxlY3RvcihcImRpdjpudGgtY2hpbGQoMylcIikgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgY29uc3QgdGV4dEVsZW1lbnQgPSBtYWluV2luZG93LnF1ZXJ5U2VsZWN0b3IoXCI6bnRoLWNoaWxkKDIpXCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnNvbGUubG9nKHRleHRFbGVtZW50KTtcbiAgICBjb25zdCBpbnB1dEhhbmRsZXIgPSBtYWluV2luZG93LnF1ZXJ5U2VsZWN0b3IoXCI6bnRoLWNoaWxkKDMpXCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IHRleHQgPSAodGV4dEVsZW1lbnQudGV4dENvbnRlbnQgYXMgc3RyaW5nKS5yZXBsYWNlKC9cXHMrL2csIFwiXCIpLnNwbGl0KFwiXCIpO1xuICAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgIGNvbnN0IGtleWJvYXJkSW5wdXRzOiB7a2V5OiBzdHJpbmc7c2hpZnRLZXk6IGJvb2xlYW47Y3RybEtleTogYm9vbGVhbjthbHRLZXk6IGJvb2xlYW47fVtdID0gW107XG4gICAgZm9yIChjb25zdCBjaGFyIG9mIHRleHQpIHtcbiAgICAgICAga2V5Ym9hcmRJbnB1dHMucHVzaChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IGNoYXIsXG4gICAgICAgICAgICAgICAgc2hpZnRLZXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGN0cmxLZXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFsdEtleTogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgIH1cbiAgICBjb25zb2xlLmxvZyhrZXlib2FyZElucHV0cylcbiAgICBjb25zdCBwcm9wcyA9IGdldFJlYWN0S2V5KGlucHV0SGFuZGxlciwgXCJQcm9wcyRcIik7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGVsZW0gPSBpbnB1dEhhbmRsZXJbcHJvcHNdO1xuICAgIGNvbnN0IGNoaWxkID0gZWxlbS5jaGlsZHJlblsxXS5wcm9wcztcbiAgICBjb25zdCBrZXlEb3duID0gY2hpbGQub25LZXlEb3duO1xuICAgIGZvciAoY29uc3QgaW5wdXQgb2Yga2V5Ym9hcmRJbnB1dHMpIHtcbiAgICAgICAga2V5RG93bih7XG4gICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogKCkgPT4ge30sXG4gICAgICAgICAgICBrZXk6IGlucHV0LmtleSxcbiAgICAgICAgICAgIGlzVHJ1c3RlZDogdHJ1ZSxcbiAgICAgICAgICAgIHRhcmdldDogaW5wdXRIYW5kbGVyLFxuICAgICAgICAgICAgY3VycmVudFRhcmdldDogaW5wdXRIYW5kbGVyLFxuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSlcbiAgICB9XG59Il19